import Application from '../mvc/Application';
import AssetManager from "./AssetManager";
import SequenceManager from "./SequenceManager";
import TransitionManager from "./TransitionManager";
import StorageManager from "./StorageManager";
import AudioManager from "./AudioManager";
import AnalyticsManager from "./AnalyticsManager";
import GameObjectFactory from "./GameObjectFactory";
import Group from "../display/Group";
import * as interfaces from '../interfaces';
export default class Game extends Phaser.Game {
    app: Application;
    config: interfaces.IGameConfig;
    asset: AssetManager;
    sequence: SequenceManager;
    transition: TransitionManager;
    storage: StorageManager;
    audio: AudioManager;
    analytics: AnalyticsManager;
    add: GameObjectFactory;
    onWorldInputDisabled: Phaser.Signal;
    onWorldInputEnabled: Phaser.Signal;
    gameLayer: Group;
    uiLayer: Group;
    stageLayer: Group;
    constructor(config: interfaces.IGameConfig);
    boot(): void;
    addPlugins(): void;
    setFactoryDefaultLayer(newLayer: Phaser.Group): void;
    setDefault: any;
    protected addLayers(): void;
    disableElementInput(el: any): any;
    enableElementInput(el: any): any;
    disableInput(group: Phaser.Group): any;
    enableInput(group: Phaser.Group): any;
    disableGameInput(): void;
    enableGameInput(): void;
    changeState(toState: string): void;
    addToGame: GameObjectFactory;
    addToUI: GameObjectFactory;
    addToStage: GameObjectFactory;
    addToWorld: GameObjectFactory;
}
