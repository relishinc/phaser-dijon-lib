import Application from '../mvc/Application';
import Game from './Game';
import * as interfaces from '../interfaces';
export default class AssetManager implements interfaces.INotifier {
    protected app: Application;
    private _data;
    private _baseURL;
    private _pathObj;
    private _assetPath;
    private _dataPath;
    private _spriteSheetPath;
    private _imgPath;
    private _fontPath;
    private _bitmapFontPath;
    private _physicsPath;
    private _audioSpritePath;
    private _soundPath;
    private _soundDecodingModifier;
    private _res;
    private _resolution;
    private _loadData;
    private _autoLoadData;
    private _completedLoads;
    private _requiredData;
    private _currentAssetList;
    private _hasFiles;
    private _soundsToDecode;
    private _isLoadingQueue;
    private _fileCompleteProgress;
    private _maxPercent;
    private _numSounds;
    private _soundsDecoded;
    private _cacheBustVersion;
    game: Game;
    onLoadStart: Phaser.Signal;
    onFileStart: Phaser.Signal;
    onFileComplete: Phaser.Signal;
    onLoadComplete: Phaser.Signal;
    onLoadCompleteAndAudioDecoded: Phaser.Signal;
    onBackgroundLoadStart: Phaser.Signal;
    onBackgroundFileStart: Phaser.Signal;
    onBackgroundFileComplete: Phaser.Signal;
    onBackgroundLoadComplete: Phaser.Signal;
    onBackgroundLoadCompleteAndAudioDecoded: Phaser.Signal;
    static AUDIO: string;
    static SOUND: string;
    static AUDIO_SPRITE: string;
    static IMAGE: string;
    static ATLAS: string;
    static TEXT: string;
    static JSON: string;
    static PHYSICS: string;
    static ASSET_LIST: string;
    static RESOLUTION_2X: string;
    static RESOLUTION_3X: string;
    constructor();
    private _init();
    private _parseAssetList(key, list);
    private _loadAssets(id);
    private _backgroundLoadStart();
    private _backgroundFileComplete(progress, id, fileIndex, totalFiles);
    private _backgroundLoadComplete();
    private _gameLoadStart();
    private _gameFileStart();
    private _gameFileComplete(progress, id?, fileIndex?, totalFiles?);
    private _setBaseTextureResolution(texture);
    private _gameLoadComplete();
    private _checkSoundDecoding(eventToDispatch);
    private _onSoundDecoded(sound);
    private _getAssetKey(fileName);
    private _getExtension(fileName);
    private _getResolution(res);
    private _loadAsset(asset);
    private _parseData();
    private _getCacheBustedUrl(url);
    loadText(url: string): Phaser.Loader;
    loadJSON(key: string): Phaser.Loader;
    loadPhysics(key: string): Phaser.Loader;
    loadAtlas(url: string, resolution?: any): Phaser.Loader | string;
    loadImage(url: string, resolution?: any): Phaser.Loader | string;
    loadBitmapFont(url: string, resolution?: any): void;
    loadAudio(url: string, exts: any, isAudioSprite: boolean): void;
    loadSound(url: string, exts: any): void;
    loadAudioSprite(url: string, exts: any): void;
    loadAssets(id: string, background?: boolean): void;
    loadQueue(): void;
    getLoadProgress(): number;
    allSoundsDecoded(): boolean;
    setData(data: Object): void;
    clearAssets(id: string, clearAudio?: boolean, clearAtlasses?: boolean, clearImages?: boolean, clearText?: boolean, clearJSON?: boolean): void;
    clearAsset(asset: interfaces.IAsset, clearAudio?: boolean, clearAtlasses?: boolean, clearImages?: boolean, clearText?: boolean, clearJSON?: boolean): void;
    hasLoadedAssets(id: string): boolean;
    sendNotification(notificationName: string, notificationBody?: any): void;
    baseURL: string;
    paths: interfaces.IPathConfig;
    resolution: number;
    soundDecodingModifier: number;
    cacheBustVersion: string | number;
}
