var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
System.register("dijon/interfaces", [], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    return {
        setters:[],
        execute: function() {
        }
    }
});
System.register("dijon/mvc", ["dijon/application"], function(exports_2, context_2) {
    "use strict";
    var __moduleName = context_2 && context_2.id;
    var application_1;
    var Model, CopyModel, Mediator, Notification;
    return {
        setters:[
            function (application_1_1) {
                application_1 = application_1_1;
            }],
        execute: function() {
            Model = (function () {
                function Model(dataKey, modelName) {
                    if (dataKey === void 0) { dataKey = null; }
                    if (modelName === void 0) { modelName = null; }
                    this.modelName = modelName;
                    this.app = application_1.Application.getInstance();
                    this.game = this.app.game;
                    if (dataKey) {
                        this.setData(dataKey);
                    }
                    this.app.registerModel(this);
                }
                Model.prototype.onRegister = function () {
                };
                Model.prototype.onRemoved = function () {
                };
                Model.prototype.getKeyExists = function (key) {
                    return this.game.cache.getJSON(key) !== null;
                };
                Model.prototype.setData = function (dataKey) {
                    if (!this.getKeyExists(dataKey)) {
                        console.log('Model:: cannot set data from key ' + dataKey + '. Is it in the Phaser cache?');
                        return false;
                    }
                    this._data = this.game.cache.getJSON(dataKey);
                    return this._data;
                };
                Model.prototype.getData = function () {
                    return this._data;
                };
                Model.prototype.destroy = function () {
                    this.app.removeModel(this);
                };
                Object.defineProperty(Model.prototype, "name", {
                    get: function () {
                        return this.modelName || Model.MODEL_NAME;
                    },
                    enumerable: true,
                    configurable: true
                });
                Model.MODEL_NAME = 'Model';
                return Model;
            }());
            exports_2("Model", Model);
            CopyModel = (function (_super) {
                __extends(CopyModel, _super);
                function CopyModel(dataKey) {
                    if (dataKey === void 0) { dataKey = null; }
                    _super.call(this, dataKey);
                    this._languages = {};
                    this._languages['en'] = this._data;
                }
                CopyModel.prototype.getCopy = function (groupId, itemId) {
                    return this.getCopyGroup(groupId)[itemId];
                };
                CopyModel.prototype.getCopyGroup = function (groupId) {
                    return this._data[groupId];
                };
                CopyModel.prototype.addLanguage = function (languageId, dataKey) {
                    if (!this.getKeyExists(dataKey)) {
                        throw new Error('cannot add an alternate language from key ' + dataKey + '. Is it in the Phaser cache?');
                    }
                    this._languages[languageId] = this.game.cache.getJSON(dataKey);
                };
                CopyModel.prototype.changeLanguage = function (languageId) {
                    if (typeof this._languages[languageId] === 'undefined')
                        throw new Error('there is no language ' + languageId);
                    this._data = this._languages[languageId];
                };
                Object.defineProperty(CopyModel.prototype, "name", {
                    get: function () {
                        return CopyModel.MODEL_NAME;
                    },
                    enumerable: true,
                    configurable: true
                });
                CopyModel.MODEL_NAME = 'copyModel';
                return CopyModel;
            }(Model));
            exports_2("CopyModel", CopyModel);
            Mediator = (function () {
                function Mediator(_viewComponent, autoReg, mediatorName) {
                    if (_viewComponent === void 0) { _viewComponent = null; }
                    if (autoReg === void 0) { autoReg = true; }
                    if (mediatorName === void 0) { mediatorName = null; }
                    this._viewComponent = _viewComponent;
                    this.mediatorName = null;
                    this.app = application_1.Application.getInstance();
                    this.game = this.app.game;
                    this.mediatorName = mediatorName;
                    if (autoReg) {
                        this.register();
                    }
                }
                Mediator.prototype.register = function () {
                    this.app.registerMediator(this);
                };
                Mediator.prototype.remove = function () {
                    this.app.removeMediator(this);
                };
                Mediator.prototype.onRegister = function () {
                };
                Mediator.prototype.onRemoved = function () {
                };
                Mediator.prototype.destroy = function () {
                    this.remove();
                };
                Mediator.prototype.listNotificationInterests = function () {
                    return [];
                };
                Mediator.prototype.handleNotification = function (notification) {
                };
                Mediator.prototype.sendNotification = function (notificationName, notificationBody) {
                    this.app.sendNotification(notificationName, notificationBody);
                };
                Object.defineProperty(Mediator.prototype, "viewComponent", {
                    get: function () {
                        return this._viewComponent;
                    },
                    set: function (viewComponent) {
                        this._viewComponent = viewComponent;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Mediator.prototype, "name", {
                    get: function () {
                        return this.mediatorName || Mediator.MEDIATOR_NAME;
                    },
                    enumerable: true,
                    configurable: true
                });
                Mediator.MEDIATOR_NAME = 'Mediator';
                return Mediator;
            }());
            exports_2("Mediator", Mediator);
            Notification = (function () {
                function Notification(_name, _body) {
                    if (_body === void 0) { _body = null; }
                    this._name = _name;
                    this._body = _body;
                }
                Notification.prototype.getName = function () {
                    return this._name;
                };
                Notification.prototype.setBody = function (body) {
                    this._body = body;
                };
                Notification.prototype.getBody = function () {
                    return this._body;
                };
                Notification.prototype.destroy = function () {
                    this._body = null;
                    this._name = null;
                };
                return Notification;
            }());
            exports_2("Notification", Notification);
        }
    }
});
System.register("dijon/spine/spine", [], function(exports_3, context_3) {
    "use strict";
    var __moduleName = context_3 && context_3.id;
    var Color, Curve, Angle, Vector, Position, Rotation, Scale, Space, Bone, Ikc, Slot, Attachment, RegionAttachment, BoundingBoxAttachment, MeshAttachment, SkinnedMeshAttachment, SkinSlot, Skin, Event, Keyframe, BoneKeyframe, TranslateKeyframe, RotateKeyframe, ScaleKeyframe, AnimBone, SlotKeyframe, ColorKeyframe, AttachmentKeyframe, AnimSlot, EventKeyframe, SlotOffset, OrderKeyframe, IkcKeyframe, AnimIkc, FfdKeyframe, FfdAttachment, FfdSlot, AnimFfd, Animation, Skeleton, Data, Pose;
    function loadBool(json, key, def) {
        var value = json[key];
        switch (typeof (value)) {
            case "string": return (value === "true") ? true : false;
            case "boolean": return value;
            default: return def || false;
        }
    }
    exports_3("loadBool", loadBool);
    function saveBool(json, key, value, def) {
        if ((typeof (def) !== "boolean") || (value !== def)) {
            json[key] = value;
        }
    }
    exports_3("saveBool", saveBool);
    function loadFloat(json, key, def) {
        var value = json[key];
        switch (typeof (value)) {
            case "string": return parseFloat(value);
            case "number": return value;
            default: return def || 0;
        }
    }
    exports_3("loadFloat", loadFloat);
    function saveFloat(json, key, value, def) {
        if ((typeof (def) !== "number") || (value !== def)) {
            json[key] = value;
        }
    }
    exports_3("saveFloat", saveFloat);
    function loadInt(json, key, def) {
        var value = json[key];
        switch (typeof (value)) {
            case "string": return parseInt(value, 10);
            case "number": return 0 | value;
            default: return def || 0;
        }
    }
    exports_3("loadInt", loadInt);
    function saveInt(json, key, value, def) {
        if ((typeof (def) !== "number") || (value !== def)) {
            json[key] = value;
        }
    }
    exports_3("saveInt", saveInt);
    function loadString(json, key, def) {
        var value = json[key];
        switch (typeof (value)) {
            case "string": return value;
            default: return def || "";
        }
    }
    exports_3("loadString", loadString);
    function saveString(json, key, value, def) {
        if ((typeof (def) !== "string") || (value !== def)) {
            json[key] = value;
        }
    }
    exports_3("saveString", saveString);
    function BezierCurve(x1, y1, x2, y2, epsilon) {
        if (epsilon === void 0) { epsilon = 1e-6; }
        function curveX(t) {
            var t2 = t * t;
            var t3 = t2 * t;
            var v = 1 - t;
            var v2 = v * v;
            return 3 * x1 * v2 * t + 3 * x2 * v * t2 + t3;
        }
        ;
        function curveY(t) {
            var t2 = t * t;
            var t3 = t2 * t;
            var v = 1 - t;
            var v2 = v * v;
            return 3 * y1 * v2 * t + 3 * y2 * v * t2 + t3;
        }
        ;
        function derivativeCurveX(t) {
            var t2 = t * t;
            var t3 = t2 * t;
            return 3 * x1 * t - 3 * (2 * x1 - x2) * t2 + (3 * x1 - 3 * x2 + 1) * t3;
        }
        ;
        return function (percent) {
            var x = percent;
            var t0, t1, t2, x2, d2, i;
            for (t2 = x, i = 0; i < 8; ++i) {
                x2 = curveX(t2) - x;
                if (Math.abs(x2) < epsilon)
                    return curveY(t2);
                d2 = derivativeCurveX(t2);
                if (Math.abs(d2) < epsilon)
                    break;
                t2 = t2 - (x2 / d2);
            }
            t0 = 0, t1 = 1, t2 = x;
            if (t2 < t0)
                return curveY(t0);
            if (t2 > t1)
                return curveY(t1);
            while (t0 < t1) {
                x2 = curveX(t2);
                if (Math.abs(x2 - x) < epsilon)
                    return curveY(t2);
                if (x > x2)
                    t0 = t2;
                else
                    t1 = t2;
                t2 = (t1 - t0) * 0.5 + t0;
            }
            return curveY(t2);
        };
    }
    function StepBezierCurve(cx1, cy1, cx2, cy2) {
        var bezierSegments = 10;
        var subdiv_step = 1 / bezierSegments;
        var subdiv_step2 = subdiv_step * subdiv_step;
        var subdiv_step3 = subdiv_step2 * subdiv_step;
        var pre1 = 3 * subdiv_step;
        var pre2 = 3 * subdiv_step2;
        var pre4 = 6 * subdiv_step2;
        var pre5 = 6 * subdiv_step3;
        var tmp1x = -cx1 * 2 + cx2;
        var tmp1y = -cy1 * 2 + cy2;
        var tmp2x = (cx1 - cx2) * 3 + 1;
        var tmp2y = (cy1 - cy2) * 3 + 1;
        var curves_0 = (cx1 * pre1 + tmp1x * pre2 + tmp2x * subdiv_step3);
        var curves_1 = (cy1 * pre1 + tmp1y * pre2 + tmp2y * subdiv_step3);
        var curves_2 = (tmp1x * pre4 + tmp2x * pre5);
        var curves_3 = (tmp1y * pre4 + tmp2y * pre5);
        var curves_4 = (tmp2x * pre5);
        var curves_5 = (tmp2y * pre5);
        return function (percent) {
            var dfx = curves_0;
            var dfy = curves_1;
            var ddfx = curves_2;
            var ddfy = curves_3;
            var dddfx = curves_4;
            var dddfy = curves_5;
            var x = dfx, y = dfy;
            var i = bezierSegments - 2;
            while (true) {
                if (x >= percent) {
                    var lastX = x - dfx;
                    var lastY = y - dfy;
                    return lastY + (y - lastY) * (percent - lastX) / (x - lastX);
                }
                if (i === 0)
                    break;
                i--;
                dfx += ddfx;
                dfy += ddfy;
                ddfx += dddfx;
                ddfy += dddfy;
                x += dfx;
                y += dfy;
            }
            return y + (1 - y) * (percent - x) / (1 - x);
        };
    }
    exports_3("StepBezierCurve", StepBezierCurve);
    function wrap(num, min, max) {
        if (min < max) {
            if (num < min) {
                return max - ((min - num) % (max - min));
            }
            else {
                return min + ((num - min) % (max - min));
            }
        }
        else if (min === max) {
            return min;
        }
        else {
            return num;
        }
    }
    exports_3("wrap", wrap);
    function tween(a, b, t) {
        return a + ((b - a) * t);
    }
    exports_3("tween", tween);
    function wrapAngleRadians(angle) {
        if (angle <= 0) {
            return ((angle - Math.PI) % (2 * Math.PI)) + Math.PI;
        }
        else {
            return ((angle + Math.PI) % (2 * Math.PI)) - Math.PI;
        }
    }
    exports_3("wrapAngleRadians", wrapAngleRadians);
    function tweenAngle(a, b, t) {
        return wrapAngleRadians(a + (wrapAngleRadians(b - a) * t));
    }
    exports_3("tweenAngle", tweenAngle);
    return {
        setters:[],
        execute: function() {
            Color = (function () {
                function Color() {
                    this.r = 1.0;
                    this.g = 1.0;
                    this.b = 1.0;
                    this.a = 1.0;
                }
                Color.prototype.copy = function (other) {
                    this.r = other.r;
                    this.g = other.g;
                    this.b = other.b;
                    this.a = other.a;
                    return this;
                };
                Color.prototype.load = function (json) {
                    var color = this;
                    var rgba = 0xffffffff;
                    switch (typeof (json)) {
                        case "string":
                            rgba = parseInt(json, 16);
                            break;
                        case "number":
                            rgba = 0 | json;
                            break;
                        default:
                            rgba = 0xffffffff;
                            break;
                    }
                    color.r = ((rgba >> 24) & 0xff) / 255;
                    color.g = ((rgba >> 16) & 0xff) / 255;
                    color.b = ((rgba >> 8) & 0xff) / 255;
                    color.a = (rgba & 0xff) / 255;
                    return color;
                };
                Color.prototype.toString = function () {
                    var color = this;
                    return "rgba(" + (color.r * 255).toFixed(0) + "," + (color.g * 255).toFixed(0) + "," + (color.b * 255).toFixed(0) + "," + color.a + ")";
                };
                return Color;
            }());
            exports_3("Color", Color);
            Curve = (function () {
                function Curve() {
                    this.evaluate = function (t) { return t; };
                }
                Curve.prototype.load = function (json) {
                    this.evaluate = function (t) { return t; };
                    if ((typeof (json) === "string") && (json === "stepped")) {
                        this.evaluate = function (t) { return 0; };
                    }
                    else if ((typeof (json) === "object") && (typeof (json.length) === "number") && (json.length === 4)) {
                        var x1 = loadFloat(json, 0, 0);
                        var y1 = loadFloat(json, 1, 0);
                        var x2 = loadFloat(json, 2, 1);
                        var y2 = loadFloat(json, 3, 1);
                        this.evaluate = StepBezierCurve(x1, y1, x2, y2);
                    }
                    return this;
                };
                return Curve;
            }());
            exports_3("Curve", Curve);
            Angle = (function () {
                function Angle(rad) {
                    this.rad = 0.0;
                    this.rad = rad || 0.0;
                }
                Object.defineProperty(Angle.prototype, "deg", {
                    get: function () { return this.rad * 180.0 / Math.PI; },
                    set: function (value) { this.rad = value * Math.PI / 180.0; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Angle.prototype, "cos", {
                    get: function () { return Math.cos(this.rad); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Angle.prototype, "sin", {
                    get: function () { return Math.sin(this.rad); },
                    enumerable: true,
                    configurable: true
                });
                Angle.prototype.selfIdentity = function () { this.rad = 0.0; return this; };
                Angle.prototype.copy = function (other) { this.rad = other.rad; return this; };
                return Angle;
            }());
            exports_3("Angle", Angle);
            Vector = (function () {
                function Vector(x, y) {
                    if (x === void 0) { x = 0.0; }
                    if (y === void 0) { y = 0.0; }
                    this.x = 0.0;
                    this.y = 0.0;
                    this.x = x;
                    this.y = y;
                }
                Vector.prototype.copy = function (other) {
                    this.x = other.x;
                    this.y = other.y;
                    return this;
                };
                Vector.equal = function (a, b, epsilon) {
                    if (epsilon === void 0) { epsilon = 1e-6; }
                    if (Math.abs(a.x - b.x) > epsilon) {
                        return false;
                    }
                    if (Math.abs(a.y - b.y) > epsilon) {
                        return false;
                    }
                    return true;
                };
                Vector.add = function (a, b, out) {
                    if (out === void 0) { out = new Vector(); }
                    out.x = a.x + b.x;
                    out.y = a.y + b.y;
                    return out;
                };
                Vector.prototype.add = function (other, out) {
                    if (out === void 0) { out = new Vector(); }
                    return Vector.add(this, other, out);
                };
                Vector.prototype.selfAdd = function (other) {
                    this.x += other.x;
                    this.y += other.y;
                    return this;
                };
                Vector.tween = function (a, b, pct, out) {
                    if (out === void 0) { out = new Vector(); }
                    out.x = tween(a.x, b.x, pct);
                    out.y = tween(a.y, b.y, pct);
                    return out;
                };
                Vector.prototype.tween = function (other, pct, out) {
                    if (out === void 0) { out = new Vector(); }
                    return Vector.tween(this, other, pct, out);
                };
                Vector.prototype.selfTween = function (other, pct) {
                    return Vector.tween(this, other, pct, this);
                };
                return Vector;
            }());
            exports_3("Vector", Vector);
            Position = (function (_super) {
                __extends(Position, _super);
                function Position() {
                    _super.call(this, 0.0, 0.0);
                }
                return Position;
            }(Vector));
            exports_3("Position", Position);
            Rotation = (function (_super) {
                __extends(Rotation, _super);
                function Rotation() {
                    _super.call(this, 0.0);
                }
                return Rotation;
            }(Angle));
            exports_3("Rotation", Rotation);
            Scale = (function (_super) {
                __extends(Scale, _super);
                function Scale() {
                    _super.call(this, 1.0, 1.0);
                }
                Scale.prototype.selfIdentity = function () {
                    this.x = 1.0;
                    this.y = 1.0;
                    return this;
                };
                return Scale;
            }(Vector));
            exports_3("Scale", Scale);
            Space = (function () {
                function Space() {
                    this.position = new Position();
                    this.rotation = new Rotation();
                    this.scale = new Scale();
                }
                Space.prototype.copy = function (other) {
                    this.position.copy(other.position);
                    this.rotation.copy(other.rotation);
                    this.scale.copy(other.scale);
                    return this;
                };
                Space.prototype.load = function (json) {
                    this.position.x = loadFloat(json, "x", 0);
                    this.position.y = loadFloat(json, "y", 0);
                    this.rotation.deg = loadFloat(json, "rotation", 0);
                    this.scale.x = loadFloat(json, "scaleX", 1);
                    this.scale.y = loadFloat(json, "scaleY", 1);
                    return this;
                };
                Space.equal = function (a, b, epsilon) {
                    if (epsilon === void 0) { epsilon = 1e-6; }
                    if (Math.abs(a.position.x - b.position.x) > epsilon) {
                        return false;
                    }
                    if (Math.abs(a.position.y - b.position.y) > epsilon) {
                        return false;
                    }
                    if (Math.abs(a.rotation.rad - b.rotation.rad) > epsilon) {
                        return false;
                    }
                    if (Math.abs(a.scale.x - b.scale.x) > epsilon) {
                        return false;
                    }
                    if (Math.abs(a.scale.y - b.scale.y) > epsilon) {
                        return false;
                    }
                    return true;
                };
                Space.identity = function (out) {
                    if (out === void 0) { out = new Space(); }
                    out.position.x = 0;
                    out.position.y = 0;
                    out.rotation.rad = 0;
                    out.scale.x = 1;
                    out.scale.y = 1;
                    return out;
                };
                Space.translate = function (space, x, y) {
                    x *= space.scale.x;
                    y *= space.scale.y;
                    var rad = space.rotation.rad;
                    var c = Math.cos(rad);
                    var s = Math.sin(rad);
                    var tx = c * x - s * y;
                    var ty = s * x + c * y;
                    space.position.x += tx;
                    space.position.y += ty;
                    return space;
                };
                Space.rotate = function (space, rad) {
                    space.rotation.rad += rad;
                    space.rotation.rad = wrapAngleRadians(space.rotation.rad);
                    return space;
                };
                Space.scale = function (space, x, y) {
                    space.scale.x *= x;
                    space.scale.y *= y;
                    return space;
                };
                Space.invert = function (space, out) {
                    if (out === void 0) { out = new Space(); }
                    var inv_scale_x = 1 / space.scale.x;
                    var inv_scale_y = 1 / space.scale.y;
                    var inv_rotation = -space.rotation.rad;
                    var inv_x = -space.position.x;
                    var inv_y = -space.position.y;
                    out.scale.x = inv_scale_x;
                    out.scale.y = inv_scale_y;
                    out.rotation.rad = inv_rotation;
                    var x = inv_x;
                    var y = inv_y;
                    var rad = inv_rotation;
                    var c = Math.cos(rad);
                    var s = Math.sin(rad);
                    var tx = c * x - s * y;
                    var ty = s * x + c * y;
                    out.position.x = tx * inv_scale_x;
                    out.position.y = ty * inv_scale_y;
                    return out;
                };
                Space.combine = function (a, b, out) {
                    if (out === void 0) { out = new Space(); }
                    var x = b.position.x * a.scale.x;
                    var y = b.position.y * a.scale.y;
                    var rad = a.rotation.rad;
                    var c = Math.cos(rad);
                    var s = Math.sin(rad);
                    var tx = c * x - s * y;
                    var ty = s * x + c * y;
                    out.position.x = tx + a.position.x;
                    out.position.y = ty + a.position.y;
                    out.rotation.rad = wrapAngleRadians(b.rotation.rad + a.rotation.rad);
                    out.scale.x = b.scale.x * a.scale.x;
                    out.scale.y = b.scale.y * a.scale.y;
                    return out;
                };
                Space.extract = function (ab, a, out) {
                    if (out === void 0) { out = new Space(); }
                    out.scale.x = ab.scale.x / a.scale.x;
                    out.scale.y = ab.scale.y / a.scale.y;
                    out.rotation.rad = wrapAngleRadians(ab.rotation.rad - a.rotation.rad);
                    var x = ab.position.x - a.position.x;
                    var y = ab.position.y - a.position.y;
                    var rad = -a.rotation.rad;
                    var c = Math.cos(rad);
                    var s = Math.sin(rad);
                    var tx = c * x - s * y;
                    var ty = s * x + c * y;
                    out.position.x = tx / a.scale.x;
                    out.position.y = ty / a.scale.y;
                    return out;
                };
                Space.transform = function (space, v, out) {
                    if (out === void 0) { out = new Vector(); }
                    var x = v.x * space.scale.x;
                    var y = v.y * space.scale.y;
                    var rad = space.rotation.rad;
                    var c = Math.cos(rad);
                    var s = Math.sin(rad);
                    var tx = c * x - s * y;
                    var ty = s * x + c * y;
                    out.x = tx + space.position.x;
                    out.y = ty + space.position.y;
                    return out;
                };
                Space.untransform = function (space, v, out) {
                    if (out === void 0) { out = new Vector(); }
                    var x = v.x - space.position.x;
                    var y = v.y - space.position.y;
                    var rad = -space.rotation.rad;
                    var c = Math.cos(rad);
                    var s = Math.sin(rad);
                    var tx = c * x - s * y;
                    var ty = s * x + c * y;
                    out.x = tx / space.scale.x;
                    out.y = ty / space.scale.y;
                    return out;
                };
                Space.tween = function (a, b, t, out) {
                    if (out === void 0) { out = new Space(); }
                    out.position.x = tween(a.position.x, b.position.x, t);
                    out.position.y = tween(a.position.y, b.position.y, t);
                    out.rotation.rad = tweenAngle(a.rotation.rad, b.rotation.rad, t);
                    out.scale.x = tween(a.scale.x, b.scale.x, t);
                    out.scale.y = tween(a.scale.y, b.scale.y, t);
                    return out;
                };
                return Space;
            }());
            exports_3("Space", Space);
            Bone = (function () {
                function Bone() {
                    this.parent_key = "";
                    this.length = 0;
                    this.local_space = new Space();
                    this.world_space = new Space();
                    this.inherit_rotation = true;
                    this.inherit_scale = true;
                }
                Bone.prototype.copy = function (other) {
                    this.parent_key = other.parent_key;
                    this.length = other.length;
                    this.local_space.copy(other.local_space);
                    this.world_space.copy(other.world_space);
                    this.inherit_rotation = other.inherit_rotation;
                    this.inherit_scale = other.inherit_scale;
                    return this;
                };
                Bone.prototype.load = function (json) {
                    this.parent_key = loadString(json, "parent", "");
                    this.length = loadFloat(json, "length", 0);
                    this.local_space.load(json);
                    this.world_space.copy(this.local_space);
                    this.inherit_rotation = loadBool(json, "inheritRotation", true);
                    this.inherit_scale = loadBool(json, "inheritScale", true);
                    return this;
                };
                Bone.flatten = function (bone, bones) {
                    var parent_bone = bones[bone.parent_key];
                    if (parent_bone) {
                        Bone.flatten(parent_bone, bones);
                        var a = parent_bone.world_space;
                        var b = bone.local_space;
                        var out = bone.world_space;
                        var x = b.position.x * a.scale.x;
                        var y = b.position.y * a.scale.y;
                        var rad = a.rotation.rad;
                        var c = Math.cos(rad);
                        var s = Math.sin(rad);
                        var tx = c * x - s * y;
                        var ty = s * x + c * y;
                        out.position.x = tx + a.position.x;
                        out.position.y = ty + a.position.y;
                        if (bone.inherit_rotation) {
                            out.rotation.rad = wrapAngleRadians(b.rotation.rad + a.rotation.rad);
                        }
                        else {
                            out.rotation.rad = b.rotation.rad;
                        }
                        if (bone.inherit_scale) {
                            out.scale.x = b.scale.x * a.scale.x;
                            out.scale.y = b.scale.y * a.scale.y;
                        }
                        else {
                            out.scale.x = b.scale.x;
                            out.scale.y = b.scale.y;
                        }
                    }
                    else {
                        bone.world_space.copy(bone.local_space);
                    }
                    return bone;
                };
                return Bone;
            }());
            exports_3("Bone", Bone);
            Ikc = (function () {
                function Ikc() {
                    this.name = "";
                    this.bone_keys = [];
                    this.target_key = "";
                    this.mix = 1;
                    this.bend_positive = true;
                }
                Ikc.prototype.load = function (json) {
                    this.name = loadString(json, "name", "");
                    this.bone_keys = json["bones"] || [];
                    this.target_key = loadString(json, "target", "");
                    this.mix = loadFloat(json, "mix", 1);
                    this.bend_positive = loadBool(json, "bendPositive", true);
                    return this;
                };
                return Ikc;
            }());
            exports_3("Ikc", Ikc);
            Slot = (function () {
                function Slot() {
                    this.bone_key = "";
                    this.color = new Color();
                    this.attachment_key = "";
                    this.blend = "normal";
                }
                Slot.prototype.copy = function (other) {
                    this.bone_key = other.bone_key;
                    this.color.copy(other.color);
                    this.attachment_key = other.attachment_key;
                    this.blend = other.blend;
                    return this;
                };
                Slot.prototype.load = function (json) {
                    this.bone_key = loadString(json, "bone", "");
                    this.color.load(json.color);
                    this.attachment_key = loadString(json, "attachment", "");
                    this.blend = loadString(json, "blend", "normal");
                    return this;
                };
                return Slot;
            }());
            exports_3("Slot", Slot);
            Attachment = (function () {
                function Attachment(type) {
                    this.type = "region";
                    this.name = "";
                    this.path = "";
                    this.type = type;
                }
                Attachment.prototype.load = function (json) {
                    var type = loadString(json, "type", "region");
                    if (type !== this.type) {
                        throw new Error();
                    }
                    this.name = loadString(json, "name", "");
                    this.path = loadString(json, "path", "");
                    return this;
                };
                return Attachment;
            }());
            exports_3("Attachment", Attachment);
            RegionAttachment = (function (_super) {
                __extends(RegionAttachment, _super);
                function RegionAttachment() {
                    _super.call(this, "region");
                    this.local_space = new Space();
                    this.width = 0;
                    this.height = 0;
                }
                RegionAttachment.prototype.load = function (json) {
                    _super.prototype.load.call(this, json);
                    this.local_space.load(json);
                    this.width = loadFloat(json, "width", 0);
                    this.height = loadFloat(json, "height", 0);
                    return this;
                };
                return RegionAttachment;
            }(Attachment));
            exports_3("RegionAttachment", RegionAttachment);
            BoundingBoxAttachment = (function (_super) {
                __extends(BoundingBoxAttachment, _super);
                function BoundingBoxAttachment() {
                    _super.call(this, "boundingbox");
                    this.vertices = [];
                }
                BoundingBoxAttachment.prototype.load = function (json) {
                    _super.prototype.load.call(this, json);
                    this.vertices = json.vertices || [];
                    return this;
                };
                return BoundingBoxAttachment;
            }(Attachment));
            exports_3("BoundingBoxAttachment", BoundingBoxAttachment);
            MeshAttachment = (function (_super) {
                __extends(MeshAttachment, _super);
                function MeshAttachment() {
                    _super.call(this, "mesh");
                    this.color = new Color();
                    this.triangles = [];
                    this.edges = [];
                    this.vertices = [];
                    this.uvs = [];
                    this.hull = 0;
                }
                MeshAttachment.prototype.load = function (json) {
                    _super.prototype.load.call(this, json);
                    this.color.load(json.color);
                    this.triangles = json.triangles || [];
                    this.edges = json.edges || [];
                    this.vertices = json.vertices || [];
                    this.uvs = json.uvs || [];
                    this.hull = loadInt(json, "hull", 0);
                    return this;
                };
                return MeshAttachment;
            }(Attachment));
            exports_3("MeshAttachment", MeshAttachment);
            SkinnedMeshAttachment = (function (_super) {
                __extends(SkinnedMeshAttachment, _super);
                function SkinnedMeshAttachment() {
                    _super.call(this, "skinnedmesh");
                    this.color = new Color();
                    this.triangles = [];
                    this.edges = [];
                    this.vertices = [];
                    this.uvs = [];
                    this.hull = 0;
                }
                SkinnedMeshAttachment.prototype.load = function (json) {
                    _super.prototype.load.call(this, json);
                    this.color.load(json.color);
                    this.triangles = json.triangles || [];
                    this.edges = json.edges || [];
                    this.vertices = json.vertices || [];
                    this.uvs = json.uvs || [];
                    this.hull = loadInt(json, "hull", 0);
                    return this;
                };
                return SkinnedMeshAttachment;
            }(Attachment));
            exports_3("SkinnedMeshAttachment", SkinnedMeshAttachment);
            SkinSlot = (function () {
                function SkinSlot() {
                    this.attachments = {};
                    this.attachment_keys = [];
                }
                SkinSlot.prototype.load = function (json) {
                    var _this = this;
                    this.attachment_keys = Object.keys(json);
                    this.attachment_keys.forEach(function (attachment_key) {
                        var json_attachment = json[attachment_key];
                        switch (json_attachment.type) {
                            case "region":
                            default:
                                _this.attachments[attachment_key] = new RegionAttachment().load(json_attachment);
                                break;
                            case "boundingbox":
                                _this.attachments[attachment_key] = new BoundingBoxAttachment().load(json_attachment);
                                break;
                            case "mesh":
                                _this.attachments[attachment_key] = new MeshAttachment().load(json_attachment);
                                break;
                            case "skinnedmesh":
                                _this.attachments[attachment_key] = new SkinnedMeshAttachment().load(json_attachment);
                                break;
                        }
                    });
                    return this;
                };
                return SkinSlot;
            }());
            exports_3("SkinSlot", SkinSlot);
            Skin = (function () {
                function Skin() {
                    this.name = "";
                    this.slots = {};
                    this.slot_keys = [];
                }
                Skin.prototype.load = function (json) {
                    var _this = this;
                    this.name = loadString(json, "name", "");
                    this.slot_keys = Object.keys(json);
                    this.slot_keys.forEach(function (slot_key) {
                        _this.slots[slot_key] = new SkinSlot().load(json[slot_key]);
                    });
                    return this;
                };
                Skin.prototype.iterateAttachments = function (callback) {
                    var _this = this;
                    this.slot_keys.forEach(function (slot_key) {
                        var skin_slot = _this.slots[slot_key];
                        skin_slot.attachment_keys.forEach(function (attachment_key) {
                            var attachment = skin_slot.attachments[attachment_key];
                            callback(slot_key, skin_slot, attachment.path || attachment.name || attachment_key, attachment);
                        });
                    });
                };
                return Skin;
            }());
            exports_3("Skin", Skin);
            Event = (function () {
                function Event() {
                    this.name = "";
                    this.int_value = 0;
                    this.float_value = 0;
                    this.string_value = "";
                }
                Event.prototype.copy = function (other) {
                    this.name = other.name;
                    this.int_value = other.int_value;
                    this.float_value = other.float_value;
                    this.string_value = other.string_value;
                    return this;
                };
                Event.prototype.load = function (json) {
                    this.name = loadString(json, "name", "");
                    if (typeof (json["int"]) === "number") {
                        this.int_value = loadInt(json, "int", 0);
                    }
                    if (typeof (json["float"]) === "number") {
                        this.float_value = loadFloat(json, "float", 0);
                    }
                    if (typeof (json["string"]) === "string") {
                        this.string_value = loadString(json, "string", "");
                    }
                    return this;
                };
                return Event;
            }());
            exports_3("Event", Event);
            Keyframe = (function () {
                function Keyframe() {
                    this.time = 0;
                }
                Keyframe.prototype.drop = function () {
                    this.time = 0;
                    return this;
                };
                Keyframe.prototype.load = function (json) {
                    this.time = 1000 * loadFloat(json, "time", 0);
                    return this;
                };
                Keyframe.prototype.save = function (json) {
                    saveFloat(json, "time", this.time / 1000, 0);
                    return this;
                };
                Keyframe.find = function (array, time) {
                    if (!array) {
                        return -1;
                    }
                    if (array.length <= 0) {
                        return -1;
                    }
                    if (time < array[0].time) {
                        return -1;
                    }
                    var last = array.length - 1;
                    if (time >= array[last].time) {
                        return last;
                    }
                    var lo = 0;
                    var hi = last;
                    if (hi === 0) {
                        return 0;
                    }
                    var current = hi >> 1;
                    while (true) {
                        if (array[current + 1].time <= time) {
                            lo = current + 1;
                        }
                        else {
                            hi = current;
                        }
                        if (lo === hi) {
                            return lo;
                        }
                        current = (lo + hi) >> 1;
                    }
                };
                Keyframe.compare = function (a, b) {
                    return a.time - b.time;
                };
                return Keyframe;
            }());
            exports_3("Keyframe", Keyframe);
            BoneKeyframe = (function (_super) {
                __extends(BoneKeyframe, _super);
                function BoneKeyframe() {
                    _super.apply(this, arguments);
                    this.curve = new Curve();
                }
                BoneKeyframe.prototype.load = function (json) {
                    _super.prototype.load.call(this, json);
                    this.curve.load(json.curve);
                    return this;
                };
                return BoneKeyframe;
            }(Keyframe));
            exports_3("BoneKeyframe", BoneKeyframe);
            TranslateKeyframe = (function (_super) {
                __extends(TranslateKeyframe, _super);
                function TranslateKeyframe() {
                    _super.apply(this, arguments);
                    this.position = new Position();
                }
                TranslateKeyframe.prototype.load = function (json) {
                    _super.prototype.load.call(this, json);
                    this.position.x = loadFloat(json, "x", 0);
                    this.position.y = loadFloat(json, "y", 0);
                    return this;
                };
                return TranslateKeyframe;
            }(BoneKeyframe));
            exports_3("TranslateKeyframe", TranslateKeyframe);
            RotateKeyframe = (function (_super) {
                __extends(RotateKeyframe, _super);
                function RotateKeyframe() {
                    _super.apply(this, arguments);
                    this.rotation = new Rotation();
                }
                RotateKeyframe.prototype.load = function (json) {
                    _super.prototype.load.call(this, json);
                    this.rotation.deg = loadFloat(json, "angle", 0);
                    return this;
                };
                return RotateKeyframe;
            }(BoneKeyframe));
            exports_3("RotateKeyframe", RotateKeyframe);
            ScaleKeyframe = (function (_super) {
                __extends(ScaleKeyframe, _super);
                function ScaleKeyframe() {
                    _super.apply(this, arguments);
                    this.scale = new Scale();
                }
                ScaleKeyframe.prototype.load = function (json) {
                    _super.prototype.load.call(this, json);
                    this.scale.x = loadFloat(json, "x", 1);
                    this.scale.y = loadFloat(json, "y", 1);
                    return this;
                };
                return ScaleKeyframe;
            }(BoneKeyframe));
            exports_3("ScaleKeyframe", ScaleKeyframe);
            AnimBone = (function () {
                function AnimBone() {
                    this.min_time = 0;
                    this.max_time = 0;
                }
                AnimBone.prototype.load = function (json) {
                    var _this = this;
                    this.min_time = 0;
                    this.max_time = 0;
                    this.translate_keyframes = null;
                    this.rotate_keyframes = null;
                    this.scale_keyframes = null;
                    Object.keys(json).forEach(function (key) {
                        switch (key) {
                            case "translate":
                                _this.translate_keyframes = [];
                                json.translate.forEach(function (translate_json) {
                                    var translate_keyframe = new TranslateKeyframe().load(translate_json);
                                    _this.translate_keyframes.push(translate_keyframe);
                                    _this.min_time = Math.min(_this.min_time, translate_keyframe.time);
                                    _this.max_time = Math.max(_this.max_time, translate_keyframe.time);
                                });
                                _this.translate_keyframes.sort(Keyframe.compare);
                                break;
                            case "rotate":
                                _this.rotate_keyframes = [];
                                json.rotate.forEach(function (rotate_json) {
                                    var rotate_keyframe = new RotateKeyframe().load(rotate_json);
                                    _this.rotate_keyframes.push(rotate_keyframe);
                                    _this.min_time = Math.min(_this.min_time, rotate_keyframe.time);
                                    _this.max_time = Math.max(_this.max_time, rotate_keyframe.time);
                                });
                                _this.rotate_keyframes.sort(Keyframe.compare);
                                break;
                            case "scale":
                                _this.scale_keyframes = [];
                                json.scale.forEach(function (scale_json) {
                                    var scale_keyframe = new ScaleKeyframe().load(scale_json);
                                    _this.scale_keyframes.push(scale_keyframe);
                                    _this.min_time = Math.min(_this.min_time, scale_keyframe.time);
                                    _this.max_time = Math.max(_this.max_time, scale_keyframe.time);
                                });
                                _this.scale_keyframes.sort(Keyframe.compare);
                                break;
                            default:
                                console.log("TODO: AnimBone::load", key);
                                break;
                        }
                    });
                    return this;
                };
                return AnimBone;
            }());
            exports_3("AnimBone", AnimBone);
            SlotKeyframe = (function (_super) {
                __extends(SlotKeyframe, _super);
                function SlotKeyframe() {
                    _super.apply(this, arguments);
                }
                return SlotKeyframe;
            }(Keyframe));
            exports_3("SlotKeyframe", SlotKeyframe);
            ColorKeyframe = (function (_super) {
                __extends(ColorKeyframe, _super);
                function ColorKeyframe() {
                    _super.apply(this, arguments);
                    this.color = new Color();
                    this.curve = new Curve();
                }
                ColorKeyframe.prototype.load = function (json) {
                    _super.prototype.load.call(this, json);
                    this.color.load(json.color);
                    this.curve.load(json.curve);
                    return this;
                };
                return ColorKeyframe;
            }(SlotKeyframe));
            exports_3("ColorKeyframe", ColorKeyframe);
            AttachmentKeyframe = (function (_super) {
                __extends(AttachmentKeyframe, _super);
                function AttachmentKeyframe() {
                    _super.apply(this, arguments);
                    this.name = "";
                }
                AttachmentKeyframe.prototype.load = function (json) {
                    _super.prototype.load.call(this, json);
                    this.name = loadString(json, "name", "");
                    return this;
                };
                return AttachmentKeyframe;
            }(SlotKeyframe));
            exports_3("AttachmentKeyframe", AttachmentKeyframe);
            AnimSlot = (function () {
                function AnimSlot() {
                    this.min_time = 0;
                    this.max_time = 0;
                }
                AnimSlot.prototype.load = function (json) {
                    var _this = this;
                    this.min_time = 0;
                    this.max_time = 0;
                    this.color_keyframes = null;
                    this.attachment_keyframes = null;
                    Object.keys(json).forEach(function (key) {
                        switch (key) {
                            case "color":
                                _this.color_keyframes = [];
                                json[key].forEach(function (color) {
                                    var color_keyframe = new ColorKeyframe().load(color);
                                    _this.min_time = Math.min(_this.min_time, color_keyframe.time);
                                    _this.max_time = Math.max(_this.max_time, color_keyframe.time);
                                    _this.color_keyframes.push(color_keyframe);
                                });
                                _this.color_keyframes.sort(Keyframe.compare);
                                break;
                            case "attachment":
                                _this.attachment_keyframes = [];
                                json[key].forEach(function (attachment) {
                                    var attachment_keyframe = new AttachmentKeyframe().load(attachment);
                                    _this.min_time = Math.min(_this.min_time, attachment_keyframe.time);
                                    _this.max_time = Math.max(_this.max_time, attachment_keyframe.time);
                                    _this.attachment_keyframes.push(attachment_keyframe);
                                });
                                _this.attachment_keyframes.sort(Keyframe.compare);
                                break;
                            default:
                                console.log("TODO: AnimSlot::load", key);
                                break;
                        }
                    });
                    return this;
                };
                return AnimSlot;
            }());
            exports_3("AnimSlot", AnimSlot);
            EventKeyframe = (function (_super) {
                __extends(EventKeyframe, _super);
                function EventKeyframe() {
                    _super.apply(this, arguments);
                    this.name = "";
                    this.int_value = 0;
                    this.float_value = 0;
                    this.string_value = "";
                }
                EventKeyframe.prototype.load = function (json) {
                    _super.prototype.load.call(this, json);
                    this.name = loadString(json, "name", "");
                    if (typeof (json["int"]) === "number") {
                        this.int_value = loadInt(json, "int", 0);
                    }
                    if (typeof (json["float"]) === "number") {
                        this.float_value = loadFloat(json, "float", 0);
                    }
                    if (typeof (json["string"]) === "string") {
                        this.string_value = loadString(json, "string", "");
                    }
                    return this;
                };
                return EventKeyframe;
            }(Keyframe));
            exports_3("EventKeyframe", EventKeyframe);
            SlotOffset = (function () {
                function SlotOffset() {
                    this.slot_key = "";
                    this.offset = 0;
                }
                SlotOffset.prototype.load = function (json) {
                    this.slot_key = loadString(json, "slot", "");
                    this.offset = loadInt(json, "offset", 0);
                    return this;
                };
                return SlotOffset;
            }());
            exports_3("SlotOffset", SlotOffset);
            OrderKeyframe = (function (_super) {
                __extends(OrderKeyframe, _super);
                function OrderKeyframe() {
                    _super.apply(this, arguments);
                    this.slot_offsets = [];
                }
                OrderKeyframe.prototype.load = function (json) {
                    var _this = this;
                    _super.prototype.load.call(this, json);
                    this.slot_offsets = [];
                    Object.keys(json).forEach(function (key) {
                        switch (key) {
                            case "offsets":
                                json[key].forEach(function (offset) {
                                    _this.slot_offsets.push(new SlotOffset().load(offset));
                                });
                                break;
                        }
                    });
                    return this;
                };
                return OrderKeyframe;
            }(Keyframe));
            exports_3("OrderKeyframe", OrderKeyframe);
            IkcKeyframe = (function (_super) {
                __extends(IkcKeyframe, _super);
                function IkcKeyframe() {
                    _super.apply(this, arguments);
                    this.curve = new Curve();
                    this.mix = 1;
                    this.bend_positive = true;
                }
                IkcKeyframe.prototype.load = function (json) {
                    _super.prototype.load.call(this, json);
                    this.curve.load(json);
                    this.mix = loadFloat(json, "mix", 1);
                    this.bend_positive = loadBool(json, "bendPositive", true);
                    return this;
                };
                return IkcKeyframe;
            }(Keyframe));
            exports_3("IkcKeyframe", IkcKeyframe);
            AnimIkc = (function () {
                function AnimIkc() {
                    this.min_time = 0;
                    this.max_time = 0;
                }
                AnimIkc.prototype.load = function (json) {
                    var _this = this;
                    this.min_time = 0;
                    this.max_time = 0;
                    this.ikc_keyframes = [];
                    json.forEach(function (ikc) {
                        var ikc_keyframe = new IkcKeyframe().load(ikc);
                        _this.min_time = Math.min(_this.min_time, ikc_keyframe.time);
                        _this.max_time = Math.max(_this.max_time, ikc_keyframe.time);
                        _this.ikc_keyframes.push(ikc_keyframe);
                    });
                    this.ikc_keyframes.sort(Keyframe.compare);
                    return this;
                };
                return AnimIkc;
            }());
            exports_3("AnimIkc", AnimIkc);
            FfdKeyframe = (function (_super) {
                __extends(FfdKeyframe, _super);
                function FfdKeyframe() {
                    _super.apply(this, arguments);
                    this.curve = new Curve();
                    this.offset = 0;
                }
                FfdKeyframe.prototype.load = function (json) {
                    _super.prototype.load.call(this, json);
                    this.curve.load(json);
                    this.offset = loadInt(json, "offset", 0);
                    this.vertices = json.vertices || [];
                    return this;
                };
                return FfdKeyframe;
            }(Keyframe));
            exports_3("FfdKeyframe", FfdKeyframe);
            FfdAttachment = (function () {
                function FfdAttachment() {
                    this.min_time = 0;
                    this.max_time = 0;
                }
                FfdAttachment.prototype.load = function (json) {
                    var _this = this;
                    this.min_time = 0;
                    this.max_time = 0;
                    this.ffd_keyframes = [];
                    json.forEach(function (ffd_keyframe_json) {
                        var ffd_keyframe = new FfdKeyframe().load(ffd_keyframe_json);
                        _this.min_time = Math.min(_this.min_time, ffd_keyframe.time);
                        _this.max_time = Math.max(_this.max_time, ffd_keyframe.time);
                        _this.ffd_keyframes.push(ffd_keyframe);
                    });
                    this.ffd_keyframes.sort(Keyframe.compare);
                    return this;
                };
                return FfdAttachment;
            }());
            exports_3("FfdAttachment", FfdAttachment);
            FfdSlot = (function () {
                function FfdSlot() {
                }
                FfdSlot.prototype.load = function (json) {
                    var _this = this;
                    this.ffd_attachments = {};
                    this.ffd_attachment_keys = Object.keys(json);
                    this.ffd_attachment_keys.forEach(function (key) {
                        _this.ffd_attachments[key] = new FfdAttachment().load(json[key]);
                    });
                    return this;
                };
                FfdSlot.prototype.iterateAttachments = function (callback) {
                    var _this = this;
                    this.ffd_attachment_keys.forEach(function (ffd_attachment_key) {
                        var ffd_attachment = _this.ffd_attachments[ffd_attachment_key];
                        callback(ffd_attachment_key, ffd_attachment);
                    });
                };
                return FfdSlot;
            }());
            exports_3("FfdSlot", FfdSlot);
            AnimFfd = (function () {
                function AnimFfd() {
                    this.min_time = 0;
                    this.max_time = 0;
                }
                AnimFfd.prototype.load = function (json) {
                    var _this = this;
                    this.min_time = 0;
                    this.max_time = 0;
                    this.ffd_slots = {};
                    this.ffd_slot_keys = Object.keys(json);
                    this.ffd_slot_keys.forEach(function (key) {
                        _this.ffd_slots[key] = new FfdSlot().load(json[key]);
                    });
                    this.iterateAttachments(function (ffd_slot_key, ffd_slot, ffd_attachment_key, ffd_attachment) {
                        _this.min_time = Math.min(_this.min_time, ffd_attachment.min_time);
                        _this.max_time = Math.max(_this.max_time, ffd_attachment.max_time);
                    });
                    return this;
                };
                AnimFfd.prototype.iterateAttachments = function (callback) {
                    var _this = this;
                    var ffd_slot_key;
                    var ffd_slot;
                    this.ffd_slot_keys.forEach(function (ffd_slot_key) {
                        ffd_slot = _this.ffd_slots[ffd_slot_key];
                        ffd_slot.iterateAttachments(function (ffd_attachment_key, ffd_attachment) {
                            callback(ffd_slot_key, ffd_slot, ffd_attachment_key, ffd_attachment);
                        });
                    });
                };
                return AnimFfd;
            }());
            exports_3("AnimFfd", AnimFfd);
            Animation = (function () {
                function Animation() {
                    this.name = "";
                    this.min_time = 0;
                    this.max_time = 0;
                    this.length = 0;
                }
                Animation.prototype.load = function (json) {
                    var _this = this;
                    this.bones = {};
                    this.slots = {};
                    this.event_keyframes = null;
                    this.order_keyframes = null;
                    this.ikcs = {};
                    this.ffds = {};
                    this.min_time = 0;
                    this.max_time = 0;
                    Object.keys(json).forEach(function (key) {
                        switch (key) {
                            case "bones":
                                Object.keys(json[key]).forEach(function (bone_key) {
                                    var anim_bone = new AnimBone().load(json[key][bone_key]);
                                    _this.min_time = Math.min(_this.min_time, anim_bone.min_time);
                                    _this.max_time = Math.max(_this.max_time, anim_bone.max_time);
                                    _this.bones[bone_key] = anim_bone;
                                });
                                break;
                            case "slots":
                                Object.keys(json[key]).forEach(function (slot_key) {
                                    var anim_slot = new AnimSlot().load(json[key][slot_key]);
                                    _this.min_time = Math.min(_this.min_time, anim_slot.min_time);
                                    _this.max_time = Math.max(_this.max_time, anim_slot.max_time);
                                    _this.slots[slot_key] = anim_slot;
                                });
                                break;
                            case "events":
                                _this.event_keyframes = [];
                                json[key].forEach(function (event) {
                                    var event_keyframe = new EventKeyframe().load(event);
                                    _this.min_time = Math.min(_this.min_time, event_keyframe.time);
                                    _this.max_time = Math.max(_this.max_time, event_keyframe.time);
                                    _this.event_keyframes.push(event_keyframe);
                                });
                                _this.event_keyframes.sort(Keyframe.compare);
                                break;
                            case "drawOrder":
                            case "draworder":
                                _this.order_keyframes = [];
                                json[key].forEach(function (order) {
                                    var order_keyframe = new OrderKeyframe().load(order);
                                    _this.min_time = Math.min(_this.min_time, order_keyframe.time);
                                    _this.max_time = Math.max(_this.max_time, order_keyframe.time);
                                    _this.order_keyframes.push(order_keyframe);
                                });
                                _this.order_keyframes.sort(Keyframe.compare);
                                break;
                            case "ik":
                                Object.keys(json[key]).forEach(function (ikc_key) {
                                    var anim_ikc = new AnimIkc().load(json[key][ikc_key]);
                                    _this.min_time = Math.min(_this.min_time, anim_ikc.min_time);
                                    _this.max_time = Math.max(_this.max_time, anim_ikc.max_time);
                                    _this.ikcs[ikc_key] = anim_ikc;
                                });
                                break;
                            case "ffd":
                                Object.keys(json[key]).forEach(function (ffd_key) {
                                    var anim_ffd = new AnimFfd().load(json[key][ffd_key]);
                                    _this.min_time = Math.min(_this.min_time, anim_ffd.min_time);
                                    _this.max_time = Math.max(_this.max_time, anim_ffd.max_time);
                                    _this.ffds[ffd_key] = anim_ffd;
                                });
                                break;
                            default:
                                console.log("TODO: Animation::load", key);
                                break;
                        }
                    });
                    this.length = this.max_time - this.min_time;
                    return this;
                };
                return Animation;
            }());
            exports_3("Animation", Animation);
            Skeleton = (function () {
                function Skeleton() {
                    this.hash = "";
                    this.spine = "";
                    this.width = 0;
                    this.height = 0;
                    this.images = "";
                }
                Skeleton.prototype.load = function (json) {
                    this.hash = loadString(json, "hash", "");
                    this.spine = loadString(json, "spine", "");
                    this.width = loadInt(json, "width", 0);
                    this.height = loadInt(json, "height", 0);
                    this.images = loadString(json, "images", "");
                    return this;
                };
                return Skeleton;
            }());
            exports_3("Skeleton", Skeleton);
            Data = (function () {
                function Data() {
                    this.name = "";
                    this.skeleton = new Skeleton();
                    this.bones = {};
                    this.bone_keys = [];
                    this.ikcs = {};
                    this.ikc_keys = [];
                    this.slots = {};
                    this.slot_keys = [];
                    this.skins = {};
                    this.skin_keys = [];
                    this.events = {};
                    this.event_keys = [];
                    this.anims = {};
                    this.anim_keys = [];
                }
                Data.prototype.load = function (json) {
                    var _this = this;
                    this.bones = {};
                    this.bone_keys = [];
                    this.ikcs = {};
                    this.ikc_keys = [];
                    this.slots = {};
                    this.slot_keys = [];
                    this.skins = {};
                    this.skin_keys = [];
                    this.events = {};
                    this.event_keys = [];
                    this.anims = {};
                    this.anim_keys = [];
                    Object.keys(json).forEach(function (key) {
                        switch (key) {
                            case "skeleton":
                                _this.skeleton.load(json[key]);
                                break;
                            case "bones":
                                var json_bones = json[key];
                                json_bones.forEach(function (bone, bone_index) {
                                    _this.bones[bone.name] = new Bone().load(bone);
                                    _this.bone_keys[bone_index] = bone.name;
                                });
                                break;
                            case "ik":
                                var json_ik = json[key];
                                json_ik.forEach(function (ikc, ikc_index) {
                                    _this.ikcs[ikc.name] = new Ikc().load(ikc);
                                    _this.ikc_keys[ikc_index] = ikc.name;
                                });
                                break;
                            case "slots":
                                var json_slots = json[key];
                                json_slots.forEach(function (slot, slot_index) {
                                    _this.slots[slot.name] = new Slot().load(slot);
                                    _this.slot_keys[slot_index] = slot.name;
                                });
                                break;
                            case "skins":
                                var json_skins_1 = json[key];
                                _this.skin_keys = Object.keys(json_skins_1);
                                _this.skin_keys.forEach(function (skin_key) {
                                    var skin = _this.skins[skin_key] = new Skin().load(json_skins_1[skin_key]);
                                    skin.name = skin.name || skin_key;
                                });
                                break;
                            case "events":
                                var json_events_1 = json[key];
                                _this.event_keys = Object.keys(json_events_1);
                                _this.event_keys.forEach(function (event_key) {
                                    var event = _this.events[event_key] = new Event().load(json_events_1[event_key]);
                                    event.name = event.name || event_key;
                                });
                                break;
                            case "animations":
                                var json_animations_1 = json[key];
                                _this.anim_keys = Object.keys(json_animations_1);
                                _this.anim_keys.forEach(function (anim_key) {
                                    var anim = _this.anims[anim_key] = new Animation().load(json_animations_1[anim_key]);
                                    anim.name = anim.name || anim_key;
                                });
                                break;
                            default:
                                console.log("TODO: Skeleton::load", key);
                                break;
                        }
                    });
                    this.iterateBones(function (bone_key, bone) {
                        Bone.flatten(bone, _this.bones);
                    });
                    return this;
                };
                Data.prototype.loadSkeleton = function (json) {
                    this.skeleton.load(json);
                    return this;
                };
                Data.prototype.loadEvent = function (name, json) {
                    var event = this.events[name] = new Event().load(json);
                    event.name = event.name || name;
                    return this;
                };
                Data.prototype.loadAnimation = function (name, json) {
                    var anim = this.anims[name] = new Animation().load(json);
                    anim.name = anim.name || name;
                    return this;
                };
                Data.prototype.getSkins = function () { return this.skins; };
                Data.prototype.getEvents = function () { return this.events; };
                Data.prototype.getAnims = function () { return this.anims; };
                Data.prototype.iterateBones = function (callback) {
                    var _this = this;
                    this.bone_keys.forEach(function (bone_key) {
                        var data_bone = _this.bones[bone_key];
                        callback(bone_key, data_bone);
                    });
                };
                Data.prototype.iterateAttachments = function (skin_key, callback) {
                    var _this = this;
                    var skin = this.skins[skin_key];
                    var default_skin = this.skins["default"];
                    this.slot_keys.forEach(function (slot_key) {
                        var data_slot = _this.slots[slot_key];
                        var skin_slot = skin && (skin.slots[slot_key] || default_skin.slots[slot_key]);
                        var attachment = skin_slot && skin_slot.attachments[data_slot.attachment_key];
                        var attachment_key = (attachment && (attachment.path || attachment.name)) || data_slot.attachment_key;
                        callback(slot_key, data_slot, skin_slot, attachment_key, attachment);
                    });
                };
                Data.prototype.iterateSkins = function (callback) {
                    var _this = this;
                    this.skin_keys.forEach(function (skin_key) {
                        var skin = _this.skins[skin_key];
                        callback(skin_key, skin);
                    });
                };
                Data.prototype.iterateEvents = function (callback) {
                    var _this = this;
                    this.event_keys.forEach(function (event_key) {
                        var event = _this.events[event_key];
                        callback(event_key, event);
                    });
                };
                Data.prototype.iterateAnims = function (callback) {
                    var _this = this;
                    this.anim_keys.forEach(function (anim_key) {
                        var anim = _this.anims[anim_key];
                        callback(anim_key, anim);
                    });
                };
                return Data;
            }());
            exports_3("Data", Data);
            Pose = (function () {
                function Pose(data) {
                    this.skin_key = "";
                    this.anim_key = "";
                    this.time = 0;
                    this.elapsed_time = 0;
                    this.dirty = true;
                    this.bones = {};
                    this.bone_keys = [];
                    this.slots = {};
                    this.slot_keys = [];
                    this.events = [];
                    this.onComplete = new Phaser.Signal();
                    this.data = data;
                }
                Pose.prototype.curSkel = function () {
                    var pose = this;
                    var data = pose.data;
                    return data && data.skeleton;
                };
                Pose.prototype.getSkins = function () {
                    var pose = this;
                    var data = pose.data;
                    return data && data.skins;
                };
                Pose.prototype.curSkin = function () {
                    var pose = this;
                    var data = pose.data;
                    return data && data.skins[pose.skin_key];
                };
                Pose.prototype.getSkin = function () {
                    var pose = this;
                    return pose.skin_key;
                };
                Pose.prototype.setSkin = function (skin_key) {
                    var pose = this;
                    if (pose.skin_key !== skin_key) {
                        pose.skin_key = skin_key;
                    }
                };
                Pose.prototype.getEvents = function () {
                    var pose = this;
                    var data = pose.data;
                    return data && data.events;
                };
                Pose.prototype.getAnims = function () {
                    var pose = this;
                    var data = pose.data;
                    return data && data.anims;
                };
                Pose.prototype.curAnim = function () {
                    var pose = this;
                    var data = pose.data;
                    return data && data.anims[pose.anim_key];
                };
                Pose.prototype.curAnimLength = function () {
                    var pose = this;
                    var data = pose.data;
                    var anim = data && data.anims[pose.anim_key];
                    return (anim && anim.length) || 0;
                };
                Pose.prototype.getAnim = function () {
                    var pose = this;
                    return pose.anim_key;
                };
                Pose.prototype.setAnim = function (anim_key) {
                    var pose = this;
                    if (pose.anim_key !== anim_key) {
                        pose.anim_key = anim_key;
                        var data = pose.data;
                        var anim = data && data.anims[pose.anim_key];
                        if (anim) {
                            pose.time = wrap(pose.time, anim.min_time, anim.max_time);
                        }
                        pose.elapsed_time = 0;
                        pose.dirty = true;
                    }
                };
                Pose.prototype.getTime = function () {
                    var pose = this;
                    return pose.time;
                };
                Pose.prototype.setTime = function (time) {
                    var pose = this;
                    var data = pose.data;
                    var anim = data && data.anims[pose.anim_key];
                    if (anim) {
                        time = wrap(time, anim.min_time, anim.max_time);
                    }
                    if (pose.time !== time) {
                        pose.time = time;
                        pose.elapsed_time = 0;
                        pose.dirty = true;
                    }
                };
                Pose.prototype.update = function (elapsed_time) {
                    var pose = this;
                    pose.elapsed_time += elapsed_time;
                    pose.dirty = true;
                };
                Pose.prototype.strike = function () {
                    var pose = this;
                    if (!pose.dirty) {
                        return;
                    }
                    pose.dirty = false;
                    var data = pose.data;
                    var anim = data && data.anims[pose.anim_key];
                    var prev_time = pose.time;
                    var elapsed_time = pose.elapsed_time;
                    pose.time = pose.time + pose.elapsed_time;
                    pose.elapsed_time = 0;
                    var wrapped_min = false;
                    var wrapped_max = false;
                    if (anim) {
                        wrapped_min = (elapsed_time < 0) && (pose.time <= anim.min_time);
                        wrapped_max = (elapsed_time > 0) && (pose.time >= anim.max_time);
                        if (wrapped_max) {
                            this.onComplete.dispatch();
                        }
                        pose.time = wrap(pose.time, anim.min_time, anim.max_time);
                    }
                    var time = pose.time;
                    var keyframe_index;
                    data.bone_keys.forEach(function (bone_key) {
                        var data_bone = data.bones[bone_key];
                        var pose_bone = pose.bones[bone_key] || (pose.bones[bone_key] = new Bone());
                        pose_bone.copy(data_bone);
                        var anim_bone = anim && anim.bones[bone_key];
                        if (anim_bone) {
                            keyframe_index = Keyframe.find(anim_bone.translate_keyframes, time);
                            if (keyframe_index !== -1) {
                                var translate_keyframe0 = anim_bone.translate_keyframes[keyframe_index];
                                var translate_keyframe1 = anim_bone.translate_keyframes[keyframe_index + 1];
                                if (translate_keyframe1) {
                                    var pct = translate_keyframe0.curve.evaluate((time - translate_keyframe0.time) / (translate_keyframe1.time - translate_keyframe0.time));
                                    pose_bone.local_space.position.x += tween(translate_keyframe0.position.x, translate_keyframe1.position.x, pct);
                                    pose_bone.local_space.position.y += tween(translate_keyframe0.position.y, translate_keyframe1.position.y, pct);
                                }
                                else {
                                    pose_bone.local_space.position.x += translate_keyframe0.position.x;
                                    pose_bone.local_space.position.y += translate_keyframe0.position.y;
                                }
                            }
                            keyframe_index = Keyframe.find(anim_bone.rotate_keyframes, time);
                            if (keyframe_index !== -1) {
                                var rotate_keyframe0 = anim_bone.rotate_keyframes[keyframe_index];
                                var rotate_keyframe1 = anim_bone.rotate_keyframes[keyframe_index + 1];
                                if (rotate_keyframe1) {
                                    var pct = rotate_keyframe0.curve.evaluate((time - rotate_keyframe0.time) / (rotate_keyframe1.time - rotate_keyframe0.time));
                                    pose_bone.local_space.rotation.rad += tweenAngle(rotate_keyframe0.rotation.rad, rotate_keyframe1.rotation.rad, pct);
                                }
                                else {
                                    pose_bone.local_space.rotation.rad += rotate_keyframe0.rotation.rad;
                                }
                            }
                            keyframe_index = Keyframe.find(anim_bone.scale_keyframes, time);
                            if (keyframe_index !== -1) {
                                var scale_keyframe0 = anim_bone.scale_keyframes[keyframe_index];
                                var scale_keyframe1 = anim_bone.scale_keyframes[keyframe_index + 1];
                                if (scale_keyframe1) {
                                    var pct = scale_keyframe0.curve.evaluate((time - scale_keyframe0.time) / (scale_keyframe1.time - scale_keyframe0.time));
                                    pose_bone.local_space.scale.x += tween(scale_keyframe0.scale.x, scale_keyframe1.scale.x, pct) - 1;
                                    pose_bone.local_space.scale.y += tween(scale_keyframe0.scale.y, scale_keyframe1.scale.y, pct) - 1;
                                }
                                else {
                                    pose_bone.local_space.scale.x += scale_keyframe0.scale.x - 1;
                                    pose_bone.local_space.scale.y += scale_keyframe0.scale.y - 1;
                                }
                            }
                        }
                    });
                    pose.bone_keys = data.bone_keys;
                    data.ikc_keys.forEach(function (ikc_key) {
                        function clamp(n, lo, hi) { return (n < lo) ? lo : ((n > hi) ? hi : n); }
                        var ikc = data.ikcs[ikc_key];
                        var ikc_mix = ikc.mix;
                        var ikc_bend_positive = ikc.bend_positive;
                        var anim_ikc = anim && anim.ikcs[ikc_key];
                        if (anim_ikc) {
                            keyframe_index = Keyframe.find(anim_ikc.ikc_keyframes, time);
                            if (keyframe_index !== -1) {
                                var ikc_keyframe0 = anim_ikc.ikc_keyframes[keyframe_index];
                                var ikc_keyframe1 = anim_ikc.ikc_keyframes[keyframe_index + 1];
                                if (ikc_keyframe1) {
                                    var pct = ikc_keyframe0.curve.evaluate((time - ikc_keyframe0.time) / (ikc_keyframe1.time - ikc_keyframe0.time));
                                    ikc_mix = tween(ikc_keyframe0.mix, ikc_keyframe1.mix, pct);
                                }
                                else {
                                    ikc_mix = ikc_keyframe0.mix;
                                }
                                ikc_bend_positive = ikc_keyframe0.bend_positive;
                            }
                        }
                        var target = pose.bones[ikc.target_key];
                        Bone.flatten(target, pose.bones);
                        var target_x = target.world_space.position.x;
                        var target_y = target.world_space.position.y;
                        var alpha = ikc_mix;
                        var bend_direction = ikc_bend_positive ? 1 : -1;
                        if (alpha === 0) {
                            return;
                        }
                        switch (ikc.bone_keys.length) {
                            case 1:
                                var bone = pose.bones[ikc.bone_keys[0]];
                                Bone.flatten(bone, pose.bones);
                                var parent_rotation = 0;
                                var bone_parent = pose.bones[bone.parent_key];
                                if (bone_parent && bone.inherit_rotation) {
                                    Bone.flatten(bone_parent, pose.bones);
                                    parent_rotation = bone_parent.world_space.rotation.rad;
                                }
                                target_x -= bone.world_space.position.x;
                                target_y -= bone.world_space.position.y;
                                bone.local_space.rotation.rad = tweenAngle(bone.local_space.rotation.rad, Math.atan2(target_y, target_x) - parent_rotation, alpha);
                                break;
                            case 2:
                                var parent_1 = pose.bones[ikc.bone_keys[0]];
                                Bone.flatten(parent_1, pose.bones);
                                var child = pose.bones[ikc.bone_keys[1]];
                                Bone.flatten(child, pose.bones);
                                var position = new Vector();
                                var parent_parent = pose.bones[parent_1.parent_key];
                                if (parent_parent) {
                                    position.x = target_x;
                                    position.y = target_y;
                                    Bone.flatten(parent_parent, pose.bones);
                                    Space.untransform(parent_parent.world_space, position, position);
                                    target_x = (position.x - parent_1.local_space.position.x) * parent_parent.world_space.scale.x;
                                    target_y = (position.y - parent_1.local_space.position.y) * parent_parent.world_space.scale.y;
                                }
                                else {
                                    target_x -= parent_1.local_space.position.x;
                                    target_y -= parent_1.local_space.position.y;
                                }
                                position.copy(child.local_space.position);
                                var child_parent = pose.bones[child.parent_key];
                                if (child_parent !== parent_1) {
                                    Bone.flatten(child_parent, pose.bones);
                                    Space.transform(child_parent.world_space, position, position);
                                    Space.untransform(parent_1.world_space, position, position);
                                }
                                var child_x = position.x * parent_1.world_space.scale.x;
                                var child_y = position.y * parent_1.world_space.scale.y;
                                var offset = Math.atan2(child_y, child_x);
                                var len1 = Math.sqrt(child_x * child_x + child_y * child_y);
                                var len2 = child.length * child.world_space.scale.x;
                                var cos_denom = 2 * len1 * len2;
                                if (cos_denom < 0.0001) {
                                    child.local_space.rotation.rad = tweenAngle(child.local_space.rotation.rad, Math.atan2(target_y, target_x) - parent_1.local_space.rotation.rad, alpha);
                                    return;
                                }
                                var cos = clamp((target_x * target_x + target_y * target_y - len1 * len1 - len2 * len2) / cos_denom, -1, 1);
                                var rad = Math.acos(cos) * bend_direction;
                                var sin = Math.sin(rad);
                                var adjacent = len2 * cos + len1;
                                var opposite = len2 * sin;
                                var parent_angle = Math.atan2(target_y * adjacent - target_x * opposite, target_x * adjacent + target_y * opposite);
                                parent_1.local_space.rotation.rad = tweenAngle(parent_1.local_space.rotation.rad, (parent_angle - offset), alpha);
                                var child_angle = rad;
                                if (child_parent !== parent_1) {
                                    child_angle += parent_1.world_space.rotation.rad - child_parent.world_space.rotation.rad;
                                }
                                child.local_space.rotation.rad = tweenAngle(child.local_space.rotation.rad, (child_angle + offset), alpha);
                                break;
                        }
                    });
                    pose.iterateBones(function (bone_key, bone) {
                        Bone.flatten(bone, pose.bones);
                    });
                    data.slot_keys.forEach(function (slot_key) {
                        var data_slot = data.slots[slot_key];
                        var pose_slot = pose.slots[slot_key] || (pose.slots[slot_key] = new Slot());
                        pose_slot.copy(data_slot);
                        var anim_slot = anim && anim.slots[slot_key];
                        if (anim_slot) {
                            keyframe_index = Keyframe.find(anim_slot.color_keyframes, time);
                            if (keyframe_index !== -1) {
                                var color_keyframe0 = anim_slot.color_keyframes[keyframe_index];
                                var color_keyframe1 = anim_slot.color_keyframes[keyframe_index + 1];
                                if (color_keyframe1) {
                                    var pct = color_keyframe0.curve.evaluate((time - color_keyframe0.time) / (color_keyframe1.time - color_keyframe0.time));
                                    pose_slot.color.r = tween(color_keyframe0.color.r, color_keyframe1.color.r, pct);
                                    pose_slot.color.g = tween(color_keyframe0.color.g, color_keyframe1.color.g, pct);
                                    pose_slot.color.b = tween(color_keyframe0.color.b, color_keyframe1.color.b, pct);
                                    pose_slot.color.a = tween(color_keyframe0.color.a, color_keyframe1.color.a, pct);
                                }
                                else {
                                    pose_slot.color.r = color_keyframe0.color.r;
                                    pose_slot.color.g = color_keyframe0.color.g;
                                    pose_slot.color.b = color_keyframe0.color.b;
                                    pose_slot.color.a = color_keyframe0.color.a;
                                }
                            }
                            keyframe_index = Keyframe.find(anim_slot.attachment_keyframes, time);
                            if (keyframe_index !== -1) {
                                var attachment_keyframe0 = anim_slot.attachment_keyframes[keyframe_index];
                                pose_slot.attachment_key = attachment_keyframe0.name;
                            }
                        }
                    });
                    pose.slot_keys = data.slot_keys;
                    if (anim) {
                        keyframe_index = Keyframe.find(anim.order_keyframes, time);
                        if (keyframe_index !== -1) {
                            var order_keyframe = anim.order_keyframes[keyframe_index];
                            pose.slot_keys = data.slot_keys.slice(0);
                            order_keyframe.slot_offsets.forEach(function (slot_offset) {
                                var slot_index = pose.slot_keys.indexOf(slot_offset.slot_key);
                                if (slot_index !== -1) {
                                    pose.slot_keys.splice(slot_index, 1);
                                    pose.slot_keys.splice(slot_index + slot_offset.offset, 0, slot_offset.slot_key);
                                }
                            });
                        }
                    }
                    pose.events.length = 0;
                    if (anim && anim.event_keyframes) {
                        var add_event_1 = function (event_keyframe) {
                            var pose_event = new Event();
                            var data_event = data.events[event_keyframe.name];
                            if (data_event) {
                                pose_event.copy(data_event);
                            }
                            pose_event.int_value = event_keyframe.int_value || pose_event.int_value;
                            pose_event.float_value = event_keyframe.float_value || pose_event.float_value;
                            pose_event.string_value = event_keyframe.string_value || pose_event.string_value;
                            pose.events.push(pose_event);
                        };
                        if (elapsed_time < 0) {
                            if (wrapped_min) {
                                anim.event_keyframes.forEach(function (event_keyframe) {
                                    if (((anim.min_time <= event_keyframe.time) && (event_keyframe.time < prev_time)) ||
                                        ((time <= event_keyframe.time) && (event_keyframe.time <= anim.max_time))) {
                                        add_event_1(event_keyframe);
                                    }
                                });
                            }
                            else {
                                anim.event_keyframes.forEach(function (event_keyframe) {
                                    if ((time <= event_keyframe.time) && (event_keyframe.time < prev_time)) {
                                        add_event_1(event_keyframe);
                                    }
                                });
                            }
                        }
                        else {
                            if (wrapped_max) {
                                anim.event_keyframes.forEach(function (event_keyframe) {
                                    if (((anim.min_time <= event_keyframe.time) && (event_keyframe.time <= time)) ||
                                        ((prev_time < event_keyframe.time) && (event_keyframe.time <= anim.max_time))) {
                                        add_event_1(event_keyframe);
                                    }
                                });
                            }
                            else {
                                anim.event_keyframes.forEach(function (event_keyframe) {
                                    if ((prev_time < event_keyframe.time) && (event_keyframe.time <= time)) {
                                        add_event_1(event_keyframe);
                                    }
                                });
                            }
                        }
                    }
                };
                Pose.prototype.iterateBones = function (callback) {
                    var pose = this;
                    pose.bone_keys.forEach(function (bone_key) {
                        var bone = pose.bones[bone_key];
                        callback(bone_key, bone);
                    });
                };
                Pose.prototype.iterateAttachments = function (callback) {
                    var pose = this;
                    var data = pose.data;
                    var skin = data && data.skins[pose.skin_key];
                    var default_skin = data && data.skins["default"];
                    pose.slot_keys.forEach(function (slot_key) {
                        var pose_slot = pose.slots[slot_key];
                        var skin_slot = skin && (skin.slots[slot_key] || default_skin.slots[slot_key]);
                        var attachment = skin_slot && skin_slot.attachments[pose_slot.attachment_key];
                        var attachment_key = (attachment && (attachment.path || attachment.name)) || pose_slot.attachment_key;
                        callback(slot_key, pose_slot, skin_slot, attachment_key, attachment);
                    });
                };
                return Pose;
            }());
            exports_3("Pose", Pose);
        }
    }
});
System.register("dijon/spine/atlas", [], function(exports_4, context_4) {
    "use strict";
    var __moduleName = context_4 && context_4.id;
    var Page, Site, Data;
    function trim(s) {
        return s.replace(/^\s+|\s+$/g, '');
    }
    return {
        setters:[],
        execute: function() {
            Page = (function () {
                function Page() {
                    this.name = "";
                    this.w = 0;
                    this.h = 0;
                    this.format = 'RGBA8888';
                    this.min_filter = 'linear';
                    this.mag_filter = 'linear';
                    this.wrap_s = 'clamp-to-edge';
                    this.wrap_t = 'clamp-to-edge';
                }
                return Page;
            }());
            exports_4("Page", Page);
            Site = (function () {
                function Site() {
                    this.page = null;
                    this.x = 0;
                    this.y = 0;
                    this.w = 0;
                    this.h = 0;
                    this.rotate = 0;
                    this.offset_x = 0;
                    this.offset_y = 0;
                    this.original_w = 0;
                    this.original_h = 0;
                    this.index = -1;
                }
                return Site;
            }());
            exports_4("Site", Site);
            Data = (function () {
                function Data() {
                    this.pages = [];
                    this.sites = {};
                }
                Data.prototype.drop = function () {
                    var data = this;
                    data.pages = [];
                    data.sites = {};
                    return this;
                };
                Data.prototype.import = function (text) {
                    return this.importAtlasText(text);
                };
                Data.prototype.export = function (text) {
                    if (text === void 0) { text = ""; }
                    return this.exportAtlasText(text);
                };
                Data.prototype.importAtlasText = function (text) {
                    var lines = text.split(/\n|\r\n/);
                    return this.importAtlasTextLines(lines);
                };
                Data.prototype.exportAtlasText = function (text) {
                    if (text === void 0) { text = ""; }
                    var lines = this.exportAtlasTextLines([]);
                    return text + lines.join('\n');
                };
                Data.prototype.importAtlasTextLines = function (lines) {
                    var data = this;
                    data.pages = [];
                    data.sites = {};
                    var page = null;
                    var site = null;
                    var match = null;
                    lines.forEach(function (line) {
                        if (trim(line).length === 0) {
                            page = null;
                            site = null;
                        }
                        else if ((match = line.match(/^size: (.*),(.*)$/))) {
                            page.w = parseInt(match[1], 10);
                            page.h = parseInt(match[2], 10);
                        }
                        else if ((match = line.match(/^format: (.*)$/))) {
                            page.format = match[1];
                        }
                        else if ((match = line.match(/^filter: (.*),(.*)$/))) {
                            page.min_filter = match[1];
                            page.mag_filter = match[2];
                        }
                        else if ((match = line.match(/^repeat: (.*)$/))) {
                            var repeat = match[1];
                            page.wrap_s = ((repeat === 'x') || (repeat === 'xy')) ? ('Repeat') : ('ClampToEdge');
                            page.wrap_t = ((repeat === 'y') || (repeat === 'xy')) ? ('Repeat') : ('ClampToEdge');
                        }
                        else if ((match = line.match(/^orig: (.*)[,| x] (.*)$/))) {
                            var original_w = parseInt(match[1], 10);
                            var original_h = parseInt(match[2], 10);
                            console.log('page:orig', original_w, original_h);
                        }
                        else if (page === null) {
                            page = new Page();
                            page.name = line;
                            data.pages.push(page);
                        }
                        else {
                            if ((match = line.match(/^ {2}rotate: (.*)$/))) {
                                site.rotate = (match[1] === 'true') ? -1 : 0;
                            }
                            else if ((match = line.match(/^ {2}xy: (.*), (.*)$/))) {
                                site.x = parseInt(match[1], 10);
                                site.y = parseInt(match[2], 10);
                            }
                            else if ((match = line.match(/^ {2}size: (.*), (.*)$/))) {
                                site.w = parseInt(match[1], 10);
                                site.h = parseInt(match[2], 10);
                            }
                            else if ((match = line.match(/^ {2}orig: (.*), (.*)$/))) {
                                site.original_w = parseInt(match[1], 10);
                                site.original_h = parseInt(match[2], 10);
                            }
                            else if ((match = line.match(/^ {2}offset: (.*), (.*)$/))) {
                                site.offset_x = parseInt(match[1], 10);
                                site.offset_y = parseInt(match[2], 10);
                            }
                            else if ((match = line.match(/^ {2}index: (.*)$/))) {
                                site.index = parseInt(match[1], 10);
                            }
                            else {
                                if (site) {
                                    site.original_w = site.original_w || site.w;
                                    site.original_h = site.original_h || site.h;
                                }
                                site = new Site();
                                site.page = page;
                                data.sites[line] = site;
                            }
                        }
                    });
                    return data;
                };
                Data.prototype.exportAtlasTextLines = function (lines) {
                    if (lines === void 0) { lines = []; }
                    var data = this;
                    data.pages.forEach(function (page) {
                        lines.push("");
                        lines.push(page.name);
                        lines.push("size: " + page.w + "," + page.h);
                        lines.push("format: " + page.format);
                        lines.push("filter: " + page.min_filter + "," + page.mag_filter);
                        var repeat = 'none';
                        if ((page.wrap_s === 'Repeat') && (page.wrap_t === 'Repeat')) {
                            repeat = "xy";
                        }
                        else if (page.wrap_s === 'Repeat') {
                            repeat = 'x';
                        }
                        else if (page.wrap_t === 'Repeat') {
                            repeat = 'y';
                        }
                        lines.push("repeat: " + repeat);
                        Object.keys(data.sites).forEach(function (site_key) {
                            var site = data.sites[site_key];
                            if (site.page !== page) {
                                return;
                            }
                            lines.push(site_key);
                            lines.push("  rotate: " + (site.rotate === 0 ? "false" : "true"));
                            lines.push("  xy: " + site.x + ", " + site.y);
                            lines.push("  size: " + site.w + ", " + site.h);
                            lines.push("  orig: " + site.original_w + ", " + site.original_h);
                            lines.push("  offset: " + site.offset_x + ", " + site.offset_y);
                            lines.push("  index: " + site.index);
                        });
                    });
                    return lines;
                };
                Data.prototype.importTpsText = function (tps_text) {
                    var data = this;
                    data.pages = [];
                    data.sites = {};
                    return data.importTpsTextPage(tps_text, 0);
                };
                Data.prototype.importTpsTextPage = function (tps_text, page_index) {
                    if (page_index === void 0) { page_index = 0; }
                    var data = this;
                    var tps_json = JSON.parse(tps_text);
                    var page = data.pages[page_index] = new Page();
                    if (tps_json.meta) {
                        page.w = tps_json.meta.size.w;
                        page.h = tps_json.meta.size.h;
                        page.name = tps_json.meta.image;
                    }
                    Object.keys(tps_json.frames || {}).forEach(function (key) {
                        var frame = tps_json.frames[key];
                        var site = data.sites[key] = new Site();
                        site.page = page;
                        site.x = frame.frame.x;
                        site.y = frame.frame.y;
                        site.w = frame.frame.w;
                        site.h = frame.frame.h;
                        site.rotate = frame.rotated ? 1 : 0;
                        site.offset_x = (frame.spriteSourceSize && frame.spriteSourceSize.x) || 0;
                        site.offset_y = (frame.spriteSourceSize && frame.spriteSourceSize.y) || 0;
                        site.original_w = (frame.sourceSize && frame.sourceSize.w) || site.w;
                        site.original_h = (frame.sourceSize && frame.sourceSize.h) || site.h;
                    });
                    return data;
                };
                return Data;
            }());
            exports_4("Data", Data);
        }
    }
});
System.register("dijon/spine/render-webgl", ["dijon/spine/spine"], function(exports_5, context_5) {
    "use strict";
    var __moduleName = context_5 && context_5.id;
    var spine;
    var glShader, glVertex, BoneInfo, SkinInfo, SlotInfo, AttachmentInfo, RegionAttachmentInfo, BoundingBoxAttachmentInfo, MeshAttachmentInfo, SkinnedMeshAttachmentInfo, RenderWebGL;
    function repeat(format, count) {
        var array = [];
        for (var index = 0; index < count; ++index) {
            array.push(format.replace(/{index}/g, index.toString()));
        }
        return array;
    }
    exports_5("repeat", repeat);
    function flatten(array, out) {
        if (out === void 0) { out = []; }
        array.forEach(function (value) {
            if (Array.isArray(value)) {
                flatten(value, out);
            }
            else {
                out.push(value);
            }
        });
        return out;
    }
    exports_5("flatten", flatten);
    function vec4Identity(v) {
        v[0] = v[1] = v[2] = v[3] = 1.0;
        return v;
    }
    exports_5("vec4Identity", vec4Identity);
    function vec4CopyColor(v, color) {
        v[0] = color.r;
        v[1] = color.g;
        v[2] = color.b;
        v[3] = color.a;
        return v;
    }
    exports_5("vec4CopyColor", vec4CopyColor);
    function vec4ApplyColor(v, color) {
        v[0] *= color.r;
        v[1] *= color.g;
        v[2] *= color.b;
        v[3] *= color.a;
        return v;
    }
    exports_5("vec4ApplyColor", vec4ApplyColor);
    function mat3x3Identity(m) {
        m[1] = m[2] = m[3] =
            m[5] = m[6] = m[7] = 0.0;
        m[0] = m[4] = m[8] = 1.0;
        return m;
    }
    exports_5("mat3x3Identity", mat3x3Identity);
    function mat3x3Copy(m, other) {
        m.set(other);
        return m;
    }
    exports_5("mat3x3Copy", mat3x3Copy);
    function mat3x3Ortho(m, l, r, b, t) {
        var lr = 1 / (l - r);
        var bt = 1 / (b - t);
        m[0] *= -2 * lr;
        m[4] *= -2 * bt;
        m[6] += (l + r) * lr;
        m[7] += (t + b) * bt;
        return m;
    }
    exports_5("mat3x3Ortho", mat3x3Ortho);
    function mat3x3Translate(m, x, y) {
        m[6] += m[0] * x + m[3] * y;
        m[7] += m[1] * x + m[4] * y;
        return m;
    }
    exports_5("mat3x3Translate", mat3x3Translate);
    function mat3x3RotateCosSin(m, c, s) {
        var m0 = m[0];
        var m1 = m[1];
        var m3 = m[3];
        var m4 = m[4];
        m[0] = m0 * c + m3 * s;
        m[1] = m1 * c + m4 * s;
        m[3] = m3 * c - m0 * s;
        m[4] = m4 * c - m1 * s;
        return m;
    }
    exports_5("mat3x3RotateCosSin", mat3x3RotateCosSin);
    function mat3x3Rotate(m, angle) {
        return mat3x3RotateCosSin(m, Math.cos(angle), Math.sin(angle));
    }
    exports_5("mat3x3Rotate", mat3x3Rotate);
    function mat3x3Scale(m, x, y) {
        m[0] *= x;
        m[1] *= x;
        m[2] *= x;
        m[3] *= y;
        m[4] *= y;
        m[5] *= y;
        return m;
    }
    exports_5("mat3x3Scale", mat3x3Scale);
    function mat3x3Transform(m, v, out) {
        var x = m[0] * v[0] + m[3] * v[1] + m[6];
        var y = m[1] * v[0] + m[4] * v[1] + m[7];
        var w = m[2] * v[0] + m[5] * v[1] + m[8];
        var iw = (w) ? (1 / w) : (1);
        out[0] = x * iw;
        out[1] = y * iw;
        return out;
    }
    exports_5("mat3x3Transform", mat3x3Transform);
    function mat3x3ApplySpace(m, space) {
        if (space) {
            mat3x3Translate(m, space.position.x, space.position.y);
            mat3x3Rotate(m, space.rotation.rad);
            mat3x3Scale(m, space.scale.x, space.scale.y);
        }
        return m;
    }
    exports_5("mat3x3ApplySpace", mat3x3ApplySpace);
    function mat3x3ApplyAtlasPageTexcoord(m, page) {
        if (page) {
            mat3x3Scale(m, 1 / page.w, 1 / page.h);
        }
        return m;
    }
    exports_5("mat3x3ApplyAtlasPageTexcoord", mat3x3ApplyAtlasPageTexcoord);
    function mat3x3ApplyAtlasSiteTexcoord(m, site) {
        if (site) {
            mat3x3Translate(m, site.x, site.y);
            if (site.rotate === -1) {
                mat3x3Translate(m, 0, site.w);
                mat3x3RotateCosSin(m, 0, -1);
            }
            else if (site.rotate === 1) {
                mat3x3Translate(m, site.h, 0);
                mat3x3RotateCosSin(m, 0, 1);
            }
            mat3x3Scale(m, site.w, site.h);
        }
        return m;
    }
    exports_5("mat3x3ApplyAtlasSiteTexcoord", mat3x3ApplyAtlasSiteTexcoord);
    function mat3x3ApplyAtlasSitePosition(m, site) {
        if (site) {
            mat3x3Scale(m, 1 / site.original_w, 1 / site.original_h);
            mat3x3Translate(m, 2 * site.offset_x - (site.original_w - site.w), (site.original_h - site.h) - 2 * site.offset_y);
            mat3x3Scale(m, site.w, site.h);
        }
        return m;
    }
    exports_5("mat3x3ApplyAtlasSitePosition", mat3x3ApplyAtlasSitePosition);
    function mat4x4Identity(m) {
        m[1] = m[2] = m[3] = m[4] =
            m[6] = m[7] = m[8] = m[9] =
                m[11] = m[12] = m[13] = m[14] = 0.0;
        m[0] = m[5] = m[10] = m[15] = 1.0;
        return m;
    }
    exports_5("mat4x4Identity", mat4x4Identity);
    function mat4x4Copy(m, other) {
        m.set(other);
        return m;
    }
    exports_5("mat4x4Copy", mat4x4Copy);
    function mat4x4Ortho(m, l, r, b, t, n, f) {
        var lr = 1 / (l - r);
        var bt = 1 / (b - t);
        var nf = 1 / (n - f);
        m[0] = -2 * lr;
        m[5] = -2 * bt;
        m[10] = 2 * nf;
        m[12] = (l + r) * lr;
        m[13] = (t + b) * bt;
        m[14] = (f + n) * nf;
        return m;
    }
    exports_5("mat4x4Ortho", mat4x4Ortho);
    function mat4x4Translate(m, x, y, z) {
        if (z === void 0) { z = 0; }
        m[12] += m[0] * x + m[4] * y + m[8] * z;
        m[13] += m[1] * x + m[5] * y + m[9] * z;
        m[14] += m[2] * x + m[6] * y + m[10] * z;
        m[15] += m[3] * x + m[7] * y + m[11] * z;
        return m;
    }
    exports_5("mat4x4Translate", mat4x4Translate);
    function mat4x4RotateCosSinZ(m, c, s) {
        var a_x = m[0];
        var a_y = m[1];
        var a_z = m[2];
        var a_w = m[3];
        var b_x = m[4];
        var b_y = m[5];
        var b_z = m[6];
        var b_w = m[7];
        m[0] = a_x * c + b_x * s;
        m[1] = a_y * c + b_y * s;
        m[2] = a_z * c + b_z * s;
        m[3] = a_w * c + b_w * s;
        m[4] = b_x * c - a_x * s;
        m[5] = b_y * c - a_y * s;
        m[6] = b_z * c - a_z * s;
        m[7] = b_w * c - a_w * s;
        return m;
    }
    exports_5("mat4x4RotateCosSinZ", mat4x4RotateCosSinZ);
    function mat4x4RotateZ(m, angle) {
        return mat4x4RotateCosSinZ(m, Math.cos(angle), Math.sin(angle));
    }
    exports_5("mat4x4RotateZ", mat4x4RotateZ);
    function mat4x4Scale(m, x, y, z) {
        if (z === void 0) { z = 1; }
        m[0] *= x;
        m[1] *= x;
        m[2] *= x;
        m[3] *= x;
        m[4] *= y;
        m[5] *= y;
        m[6] *= y;
        m[7] *= y;
        m[8] *= z;
        m[9] *= z;
        m[10] *= z;
        m[11] *= z;
        return m;
    }
    exports_5("mat4x4Scale", mat4x4Scale);
    function glCompileShader(gl, src, type) {
        src = flatten(src);
        var shader = gl.createShader(type);
        gl.shaderSource(shader, src.join('\n'));
        gl.compileShader(shader);
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            src.forEach(function (line, index) { console.log(index + 1, line); });
            console.log(gl.getShaderInfoLog(shader));
            gl.deleteShader(shader);
            shader = null;
        }
        return shader;
    }
    exports_5("glCompileShader", glCompileShader);
    function glLinkProgram(gl, vs, fs) {
        var program = gl.createProgram();
        gl.attachShader(program, vs);
        gl.attachShader(program, fs);
        gl.linkProgram(program);
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            console.log("could not link shader program");
            gl.detachShader(program, vs);
            gl.detachShader(program, fs);
            gl.deleteProgram(program);
            program = null;
        }
        return program;
    }
    exports_5("glLinkProgram", glLinkProgram);
    function glGetUniforms(gl, program, uniforms) {
        var count = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
        for (var index = 0; index < count; ++index) {
            var uniform = gl.getActiveUniform(program, index);
            uniforms[uniform.name] = gl.getUniformLocation(program, uniform.name);
        }
        return uniforms;
    }
    exports_5("glGetUniforms", glGetUniforms);
    function glGetAttribs(gl, program, attribs) {
        var count = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
        for (var index = 0; index < count; ++index) {
            var attrib = gl.getActiveAttrib(program, index);
            attribs[attrib.name] = gl.getAttribLocation(program, attrib.name);
        }
        return attribs;
    }
    exports_5("glGetAttribs", glGetAttribs);
    function glMakeShader(gl, vs_src, fs_src) {
        var shader = new glShader();
        shader.vs_src = vs_src;
        shader.fs_src = fs_src;
        shader.vs = glCompileShader(gl, shader.vs_src, gl.VERTEX_SHADER);
        shader.fs = glCompileShader(gl, shader.fs_src, gl.FRAGMENT_SHADER);
        shader.program = glLinkProgram(gl, shader.vs, shader.fs);
        shader.uniforms = glGetUniforms(gl, shader.program, {});
        shader.attribs = glGetAttribs(gl, shader.program, {});
        return shader;
    }
    exports_5("glMakeShader", glMakeShader);
    function glMakeVertex(gl, type_array, size, buffer_type, buffer_draw) {
        var vertex = new glVertex();
        if (type_array instanceof Float32Array) {
            vertex.type = gl.FLOAT;
        }
        else if (type_array instanceof Int8Array) {
            vertex.type = gl.BYTE;
        }
        else if (type_array instanceof Uint8Array) {
            vertex.type = gl.UNSIGNED_BYTE;
        }
        else if (type_array instanceof Int16Array) {
            vertex.type = gl.SHORT;
        }
        else if (type_array instanceof Uint16Array) {
            vertex.type = gl.UNSIGNED_SHORT;
        }
        else if (type_array instanceof Int32Array) {
            vertex.type = gl.INT;
        }
        else if (type_array instanceof Uint32Array) {
            vertex.type = gl.UNSIGNED_INT;
        }
        else {
            vertex.type = gl.NONE;
            throw new Error();
        }
        vertex.size = size;
        vertex.count = type_array.length / vertex.size;
        vertex.type_array = type_array;
        vertex.buffer = gl.createBuffer();
        vertex.buffer_type = buffer_type;
        vertex.buffer_draw = buffer_draw;
        gl.bindBuffer(vertex.buffer_type, vertex.buffer);
        gl.bufferData(vertex.buffer_type, vertex.type_array, vertex.buffer_draw);
        return vertex;
    }
    exports_5("glMakeVertex", glMakeVertex);
    function glSetupAttribute(gl, shader, format, vertex, count) {
        if (count === void 0) { count = 0; }
        gl.bindBuffer(vertex.buffer_type, vertex.buffer);
        if (count > 0) {
            var sizeof_vertex = vertex.type_array.BYTES_PER_ELEMENT * vertex.size;
            var stride = sizeof_vertex * count;
            for (var index = 0; index < count; ++index) {
                var offset = sizeof_vertex * index;
                var attrib = shader.attribs[format.replace(/{index}/g, index.toString())];
                gl.vertexAttribPointer(attrib, vertex.size, vertex.type, false, stride, offset);
                gl.enableVertexAttribArray(attrib);
            }
        }
        else {
            var attrib = shader.attribs[format];
            gl.vertexAttribPointer(attrib, vertex.size, vertex.type, false, 0, 0);
            gl.enableVertexAttribArray(attrib);
        }
    }
    exports_5("glSetupAttribute", glSetupAttribute);
    function glResetAttribute(gl, shader, format, vertex, count) {
        if (count === void 0) { count = 0; }
        if (count > 0) {
            for (var index = 0; index < count; ++index) {
                var attrib = shader.attribs[format.replace(/{index}/g, index.toString())];
                gl.disableVertexAttribArray(attrib);
            }
        }
        else {
            var attrib = shader.attribs[format];
            gl.disableVertexAttribArray(attrib);
        }
    }
    exports_5("glResetAttribute", glResetAttribute);
    return {
        setters:[
            function (spine_1) {
                spine = spine_1;
            }],
        execute: function() {
            glShader = (function () {
                function glShader() {
                }
                return glShader;
            }());
            exports_5("glShader", glShader);
            glVertex = (function () {
                function glVertex() {
                }
                return glVertex;
            }());
            exports_5("glVertex", glVertex);
            BoneInfo = (function () {
                function BoneInfo() {
                }
                return BoneInfo;
            }());
            exports_5("BoneInfo", BoneInfo);
            SkinInfo = (function () {
                function SkinInfo() {
                    this.slot_info_map = {};
                }
                return SkinInfo;
            }());
            exports_5("SkinInfo", SkinInfo);
            SlotInfo = (function () {
                function SlotInfo() {
                    this.attachment_info_map = {};
                }
                return SlotInfo;
            }());
            exports_5("SlotInfo", SlotInfo);
            AttachmentInfo = (function () {
                function AttachmentInfo(type) {
                    this.type = type;
                }
                return AttachmentInfo;
            }());
            exports_5("AttachmentInfo", AttachmentInfo);
            RegionAttachmentInfo = (function (_super) {
                __extends(RegionAttachmentInfo, _super);
                function RegionAttachmentInfo() {
                    _super.call(this, 'region');
                }
                return RegionAttachmentInfo;
            }(AttachmentInfo));
            exports_5("RegionAttachmentInfo", RegionAttachmentInfo);
            BoundingBoxAttachmentInfo = (function (_super) {
                __extends(BoundingBoxAttachmentInfo, _super);
                function BoundingBoxAttachmentInfo() {
                    _super.call(this, 'boundingbox');
                }
                return BoundingBoxAttachmentInfo;
            }(AttachmentInfo));
            exports_5("BoundingBoxAttachmentInfo", BoundingBoxAttachmentInfo);
            MeshAttachmentInfo = (function (_super) {
                __extends(MeshAttachmentInfo, _super);
                function MeshAttachmentInfo() {
                    _super.call(this, 'mesh');
                }
                return MeshAttachmentInfo;
            }(AttachmentInfo));
            exports_5("MeshAttachmentInfo", MeshAttachmentInfo);
            SkinnedMeshAttachmentInfo = (function (_super) {
                __extends(SkinnedMeshAttachmentInfo, _super);
                function SkinnedMeshAttachmentInfo() {
                    _super.call(this, 'skinnedmesh');
                }
                return SkinnedMeshAttachmentInfo;
            }(AttachmentInfo));
            exports_5("SkinnedMeshAttachmentInfo", SkinnedMeshAttachmentInfo);
            RenderWebGL = (function () {
                function RenderWebGL(gl) {
                    this.bone_info_map = {};
                    this.skin_info_map = {};
                    this.gl_textures = {};
                    this.gl_projection = mat4x4Identity(new Float32Array(16));
                    this.gl_modelview = mat3x3Identity(new Float32Array(9));
                    this.gl_tex_matrix = mat3x3Identity(new Float32Array(9));
                    this.gl_color = vec4Identity(new Float32Array(4));
                    var render = this;
                    render.gl = gl;
                    if (!gl) {
                        return;
                    }
                    var gl_mesh_shader_vs_src = [
                        "precision mediump int;",
                        "precision mediump float;",
                        "uniform mat4 uProjection;",
                        "uniform mat3 uModelview;",
                        "uniform mat3 uTexMatrix;",
                        "attribute vec2 aVertexPosition;",
                        "attribute vec2 aVertexTexCoord;",
                        "varying vec3 vTexCoord;",
                        "void main(void) {",
                        " vTexCoord = uTexMatrix * vec3(aVertexTexCoord, 1.0);",
                        " gl_Position = uProjection * vec4(uModelview * vec3(aVertexPosition, 1.0), 1.0);",
                        "}"
                    ];
                    var gl_ffd_mesh_shader_vs_src = [
                        "precision mediump int;",
                        "precision mediump float;",
                        "uniform mat4 uProjection;",
                        "uniform mat3 uModelview;",
                        "uniform mat3 uTexMatrix;",
                        "uniform float uMorphWeight;",
                        "attribute vec2 aVertexPosition;",
                        "attribute vec2 aVertexTexCoord;",
                        "attribute vec2 aVertexMorph0Position;",
                        "attribute vec2 aVertexMorph1Position;",
                        "varying vec3 vTexCoord;",
                        "void main(void) {",
                        " vTexCoord = uTexMatrix * vec3(aVertexTexCoord, 1.0);",
                        " gl_Position = uProjection * vec4(uModelview * vec3(aVertexPosition + mix(aVertexMorph0Position, aVertexMorph1Position, uMorphWeight), 1.0), 1.0);",
                        "}"
                    ];
                    var gl_mesh_shader_fs_src = [
                        "precision mediump int;",
                        "precision mediump float;",
                        "uniform sampler2D uSampler;",
                        "uniform vec4 uColor;",
                        "varying vec3 vTexCoord;",
                        "void main(void) {",
                        " gl_FragColor = uColor * texture2D(uSampler, vTexCoord.st);",
                        "}"
                    ];
                    render.gl_mesh_shader = glMakeShader(gl, gl_mesh_shader_vs_src, gl_mesh_shader_fs_src);
                    render.gl_ffd_mesh_shader = glMakeShader(gl, gl_ffd_mesh_shader_vs_src, gl_mesh_shader_fs_src);
                    render.gl_region_vertex_position = glMakeVertex(gl, new Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]), 2, gl.ARRAY_BUFFER, gl.STATIC_DRAW);
                    render.gl_region_vertex_texcoord = glMakeVertex(gl, new Float32Array([0, 1, 1, 1, 1, 0, 0, 0]), 2, gl.ARRAY_BUFFER, gl.STATIC_DRAW);
                    render.gl_skin_shader_modelview_count = 16;
                    render.gl_skin_shader_modelview_array = new Float32Array(9 * render.gl_skin_shader_modelview_count);
                    render.gl_skin_shader_blenders_count = 8;
                    var gl_skin_shader_vs_src = [
                        "precision mediump int;",
                        "precision mediump float;",
                        "uniform mat4 uProjection;",
                        "uniform mat3 uModelviewArray[" + render.gl_skin_shader_modelview_count + "];",
                        "uniform mat3 uTexMatrix;",
                        "attribute vec2 aVertexPosition;",
                        repeat("attribute vec2 aVertexBlenders{index};", render.gl_skin_shader_blenders_count),
                        "attribute vec2 aVertexTexCoord;",
                        "varying vec3 vTexCoord;",
                        "void main(void) {",
                        " vTexCoord = uTexMatrix * vec3(aVertexTexCoord, 1.0);",
                        " vec3 position = vec3(aVertexPosition, 1.0);",
                        " vec3 blendPosition = vec3(0.0);",
                        repeat(" blendPosition += (uModelviewArray[int(aVertexBlenders{index}.x)] * position) * aVertexBlenders{index}.y;", render.gl_skin_shader_blenders_count),
                        " gl_Position = uProjection * vec4(blendPosition, 1.0);",
                        "}"
                    ];
                    var gl_ffd_skin_shader_vs_src = [
                        "precision mediump int;",
                        "precision mediump float;",
                        "uniform mat4 uProjection;",
                        "uniform mat3 uModelviewArray[" + render.gl_skin_shader_modelview_count + "];",
                        "uniform mat3 uTexMatrix;",
                        "uniform float uMorphWeight;",
                        "attribute vec2 aVertexPosition;",
                        repeat("attribute vec2 aVertexBlenders{index};", render.gl_skin_shader_blenders_count),
                        "attribute vec2 aVertexTexCoord;",
                        "attribute vec2 aVertexMorph0Position;",
                        "attribute vec2 aVertexMorph1Position;",
                        "varying vec3 vTexCoord;",
                        "void main(void) {",
                        " vTexCoord = uTexMatrix * vec3(aVertexTexCoord, 1.0);",
                        " vec3 position = vec3(aVertexPosition + mix(aVertexMorph0Position, aVertexMorph1Position, uMorphWeight), 1.0);",
                        " vec3 blendPosition = vec3(0.0);",
                        repeat(" blendPosition += (uModelviewArray[int(aVertexBlenders{index}.x)] * position) * aVertexBlenders{index}.y;", render.gl_skin_shader_blenders_count),
                        " gl_Position = uProjection * vec4(blendPosition, 1.0);",
                        "}"
                    ];
                    var gl_skin_shader_fs_src = [
                        "precision mediump int;",
                        "precision mediump float;",
                        "uniform sampler2D uSampler;",
                        "uniform vec4 uColor;",
                        "varying vec3 vTexCoord;",
                        "void main(void) {",
                        " gl_FragColor = uColor * texture2D(uSampler, vTexCoord.st);",
                        "}"
                    ];
                    render.gl_skin_shader = glMakeShader(gl, gl_skin_shader_vs_src, gl_skin_shader_fs_src);
                    render.gl_ffd_skin_shader = glMakeShader(gl, gl_ffd_skin_shader_vs_src, gl_skin_shader_fs_src);
                }
                RenderWebGL.prototype.dropData = function (spine_data, atlas_data) {
                    var render = this;
                    var gl = render.gl;
                    if (!gl) {
                        return;
                    }
                    Object.keys(render.gl_textures).forEach(function (image_key) {
                        var gl_texture = render.gl_textures[image_key];
                        gl.deleteTexture(gl_texture);
                        delete render.gl_textures[image_key];
                    });
                    render.gl_textures = {};
                    Object.keys(render.bone_info_map).forEach(function (bone_key) {
                        var bone_info = render.bone_info_map[bone_key];
                    });
                    render.bone_info_map = {};
                    Object.keys(render.skin_info_map).forEach(function (skin_key) {
                        var skin_info = render.skin_info_map[skin_key];
                        Object.keys(skin_info.slot_info_map).forEach(function (slot_key) {
                            var slot_info = skin_info.slot_info_map[slot_key];
                            Object.keys(slot_info.attachment_info_map).forEach(function (attachment_key) {
                                var attachment_info = slot_info.attachment_info_map[attachment_key];
                                switch (attachment_info.type) {
                                    case 'mesh': {
                                        var mesh_attachment_info_1 = attachment_info;
                                        gl.deleteBuffer(mesh_attachment_info_1.gl_vertex_position.buffer);
                                        gl.deleteBuffer(mesh_attachment_info_1.gl_vertex_texcoord.buffer);
                                        gl.deleteBuffer(mesh_attachment_info_1.gl_vertex_triangle.buffer);
                                        Object.keys(mesh_attachment_info_1.anim_ffd_attachments).forEach(function (anim_key) {
                                            var anim_ffd_attachment = mesh_attachment_info_1.anim_ffd_attachments[anim_key];
                                            anim_ffd_attachment.ffd_keyframes.forEach(function (ffd_keyframe) {
                                                gl.deleteBuffer(ffd_keyframe.gl_vertex.buffer);
                                            });
                                        });
                                        break;
                                    }
                                    case 'skinnedmesh': {
                                        var skinned_mesh_attachment_info_1 = attachment_info;
                                        gl.deleteBuffer(skinned_mesh_attachment_info_1.gl_vertex_position.buffer);
                                        gl.deleteBuffer(skinned_mesh_attachment_info_1.gl_vertex_blenders.buffer);
                                        gl.deleteBuffer(skinned_mesh_attachment_info_1.gl_vertex_texcoord.buffer);
                                        gl.deleteBuffer(skinned_mesh_attachment_info_1.gl_vertex_triangle.buffer);
                                        Object.keys(skinned_mesh_attachment_info_1.anim_ffd_attachments).forEach(function (anim_key) {
                                            var anim_ffd_attachment = skinned_mesh_attachment_info_1.anim_ffd_attachments[anim_key];
                                            anim_ffd_attachment.ffd_keyframes.forEach(function (ffd_keyframe) {
                                                gl.deleteBuffer(ffd_keyframe.gl_vertex.buffer);
                                            });
                                        });
                                        break;
                                    }
                                    default:
                                        console.log("TODO", skin_key, slot_key, attachment_key, attachment_info.type);
                                        break;
                                }
                            });
                        });
                    });
                    render.skin_info_map = {};
                };
                ;
                RenderWebGL.prototype.loadData = function (spine_data, atlas_data, images) {
                    var render = this;
                    var gl = render.gl;
                    if (!gl) {
                        return;
                    }
                    spine_data.iterateBones(function (bone_key, bone) {
                        var bone_info = render.bone_info_map[bone_key] = new BoneInfo();
                        bone_info.setup_space = spine.Space.invert(bone.world_space, new spine.Space());
                    });
                    spine_data.iterateSkins(function (skin_key, skin) {
                        var skin_info = render.skin_info_map[skin_key] = new SkinInfo();
                        skin.iterateAttachments(function (slot_key, skin_slot, attachment_key, attachment) {
                            if (!attachment) {
                                return;
                            }
                            var slot_info = skin_info.slot_info_map[slot_key] = skin_info.slot_info_map[slot_key] || new SlotInfo();
                            switch (attachment.type) {
                                case 'mesh': {
                                    var mesh_attachment = attachment;
                                    var mesh_attachment_info = slot_info.attachment_info_map[attachment_key] = new MeshAttachmentInfo();
                                    var vertex_count_1 = mesh_attachment.vertices.length / 2;
                                    var vertex_position = new Float32Array(mesh_attachment.vertices);
                                    var vertex_texcoord = new Float32Array(mesh_attachment.uvs);
                                    var vertex_triangle = new Uint16Array(mesh_attachment.triangles);
                                    mesh_attachment_info.gl_vertex_position = glMakeVertex(gl, vertex_position, 2, gl.ARRAY_BUFFER, gl.STATIC_DRAW);
                                    mesh_attachment_info.gl_vertex_texcoord = glMakeVertex(gl, vertex_texcoord, 2, gl.ARRAY_BUFFER, gl.STATIC_DRAW);
                                    mesh_attachment_info.gl_vertex_triangle = glMakeVertex(gl, vertex_triangle, 1, gl.ELEMENT_ARRAY_BUFFER, gl.STATIC_DRAW);
                                    var anim_ffd_attachments_1 = mesh_attachment_info.anim_ffd_attachments = {};
                                    spine_data.iterateAnims(function (anim_key, anim) {
                                        var anim_ffd = anim.ffds && anim.ffds[skin_key];
                                        var ffd_slot = anim_ffd && anim_ffd.ffd_slots[slot_key];
                                        var ffd_attachment = ffd_slot && ffd_slot.ffd_attachments[attachment_key];
                                        if (ffd_attachment) {
                                            var anim_ffd_attachment = anim_ffd_attachments_1[anim_key] = {};
                                            var anim_ffd_keyframes_1 = anim_ffd_attachment.ffd_keyframes = [];
                                            ffd_attachment.ffd_keyframes.forEach(function (ffd_keyframe, ffd_keyframe_index) {
                                                var anim_ffd_keyframe = anim_ffd_keyframes_1[ffd_keyframe_index] = {};
                                                var vertex = new Float32Array(2 * vertex_count_1);
                                                vertex.subarray(ffd_keyframe.offset, ffd_keyframe.offset + ffd_keyframe.vertices.length).set(new Float32Array(ffd_keyframe.vertices));
                                                anim_ffd_keyframe.gl_vertex = glMakeVertex(gl, vertex, 2, gl.ARRAY_BUFFER, gl.STATIC_DRAW);
                                            });
                                        }
                                    });
                                    break;
                                }
                                case 'skinnedmesh': {
                                    var skinned_mesh_attachment_1 = attachment;
                                    var skinned_mesh_attachment_info = slot_info.attachment_info_map[attachment_key] = new SkinnedMeshAttachmentInfo();
                                    var vertex_count_2 = skinned_mesh_attachment_1.uvs.length / 2;
                                    var vertex_position = new Float32Array(2 * vertex_count_2);
                                    var vertex_blenders_1 = new Float32Array(2 * render.gl_skin_shader_blenders_count * vertex_count_2);
                                    var vertex_texcoord = new Float32Array(skinned_mesh_attachment_1.uvs);
                                    var vertex_triangle = new Uint16Array(skinned_mesh_attachment_1.triangles);
                                    var blend_bone_index_array_1 = skinned_mesh_attachment_info.blend_bone_index_array = [];
                                    var _loop_1 = function(vertex_index, index) {
                                        var blender_count = skinned_mesh_attachment_1.vertices[index++];
                                        var blender_array = [];
                                        for (var blender_index = 0; blender_index < blender_count; ++blender_index) {
                                            var bone_index = skinned_mesh_attachment_1.vertices[index++];
                                            var x = skinned_mesh_attachment_1.vertices[index++];
                                            var y = skinned_mesh_attachment_1.vertices[index++];
                                            var weight = skinned_mesh_attachment_1.vertices[index++];
                                            blender_array.push({ position: new spine.Vector(x, y), bone_index: bone_index, weight: weight });
                                        }
                                        blender_array = blender_array.sort(function (a, b) { return b.weight - a.weight; });
                                        if (blender_array.length > render.gl_skin_shader_blenders_count) {
                                            console.log("blend array length for", attachment_key, "is", blender_array.length, "so clamp to", render.gl_skin_shader_blenders_count);
                                            blender_array.length = render.gl_skin_shader_blenders_count;
                                            var weight_sum_1 = 0;
                                            blender_array.forEach(function (blend) { weight_sum_1 += blend.weight; });
                                            blender_array.forEach(function (blend) { blend.weight /= weight_sum_1; });
                                        }
                                        var position_x = 0;
                                        var position_y = 0;
                                        var blend_position = new spine.Vector();
                                        var vertex_blenders_offset = vertex_index * 2 * render.gl_skin_shader_blenders_count;
                                        blender_array.forEach(function (blend, index) {
                                            if (blend_bone_index_array_1.indexOf(blend.bone_index) === -1) {
                                                blend_bone_index_array_1.push(blend.bone_index);
                                            }
                                            var bone_key = spine_data.bone_keys[blend.bone_index];
                                            var bone = spine_data.bones[bone_key];
                                            spine.Space.transform(bone.world_space, blend.position, blend_position);
                                            position_x += blend_position.x * blend.weight;
                                            position_y += blend_position.y * blend.weight;
                                            vertex_blenders_1[vertex_blenders_offset++] = blend_bone_index_array_1.indexOf(blend.bone_index);
                                            vertex_blenders_1[vertex_blenders_offset++] = blend.weight;
                                        });
                                        var vertex_position_offset = vertex_index * 2;
                                        vertex_position[vertex_position_offset++] = position_x;
                                        vertex_position[vertex_position_offset++] = position_y;
                                        if (blend_bone_index_array_1.length > render.gl_skin_shader_modelview_count) {
                                            console.log("blend bone index array length for", attachment_key, "is", blend_bone_index_array_1.length, "greater than", render.gl_skin_shader_modelview_count);
                                        }
                                        out_index_1 = index;
                                    };
                                    var out_index_1;
                                    for (var vertex_index = 0, index = 0; vertex_index < vertex_count_2; ++vertex_index) {
                                        _loop_1(vertex_index, index);
                                        index = out_index_1;
                                    }
                                    skinned_mesh_attachment_info.gl_vertex_position = glMakeVertex(gl, vertex_position, 2, gl.ARRAY_BUFFER, gl.STATIC_DRAW);
                                    skinned_mesh_attachment_info.gl_vertex_blenders = glMakeVertex(gl, vertex_blenders_1, 2, gl.ARRAY_BUFFER, gl.STATIC_DRAW);
                                    skinned_mesh_attachment_info.gl_vertex_texcoord = glMakeVertex(gl, vertex_texcoord, 2, gl.ARRAY_BUFFER, gl.STATIC_DRAW);
                                    skinned_mesh_attachment_info.gl_vertex_triangle = glMakeVertex(gl, vertex_triangle, 1, gl.ELEMENT_ARRAY_BUFFER, gl.STATIC_DRAW);
                                    var anim_ffd_attachments_2 = skinned_mesh_attachment_info.anim_ffd_attachments = {};
                                    spine_data.iterateAnims(function (anim_key, anim) {
                                        var anim_ffd = anim.ffds && anim.ffds[skin_key];
                                        var ffd_slot = anim_ffd && anim_ffd.ffd_slots[slot_key];
                                        var ffd_attachment = ffd_slot && ffd_slot.ffd_attachments[attachment_key];
                                        if (ffd_attachment) {
                                            var anim_ffd_attachment = anim_ffd_attachments_2[anim_key] = {};
                                            var anim_ffd_keyframes_2 = anim_ffd_attachment.ffd_keyframes = [];
                                            ffd_attachment.ffd_keyframes.forEach(function (ffd_keyframe, ffd_keyframe_index) {
                                                var anim_ffd_keyframe = anim_ffd_keyframes_2[ffd_keyframe_index] = {};
                                                var vertex = new Float32Array(2 * vertex_count_2);
                                                for (var vertex_index = 0, index = 0, ffd_index = 0; vertex_index < vertex_count_2; ++vertex_index) {
                                                    var blender_count = skinned_mesh_attachment_1.vertices[index++];
                                                    var vertex_x = 0;
                                                    var vertex_y = 0;
                                                    for (var blender_index = 0; blender_index < blender_count; ++blender_index) {
                                                        var bone_index = skinned_mesh_attachment_1.vertices[index++];
                                                        var x = skinned_mesh_attachment_1.vertices[index++];
                                                        var y = skinned_mesh_attachment_1.vertices[index++];
                                                        var weight = skinned_mesh_attachment_1.vertices[index++];
                                                        var morph_position_x = ffd_keyframe.vertices[ffd_index - ffd_keyframe.offset] || 0;
                                                        ++ffd_index;
                                                        var morph_position_y = ffd_keyframe.vertices[ffd_index - ffd_keyframe.offset] || 0;
                                                        ++ffd_index;
                                                        vertex_x += morph_position_x * weight;
                                                        vertex_y += morph_position_y * weight;
                                                    }
                                                    var vertex_offset = vertex_index * 2;
                                                    vertex[vertex_offset++] = vertex_x;
                                                    vertex[vertex_offset++] = vertex_y;
                                                }
                                                anim_ffd_keyframe.gl_vertex = glMakeVertex(gl, vertex, 2, gl.ARRAY_BUFFER, gl.STATIC_DRAW);
                                            });
                                        }
                                    });
                                    break;
                                }
                                default:
                                    break;
                            }
                        });
                    });
                    if (atlas_data) {
                        atlas_data.pages.forEach(function (page) {
                            if (page.format !== 'RGBA8888') {
                                throw new Error(page.format);
                            }
                            var gl_min_filter = gl.NONE;
                            switch (page.min_filter) {
                                case 'Nearest':
                                    gl_min_filter = gl.NEAREST;
                                    break;
                                default:
                                case 'Linear':
                                    gl_min_filter = gl.LINEAR;
                                    break;
                                case 'MipMapNearestNearest':
                                    gl_min_filter = gl.NEAREST_MIPMAP_NEAREST;
                                    break;
                                case 'MipMapLinearNearest':
                                    gl_min_filter = gl.LINEAR_MIPMAP_NEAREST;
                                    break;
                                case 'MipMapNearestLinear':
                                    gl_min_filter = gl.NEAREST_MIPMAP_LINEAR;
                                    break;
                                case 'MipMapLinearLinear':
                                    gl_min_filter = gl.LINEAR_MIPMAP_LINEAR;
                                    break;
                            }
                            var gl_mag_filter = gl.NONE;
                            switch (page.mag_filter) {
                                case 'Nearest':
                                    gl_mag_filter = gl.NEAREST;
                                    break;
                                default:
                                case 'Linear':
                                    gl_mag_filter = gl.LINEAR;
                                    break;
                            }
                            var gl_wrap_s = gl.NONE;
                            switch (page.wrap_s) {
                                case 'Repeat':
                                    gl_wrap_s = gl.REPEAT;
                                    break;
                                default:
                                case 'ClampToEdge':
                                    gl_wrap_s = gl.CLAMP_TO_EDGE;
                                    break;
                                case 'MirroredRepeat':
                                    gl_wrap_s = gl.MIRRORED_REPEAT;
                                    break;
                            }
                            var gl_wrap_t = gl.NONE;
                            switch (page.wrap_t) {
                                case 'Repeat':
                                    gl_wrap_t = gl.REPEAT;
                                    break;
                                default:
                                case 'ClampToEdge':
                                    gl_wrap_t = gl.CLAMP_TO_EDGE;
                                    break;
                                case 'MirroredRepeat':
                                    gl_wrap_t = gl.MIRRORED_REPEAT;
                                    break;
                            }
                            var image_key = page.name;
                            var image = images[image_key];
                            var gl_texture = render.gl_textures[image_key] = gl.createTexture();
                            gl.bindTexture(gl.TEXTURE_2D, gl_texture);
                            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl_min_filter);
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl_mag_filter);
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl_wrap_s);
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl_wrap_t);
                        });
                    }
                    else {
                        spine_data.iterateSkins(function (skin_key, skin) {
                            skin.iterateAttachments(function (slot_key, skin_slot, attachment_key, attachment) {
                                if (!attachment) {
                                    return;
                                }
                                switch (attachment.type) {
                                    case 'region':
                                    case 'mesh':
                                    case 'skinnedmesh':
                                        var image_key = attachment_key;
                                        var image = images[image_key];
                                        var gl_texture = render.gl_textures[image_key] = gl.createTexture();
                                        gl.bindTexture(gl.TEXTURE_2D, gl_texture);
                                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
                                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
                                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                                        break;
                                    default:
                                        break;
                                }
                            });
                        });
                    }
                };
                ;
                RenderWebGL.prototype.drawPose = function (spine_pose, atlas_data) {
                    var render = this;
                    var gl = render.gl;
                    if (!gl) {
                        return;
                    }
                    var gl_projection = render.gl_projection;
                    var gl_modelview = render.gl_modelview;
                    var gl_tex_matrix = render.gl_tex_matrix;
                    var gl_color = render.gl_color;
                    var alpha = gl_color[3];
                    spine_pose.iterateAttachments(function (slot_key, slot, skin_slot, attachment_key, attachment) {
                        if (!attachment) {
                            return;
                        }
                        if (attachment.type === 'boundingbox') {
                            return;
                        }
                        var site = atlas_data && atlas_data.sites[attachment_key];
                        var page = site && site.page;
                        var image_key = (page && page.name) || attachment_key;
                        var gl_texture = render.gl_textures[image_key];
                        if (!gl_texture) {
                            return;
                        }
                        mat3x3Identity(gl_modelview);
                        mat3x3Identity(gl_tex_matrix);
                        mat3x3ApplyAtlasPageTexcoord(gl_tex_matrix, page);
                        mat3x3ApplyAtlasSiteTexcoord(gl_tex_matrix, site);
                        vec4CopyColor(gl_color, slot.color);
                        gl_color[3] *= alpha;
                        gl.enable(gl.BLEND);
                        switch (slot.blend) {
                            default:
                            case 'normal':
                                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
                                break;
                            case 'additive':
                                gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
                                break;
                            case 'multiply':
                                gl.blendFunc(gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA);
                                break;
                            case 'screen':
                                gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_COLOR);
                                break;
                        }
                        var skin_info = render.skin_info_map[spine_pose.skin_key];
                        var default_skin_info = render.skin_info_map['default'];
                        var slot_info = skin_info.slot_info_map[slot_key] || default_skin_info.slot_info_map[slot_key];
                        switch (attachment.type) {
                            case 'region': {
                                var bone = spine_pose.bones[slot.bone_key];
                                var region_attachment = attachment;
                                var region_attachment_info = slot_info.attachment_info_map[attachment_key];
                                mat3x3ApplySpace(gl_modelview, bone.world_space);
                                mat3x3ApplySpace(gl_modelview, region_attachment.local_space);
                                mat3x3Scale(gl_modelview, region_attachment.width / 2, region_attachment.height / 2);
                                mat3x3ApplyAtlasSitePosition(gl_modelview, site);
                                var gl_shader = render.gl_mesh_shader;
                                var gl_vertex_position = render.gl_region_vertex_position;
                                var gl_vertex_texcoord = render.gl_region_vertex_texcoord;
                                gl.useProgram(gl_shader.program);
                                gl.uniformMatrix4fv(gl_shader.uniforms['uProjection'], false, gl_projection);
                                gl.uniformMatrix3fv(gl_shader.uniforms['uModelview'], false, gl_modelview);
                                gl.uniformMatrix3fv(gl_shader.uniforms['uTexMatrix'], false, gl_tex_matrix);
                                gl.uniform4fv(gl_shader.uniforms['uColor'], gl_color);
                                gl.activeTexture(gl.TEXTURE0);
                                gl.bindTexture(gl.TEXTURE_2D, gl_texture);
                                gl.uniform1i(gl_shader.uniforms['uSampler'], 0);
                                glSetupAttribute(gl, gl_shader, 'aVertexPosition', gl_vertex_position);
                                glSetupAttribute(gl, gl_shader, 'aVertexTexCoord', gl_vertex_texcoord);
                                gl.drawArrays(gl.TRIANGLE_FAN, 0, gl_vertex_position.count);
                                glResetAttribute(gl, gl_shader, 'aVertexPosition', gl_vertex_position);
                                glResetAttribute(gl, gl_shader, 'aVertexTexCoord', gl_vertex_texcoord);
                                gl.bindTexture(gl.TEXTURE_2D, null);
                                gl.useProgram(null);
                                break;
                            }
                            case 'mesh': {
                                var bone = spine_pose.bones[slot.bone_key];
                                var mesh_attachment = attachment;
                                var mesh_attachment_info = slot_info.attachment_info_map[attachment_key];
                                mat3x3ApplySpace(gl_modelview, bone.world_space);
                                mat3x3ApplyAtlasSitePosition(gl_modelview, site);
                                var anim = spine_pose.data.anims[spine_pose.anim_key];
                                var anim_ffd = anim && anim.ffds && anim.ffds[spine_pose.skin_key];
                                var ffd_slot = anim_ffd && anim_ffd.ffd_slots[slot_key];
                                var ffd_attachment = ffd_slot && ffd_slot.ffd_attachments[attachment_key];
                                var ffd_keyframes = ffd_attachment && ffd_attachment.ffd_keyframes;
                                var ffd_keyframe0_index = spine.Keyframe.find(ffd_keyframes, spine_pose.time);
                                if (ffd_keyframe0_index !== -1) {
                                    var pct = 0;
                                    var ffd_keyframe0 = ffd_keyframes[ffd_keyframe0_index];
                                    var ffd_keyframe1_index = ffd_keyframe0_index + 1;
                                    var ffd_keyframe1 = ffd_keyframes[ffd_keyframe1_index];
                                    if (ffd_keyframe1) {
                                        pct = ffd_keyframe0.curve.evaluate((spine_pose.time - ffd_keyframe0.time) / (ffd_keyframe1.time - ffd_keyframe0.time));
                                    }
                                    else {
                                        ffd_keyframe1_index = ffd_keyframe0_index;
                                        ffd_keyframe1 = ffd_keyframes[ffd_keyframe1_index];
                                    }
                                    var anim_ffd_attachment = mesh_attachment_info.anim_ffd_attachments[spine_pose.anim_key];
                                    var anim_ffd_keyframe0 = anim_ffd_attachment.ffd_keyframes[ffd_keyframe0_index];
                                    var anim_ffd_keyframe1 = anim_ffd_attachment.ffd_keyframes[ffd_keyframe1_index];
                                    var gl_shader = render.gl_ffd_mesh_shader;
                                    var gl_vertex_position = mesh_attachment_info.gl_vertex_position;
                                    var gl_vertex_texcoord = mesh_attachment_info.gl_vertex_texcoord;
                                    var gl_vertex_triangle = mesh_attachment_info.gl_vertex_triangle;
                                    gl.useProgram(gl_shader.program);
                                    gl.uniformMatrix4fv(gl_shader.uniforms['uProjection'], false, gl_projection);
                                    gl.uniformMatrix3fv(gl_shader.uniforms['uModelview'], false, gl_modelview);
                                    gl.uniformMatrix3fv(gl_shader.uniforms['uTexMatrix'], false, gl_tex_matrix);
                                    gl.uniform4fv(gl_shader.uniforms['uColor'], gl_color);
                                    gl.uniform1f(gl_shader.uniforms['uMorphWeight'], pct);
                                    gl.activeTexture(gl.TEXTURE0);
                                    gl.bindTexture(gl.TEXTURE_2D, gl_texture);
                                    gl.uniform1i(gl_shader.uniforms['uSampler'], 0);
                                    glSetupAttribute(gl, gl_shader, 'aVertexPosition', gl_vertex_position);
                                    glSetupAttribute(gl, gl_shader, 'aVertexMorph0Position', anim_ffd_keyframe0.gl_vertex);
                                    glSetupAttribute(gl, gl_shader, 'aVertexMorph1Position', anim_ffd_keyframe1.gl_vertex);
                                    glSetupAttribute(gl, gl_shader, 'aVertexTexCoord', gl_vertex_texcoord);
                                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl_vertex_triangle.buffer);
                                    gl.drawElements(gl.TRIANGLES, gl_vertex_triangle.count, gl_vertex_triangle.type, 0);
                                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                                    glResetAttribute(gl, gl_shader, 'aVertexPosition', gl_vertex_position);
                                    glResetAttribute(gl, gl_shader, 'aVertexMorph0Position', anim_ffd_keyframe0.gl_vertex);
                                    glResetAttribute(gl, gl_shader, 'aVertexMorph1Position', anim_ffd_keyframe1.gl_vertex);
                                    glResetAttribute(gl, gl_shader, 'aVertexTexCoord', gl_vertex_texcoord);
                                    gl.bindTexture(gl.TEXTURE_2D, null);
                                    gl.useProgram(null);
                                }
                                else {
                                    var gl_shader = render.gl_mesh_shader;
                                    var gl_vertex_position = mesh_attachment_info.gl_vertex_position;
                                    var gl_vertex_texcoord = mesh_attachment_info.gl_vertex_texcoord;
                                    var gl_vertex_triangle = mesh_attachment_info.gl_vertex_triangle;
                                    gl.useProgram(gl_shader.program);
                                    gl.uniformMatrix4fv(gl_shader.uniforms['uProjection'], false, gl_projection);
                                    gl.uniformMatrix3fv(gl_shader.uniforms['uModelview'], false, gl_modelview);
                                    gl.uniformMatrix3fv(gl_shader.uniforms['uTexMatrix'], false, gl_tex_matrix);
                                    gl.uniform4fv(gl_shader.uniforms['uColor'], gl_color);
                                    gl.activeTexture(gl.TEXTURE0);
                                    gl.bindTexture(gl.TEXTURE_2D, gl_texture);
                                    gl.uniform1i(gl_shader.uniforms['uSampler'], 0);
                                    glSetupAttribute(gl, gl_shader, 'aVertexPosition', gl_vertex_position);
                                    glSetupAttribute(gl, gl_shader, 'aVertexTexCoord', gl_vertex_texcoord);
                                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl_vertex_triangle.buffer);
                                    gl.drawElements(gl.TRIANGLES, gl_vertex_triangle.count, gl_vertex_triangle.type, 0);
                                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                                    glResetAttribute(gl, gl_shader, 'aVertexPosition', gl_vertex_position);
                                    glResetAttribute(gl, gl_shader, 'aVertexTexCoord', gl_vertex_texcoord);
                                    gl.bindTexture(gl.TEXTURE_2D, null);
                                    gl.useProgram(null);
                                }
                                break;
                            }
                            case 'skinnedmesh': {
                                var skinned_mesh_attachment = attachment;
                                var skinned_mesh_attachment_info = slot_info.attachment_info_map[attachment_key];
                                var blend_bone_index_array = skinned_mesh_attachment_info.blend_bone_index_array;
                                for (var index = 0; index < blend_bone_index_array.length; ++index) {
                                    var bone_index = blend_bone_index_array[index];
                                    var bone_key = spine_pose.bone_keys[bone_index];
                                    var bone = spine_pose.bones[bone_key];
                                    var bone_info = render.bone_info_map[bone_key];
                                    if (index < render.gl_skin_shader_modelview_count) {
                                        var modelview = render.gl_skin_shader_modelview_array.subarray(index * 9, (index + 1) * 9);
                                        mat3x3Copy(modelview, gl_modelview);
                                        mat3x3ApplySpace(modelview, bone.world_space);
                                        mat3x3ApplySpace(modelview, bone_info.setup_space);
                                        mat3x3ApplyAtlasSitePosition(modelview, site);
                                    }
                                }
                                var anim = spine_pose.data.anims[spine_pose.anim_key];
                                var anim_ffd = anim && anim.ffds && anim.ffds[spine_pose.skin_key];
                                var ffd_slot = anim_ffd && anim_ffd.ffd_slots[slot_key];
                                var ffd_attachment = ffd_slot && ffd_slot.ffd_attachments[attachment_key];
                                var ffd_keyframes = ffd_attachment && ffd_attachment.ffd_keyframes;
                                var ffd_keyframe0_index = spine.Keyframe.find(ffd_keyframes, spine_pose.time);
                                if (ffd_keyframe0_index !== -1) {
                                    var pct = 0;
                                    var ffd_keyframe0 = ffd_keyframes[ffd_keyframe0_index];
                                    var ffd_keyframe1_index = ffd_keyframe0_index + 1;
                                    var ffd_keyframe1 = ffd_keyframes[ffd_keyframe1_index];
                                    if (ffd_keyframe1) {
                                        pct = ffd_keyframe0.curve.evaluate((spine_pose.time - ffd_keyframe0.time) / (ffd_keyframe1.time - ffd_keyframe0.time));
                                    }
                                    else {
                                        ffd_keyframe1_index = ffd_keyframe0_index;
                                        ffd_keyframe1 = ffd_keyframes[ffd_keyframe1_index];
                                    }
                                    var anim_ffd_attachment = skinned_mesh_attachment_info.anim_ffd_attachments[spine_pose.anim_key];
                                    var anim_ffd_keyframe0 = anim_ffd_attachment.ffd_keyframes[ffd_keyframe0_index];
                                    var anim_ffd_keyframe1 = anim_ffd_attachment.ffd_keyframes[ffd_keyframe1_index];
                                    var gl_shader = render.gl_ffd_skin_shader;
                                    var gl_vertex_position = skinned_mesh_attachment_info.gl_vertex_position;
                                    var gl_vertex_blenders = skinned_mesh_attachment_info.gl_vertex_blenders;
                                    var gl_vertex_texcoord = skinned_mesh_attachment_info.gl_vertex_texcoord;
                                    var gl_vertex_triangle = skinned_mesh_attachment_info.gl_vertex_triangle;
                                    gl.useProgram(gl_shader.program);
                                    gl.uniformMatrix4fv(gl_shader.uniforms['uProjection'], false, gl_projection);
                                    gl.uniformMatrix3fv(gl_shader.uniforms['uModelviewArray[0]'], false, render.gl_skin_shader_modelview_array);
                                    gl.uniformMatrix3fv(gl_shader.uniforms['uTexMatrix'], false, gl_tex_matrix);
                                    gl.uniform4fv(gl_shader.uniforms['uColor'], gl_color);
                                    gl.uniform1f(gl_shader.uniforms['uMorphWeight'], pct);
                                    gl.activeTexture(gl.TEXTURE0);
                                    gl.bindTexture(gl.TEXTURE_2D, gl_texture);
                                    gl.uniform1i(gl_shader.uniforms['uSampler'], 0);
                                    glSetupAttribute(gl, gl_shader, 'aVertexPosition', gl_vertex_position);
                                    glSetupAttribute(gl, gl_shader, 'aVertexBlenders{index}', gl_vertex_blenders, render.gl_skin_shader_blenders_count);
                                    glSetupAttribute(gl, gl_shader, 'aVertexMorph0Position', anim_ffd_keyframe0.gl_vertex);
                                    glSetupAttribute(gl, gl_shader, 'aVertexMorph1Position', anim_ffd_keyframe1.gl_vertex);
                                    glSetupAttribute(gl, gl_shader, 'aVertexTexCoord', gl_vertex_texcoord);
                                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl_vertex_triangle.buffer);
                                    gl.drawElements(gl.TRIANGLES, gl_vertex_triangle.count, gl_vertex_triangle.type, 0);
                                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                                    glResetAttribute(gl, gl_shader, 'aVertexPosition', gl_vertex_position);
                                    glResetAttribute(gl, gl_shader, 'aVertexBlenders{index}', gl_vertex_blenders, render.gl_skin_shader_blenders_count);
                                    glResetAttribute(gl, gl_shader, 'aVertexMorph0Position', anim_ffd_keyframe0.gl_vertex);
                                    glResetAttribute(gl, gl_shader, 'aVertexMorph1Position', anim_ffd_keyframe1.gl_vertex);
                                    glResetAttribute(gl, gl_shader, 'aVertexTexCoord', gl_vertex_texcoord);
                                    gl.bindTexture(gl.TEXTURE_2D, null);
                                    gl.useProgram(null);
                                }
                                else {
                                    var gl_shader = render.gl_skin_shader;
                                    var gl_vertex_position = skinned_mesh_attachment_info.gl_vertex_position;
                                    var gl_vertex_blenders = skinned_mesh_attachment_info.gl_vertex_blenders;
                                    var gl_vertex_texcoord = skinned_mesh_attachment_info.gl_vertex_texcoord;
                                    var gl_vertex_triangle = skinned_mesh_attachment_info.gl_vertex_triangle;
                                    gl.useProgram(gl_shader.program);
                                    gl.uniformMatrix4fv(gl_shader.uniforms['uProjection'], false, gl_projection);
                                    gl.uniformMatrix3fv(gl_shader.uniforms['uModelviewArray[0]'], false, render.gl_skin_shader_modelview_array);
                                    gl.uniformMatrix3fv(gl_shader.uniforms['uTexMatrix'], false, gl_tex_matrix);
                                    gl.uniform4fv(gl_shader.uniforms['uColor'], gl_color);
                                    gl.activeTexture(gl.TEXTURE0);
                                    gl.bindTexture(gl.TEXTURE_2D, gl_texture);
                                    gl.uniform1i(gl_shader.uniforms['uSampler'], 0);
                                    glSetupAttribute(gl, gl_shader, 'aVertexPosition', gl_vertex_position);
                                    glSetupAttribute(gl, gl_shader, 'aVertexBlenders{index}', gl_vertex_blenders, render.gl_skin_shader_blenders_count);
                                    glSetupAttribute(gl, gl_shader, 'aVertexTexCoord', gl_vertex_texcoord);
                                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl_vertex_triangle.buffer);
                                    gl.drawElements(gl.TRIANGLES, gl_vertex_triangle.count, gl_vertex_triangle.type, 0);
                                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                                    glResetAttribute(gl, gl_shader, 'aVertexPosition', gl_vertex_position);
                                    glResetAttribute(gl, gl_shader, 'aVertexBlenders{index}', gl_vertex_blenders, render.gl_skin_shader_blenders_count);
                                    glResetAttribute(gl, gl_shader, 'aVertexTexCoord', gl_vertex_texcoord);
                                    gl.bindTexture(gl.TEXTURE_2D, null);
                                    gl.useProgram(null);
                                }
                                break;
                            }
                            default:
                                break;
                        }
                    });
                    gl_color[3] = alpha;
                };
                return RenderWebGL;
            }());
            exports_5("RenderWebGL", RenderWebGL);
        }
    }
});
System.register("dijon/spine/render-ctx2d", ["dijon/spine/spine", "dijon/spine/render-webgl"], function(exports_6, context_6) {
    "use strict";
    var __moduleName = context_6 && context_6.id;
    var spine, render_webgl_1;
    var BoneInfo, SkinInfo, SlotInfo, AttachmentInfo, RegionAttachmentInfo, BoundingBoxAttachmentInfo, MeshAttachmentInfo, SkinnedMeshAttachmentInfo, RenderCtx2D;
    function ctxApplySpace(ctx, space) {
        if (space) {
            ctx.translate(space.position.x, space.position.y);
            ctx.rotate(space.rotation.rad);
            ctx.scale(space.scale.x, space.scale.y);
        }
    }
    function ctxApplyAtlasSitePosition(ctx, site) {
        if (site) {
            ctx.scale(1 / site.original_w, 1 / site.original_h);
            ctx.translate(2 * site.offset_x - (site.original_w - site.w), (site.original_h - site.h) - 2 * site.offset_y);
            ctx.scale(site.w, site.h);
        }
    }
    function ctxDrawCircle(ctx, color, scale) {
        if (color === void 0) { color = 'grey'; }
        if (scale === void 0) { scale = 1; }
        ctx.beginPath();
        ctx.arc(0, 0, 12 * scale, 0, 2 * Math.PI, false);
        ctx.strokeStyle = color;
        ctx.stroke();
    }
    function ctxDrawPoint(ctx, color, scale) {
        if (color === void 0) { color = 'blue'; }
        if (scale === void 0) { scale = 1; }
        ctx.beginPath();
        ctx.arc(0, 0, 12 * scale, 0, 2 * Math.PI, false);
        ctx.strokeStyle = color;
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(0, 0);
        ctx.lineTo(24 * scale, 0);
        ctx.strokeStyle = 'red';
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(0, 0);
        ctx.lineTo(0, 24 * scale);
        ctx.strokeStyle = 'green';
        ctx.stroke();
    }
    function ctxDrawMesh(ctx, triangles, positions, stroke_style, fill_style) {
        if (stroke_style === void 0) { stroke_style = 'grey'; }
        if (fill_style === void 0) { fill_style = ''; }
        ctx.beginPath();
        for (var index = 0; index < triangles.length;) {
            var triangle0 = triangles[index++] * 2;
            var x0 = positions[triangle0];
            var y0 = positions[triangle0 + 1];
            var triangle1 = triangles[index++] * 2;
            var x1 = positions[triangle1];
            var y1 = positions[triangle1 + 1];
            var triangle2 = triangles[index++] * 2;
            var x2 = positions[triangle2];
            var y2 = positions[triangle2 + 1];
            ctx.moveTo(x0, y0);
            ctx.lineTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.lineTo(x0, y0);
        }
        if (fill_style) {
            ctx.fillStyle = fill_style;
            ctx.fill();
        }
        ctx.strokeStyle = stroke_style;
        ctx.stroke();
    }
    function ctxDrawImageMesh(ctx, triangles, positions, texcoords, image, site, page) {
        var site_texmatrix = new Float32Array(9);
        var site_texcoord = new Float32Array(2);
        render_webgl_1.mat3x3Identity(site_texmatrix);
        render_webgl_1.mat3x3Scale(site_texmatrix, image.width, image.height);
        render_webgl_1.mat3x3ApplyAtlasPageTexcoord(site_texmatrix, page);
        render_webgl_1.mat3x3ApplyAtlasSiteTexcoord(site_texmatrix, site);
        for (var index = 0; index < triangles.length;) {
            var triangle0 = triangles[index++] * 2;
            var position0 = positions.subarray(triangle0, triangle0 + 2);
            var x0 = position0[0];
            var y0 = position0[1];
            var texcoord0 = render_webgl_1.mat3x3Transform(site_texmatrix, texcoords.subarray(triangle0, triangle0 + 2), site_texcoord);
            var u0 = texcoord0[0];
            var v0 = texcoord0[1];
            var triangle1 = triangles[index++] * 2;
            var position1 = positions.subarray(triangle1, triangle1 + 2);
            var x1 = position1[0];
            var y1 = position1[1];
            var texcoord1 = render_webgl_1.mat3x3Transform(site_texmatrix, texcoords.subarray(triangle1, triangle1 + 2), site_texcoord);
            var u1 = texcoord1[0];
            var v1 = texcoord1[1];
            var triangle2 = triangles[index++] * 2;
            var position2 = positions.subarray(triangle2, triangle2 + 2);
            var x2 = position2[0];
            var y2 = position2[1];
            var texcoord2 = render_webgl_1.mat3x3Transform(site_texmatrix, texcoords.subarray(triangle2, triangle2 + 2), site_texcoord);
            var u2 = texcoord2[0];
            var v2 = texcoord2[1];
            ctx.save();
            ctx.beginPath();
            ctx.moveTo(x0, y0);
            ctx.lineTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.closePath();
            ctx.clip();
            x1 -= x0;
            y1 -= y0;
            x2 -= x0;
            y2 -= y0;
            u1 -= u0;
            v1 -= v0;
            u2 -= u0;
            v2 -= v0;
            var id = 1 / (u1 * v2 - u2 * v1);
            var a = id * (v2 * x1 - v1 * x2);
            var b = id * (v2 * y1 - v1 * y2);
            var c = id * (u1 * x2 - u2 * x1);
            var d = id * (u1 * y2 - u2 * y1);
            var e = x0 - (a * u0 + c * v0);
            var f = y0 - (b * u0 + d * v0);
            ctx.transform(a, b, c, d, e, f);
            ctx.drawImage(image, 0, 0);
            ctx.restore();
        }
    }
    function ctxDrawIkConstraints(ctx, data, bones) {
        data.ikc_keys.forEach(function (ikc_key) {
            var ikc = data.ikcs[ikc_key];
            var target = bones[ikc.target_key];
            switch (ikc.bone_keys.length) {
                case 1:
                    var bone = bones[ikc.bone_keys[0]];
                    ctx.beginPath();
                    ctx.moveTo(target.world_space.position.x, target.world_space.position.y);
                    ctx.lineTo(bone.world_space.position.x, bone.world_space.position.y);
                    ctx.strokeStyle = 'yellow';
                    ctx.stroke();
                    ctx.save();
                    ctxApplySpace(ctx, target.world_space);
                    ctxDrawCircle(ctx, 'yellow', 1.5);
                    ctx.restore();
                    ctx.save();
                    ctxApplySpace(ctx, bone.world_space);
                    ctxDrawCircle(ctx, 'yellow', 0.5);
                    ctx.restore();
                    break;
                case 2:
                    var parent_2 = bones[ikc.bone_keys[0]];
                    var child = bones[ikc.bone_keys[1]];
                    ctx.beginPath();
                    ctx.moveTo(target.world_space.position.x, target.world_space.position.y);
                    ctx.lineTo(child.world_space.position.x, child.world_space.position.y);
                    ctx.lineTo(parent_2.world_space.position.x, parent_2.world_space.position.y);
                    ctx.strokeStyle = 'yellow';
                    ctx.stroke();
                    ctx.save();
                    ctxApplySpace(ctx, target.world_space);
                    ctxDrawCircle(ctx, 'yellow', 1.5);
                    ctx.restore();
                    ctx.save();
                    ctxApplySpace(ctx, child.world_space);
                    ctxDrawCircle(ctx, 'yellow', 0.75);
                    ctx.restore();
                    ctx.save();
                    ctxApplySpace(ctx, parent_2.world_space);
                    ctxDrawCircle(ctx, 'yellow', 0.5);
                    ctx.restore();
                    break;
                default:
                    break;
            }
        });
    }
    return {
        setters:[
            function (spine_2) {
                spine = spine_2;
            },
            function (render_webgl_1_1) {
                render_webgl_1 = render_webgl_1_1;
            }],
        execute: function() {
            BoneInfo = (function () {
                function BoneInfo() {
                }
                return BoneInfo;
            }());
            exports_6("BoneInfo", BoneInfo);
            SkinInfo = (function () {
                function SkinInfo() {
                    this.slot_info_map = {};
                }
                return SkinInfo;
            }());
            exports_6("SkinInfo", SkinInfo);
            SlotInfo = (function () {
                function SlotInfo() {
                    this.attachment_info_map = {};
                }
                return SlotInfo;
            }());
            exports_6("SlotInfo", SlotInfo);
            AttachmentInfo = (function () {
                function AttachmentInfo(type) {
                    this.type = type;
                }
                return AttachmentInfo;
            }());
            exports_6("AttachmentInfo", AttachmentInfo);
            RegionAttachmentInfo = (function (_super) {
                __extends(RegionAttachmentInfo, _super);
                function RegionAttachmentInfo() {
                    _super.call(this, 'region');
                }
                return RegionAttachmentInfo;
            }(AttachmentInfo));
            exports_6("RegionAttachmentInfo", RegionAttachmentInfo);
            BoundingBoxAttachmentInfo = (function (_super) {
                __extends(BoundingBoxAttachmentInfo, _super);
                function BoundingBoxAttachmentInfo() {
                    _super.call(this, 'boundingbox');
                }
                return BoundingBoxAttachmentInfo;
            }(AttachmentInfo));
            exports_6("BoundingBoxAttachmentInfo", BoundingBoxAttachmentInfo);
            MeshAttachmentInfo = (function (_super) {
                __extends(MeshAttachmentInfo, _super);
                function MeshAttachmentInfo() {
                    _super.call(this, 'mesh');
                }
                return MeshAttachmentInfo;
            }(AttachmentInfo));
            exports_6("MeshAttachmentInfo", MeshAttachmentInfo);
            SkinnedMeshAttachmentInfo = (function (_super) {
                __extends(SkinnedMeshAttachmentInfo, _super);
                function SkinnedMeshAttachmentInfo() {
                    _super.call(this, 'skinnedmesh');
                }
                return SkinnedMeshAttachmentInfo;
            }(AttachmentInfo));
            exports_6("SkinnedMeshAttachmentInfo", SkinnedMeshAttachmentInfo);
            RenderCtx2D = (function () {
                function RenderCtx2D(ctx) {
                    this.images = {};
                    this.skin_info_map = {};
                    this.region_vertex_position = new Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]);
                    this.region_vertex_texcoord = new Float32Array([0, 1, 1, 1, 1, 0, 0, 0]);
                    this.region_vertex_triangle = new Uint16Array([0, 1, 2, 0, 2, 3]);
                    this.ctx = ctx;
                }
                RenderCtx2D.prototype.dropData = function (spine_data, atlas_data) {
                    this.images = {};
                    this.skin_info_map = {};
                };
                RenderCtx2D.prototype.loadData = function (spine_data, atlas_data, images) {
                    var _this = this;
                    this.images = images;
                    spine_data.iterateSkins(function (skin_key, skin) {
                        var skin_info = _this.skin_info_map[skin_key] = new SkinInfo();
                        skin.iterateAttachments(function (slot_key, skin_slot, attachment_key, attachment) {
                            if (!attachment) {
                                return;
                            }
                            var slot_info = skin_info.slot_info_map[slot_key] = skin_info.slot_info_map[slot_key] || new SlotInfo();
                            switch (attachment.type) {
                                case 'mesh': {
                                    var mesh_attachment = attachment;
                                    var mesh_attachment_info = slot_info.attachment_info_map[attachment_key] = new MeshAttachmentInfo();
                                    var vertex_count = mesh_attachment_info.vertex_count = mesh_attachment.vertices.length / 2;
                                    var vertex_position = mesh_attachment_info.vertex_position = new Float32Array(mesh_attachment.vertices);
                                    var vertex_texcoord = mesh_attachment_info.vertex_texcoord = new Float32Array(mesh_attachment.uvs);
                                    var vertex_triangle = mesh_attachment_info.vertex_triangle = new Uint16Array(mesh_attachment.triangles);
                                    break;
                                }
                                case 'skinnedmesh': {
                                    var skinned_mesh_attachment = attachment;
                                    var skinned_mesh_attachment_info = slot_info.attachment_info_map[attachment_key] = new SkinnedMeshAttachmentInfo();
                                    var vertex_count = skinned_mesh_attachment_info.vertex_count = skinned_mesh_attachment.uvs.length / 2;
                                    var vertex_setup_position = skinned_mesh_attachment_info.vertex_setup_position = new Float32Array(2 * vertex_count);
                                    var vertex_blend_position = skinned_mesh_attachment_info.vertex_blend_position = new Float32Array(2 * vertex_count);
                                    var vertex_texcoord = skinned_mesh_attachment_info.vertex_texcoord = new Float32Array(skinned_mesh_attachment.uvs);
                                    var vertex_triangle = skinned_mesh_attachment_info.vertex_triangle = new Uint16Array(skinned_mesh_attachment.triangles);
                                    var position = new spine.Vector();
                                    for (var vertex_index = 0, index = 0; vertex_index < vertex_count; ++vertex_index) {
                                        var blender_count = skinned_mesh_attachment.vertices[index++];
                                        var setup_position_x = 0;
                                        var setup_position_y = 0;
                                        for (var blender_index = 0; blender_index < blender_count; ++blender_index) {
                                            var bone_index = skinned_mesh_attachment.vertices[index++];
                                            var x = position.x = skinned_mesh_attachment.vertices[index++];
                                            var y = position.y = skinned_mesh_attachment.vertices[index++];
                                            var weight = skinned_mesh_attachment.vertices[index++];
                                            var bone_key = spine_data.bone_keys[bone_index];
                                            var bone = spine_data.bones[bone_key];
                                            spine.Space.transform(bone.world_space, position, position);
                                            setup_position_x += position.x * weight;
                                            setup_position_y += position.y * weight;
                                        }
                                        var vertex_setup_position_offset = vertex_index * 2;
                                        vertex_setup_position[vertex_setup_position_offset++] = setup_position_x;
                                        vertex_setup_position[vertex_setup_position_offset++] = setup_position_y;
                                    }
                                    vertex_blend_position.set(vertex_setup_position);
                                    break;
                                }
                                default:
                                    break;
                            }
                        });
                    });
                    this.images = images;
                };
                RenderCtx2D.prototype.updatePose = function (spine_pose, atlas_data) {
                    var _this = this;
                    spine_pose.iterateAttachments(function (slot_key, slot, skin_slot, attachment_key, attachment) {
                        if (!attachment) {
                            return;
                        }
                        var skin_info = _this.skin_info_map[spine_pose.skin_key];
                        var default_skin_info = _this.skin_info_map['default'];
                        var slot_info = skin_info.slot_info_map[slot_key] || default_skin_info.slot_info_map[slot_key];
                        switch (attachment.type) {
                            case 'mesh': {
                                var mesh_attachment = attachment;
                                var mesh_attachment_info = slot_info.attachment_info_map[attachment_key];
                                var anim = spine_pose.data.anims[spine_pose.anim_key];
                                var anim_ffd = anim && anim.ffds && anim.ffds[spine_pose.skin_key];
                                var ffd_slot = anim_ffd && anim_ffd.ffd_slots[slot_key];
                                var ffd_attachment = ffd_slot && ffd_slot.ffd_attachments[attachment_key];
                                var ffd_keyframes = ffd_attachment && ffd_attachment.ffd_keyframes;
                                var ffd_keyframe_index = spine.Keyframe.find(ffd_keyframes, spine_pose.time);
                                if (ffd_keyframe_index !== -1) {
                                    var pct = 0;
                                    var ffd_keyframe0 = ffd_keyframes[ffd_keyframe_index];
                                    var ffd_keyframe1 = ffd_keyframes[ffd_keyframe_index + 1];
                                    if (ffd_keyframe1) {
                                        pct = ffd_keyframe0.curve.evaluate((spine_pose.time - ffd_keyframe0.time) / (ffd_keyframe1.time - ffd_keyframe0.time));
                                    }
                                    else {
                                        ffd_keyframe1 = ffd_keyframe0;
                                    }
                                    for (var index = 0; index < mesh_attachment_info.vertex_position.length; ++index) {
                                        var v0 = ffd_keyframe0.vertices[index - ffd_keyframe0.offset] || 0;
                                        var v1 = ffd_keyframe1.vertices[index - ffd_keyframe1.offset] || 0;
                                        mesh_attachment_info.vertex_position[index] = mesh_attachment.vertices[index] + spine.tween(v0, v1, pct);
                                    }
                                }
                                break;
                            }
                            case 'skinnedmesh': {
                                var skinned_mesh_attachment = attachment;
                                var skinned_mesh_attachment_info = slot_info.attachment_info_map[attachment_key];
                                var anim = spine_pose.data.anims[spine_pose.anim_key];
                                var anim_ffd = anim && anim.ffds && anim.ffds[spine_pose.skin_key];
                                var ffd_slot = anim_ffd && anim_ffd.ffd_slots[slot_key];
                                var ffd_attachment = ffd_slot && ffd_slot.ffd_attachments[attachment_key];
                                var ffd_keyframes = ffd_attachment && ffd_attachment.ffd_keyframes;
                                var ffd_keyframe_index = spine.Keyframe.find(ffd_keyframes, spine_pose.time);
                                if (ffd_keyframe_index !== -1) {
                                    var pct = 0;
                                    var ffd_keyframe0 = ffd_keyframes[ffd_keyframe_index];
                                    var ffd_keyframe1 = ffd_keyframes[ffd_keyframe_index + 1];
                                    if (ffd_keyframe1) {
                                        pct = ffd_keyframe0.curve.evaluate((spine_pose.time - ffd_keyframe0.time) / (ffd_keyframe1.time - ffd_keyframe0.time));
                                    }
                                    else {
                                        ffd_keyframe1 = ffd_keyframe0;
                                    }
                                    var vertex_blend_position = skinned_mesh_attachment_info.vertex_blend_position;
                                    var position = new spine.Vector();
                                    for (var vertex_index = 0, index = 0, ffd_index = 0; vertex_index < skinned_mesh_attachment_info.vertex_count; ++vertex_index) {
                                        var blender_count = skinned_mesh_attachment.vertices[index++];
                                        var blend_position_x = 0;
                                        var blend_position_y = 0;
                                        for (var blender_index = 0; blender_index < blender_count; ++blender_index) {
                                            var bone_index = skinned_mesh_attachment.vertices[index++];
                                            position.x = skinned_mesh_attachment.vertices[index++];
                                            position.y = skinned_mesh_attachment.vertices[index++];
                                            var weight = skinned_mesh_attachment.vertices[index++];
                                            var bone_key = spine_pose.bone_keys[bone_index];
                                            var bone = spine_pose.bones[bone_key];
                                            var x0 = ffd_keyframe0.vertices[ffd_index - ffd_keyframe0.offset] || 0;
                                            var x1 = ffd_keyframe1.vertices[ffd_index - ffd_keyframe1.offset] || 0;
                                            position.x += spine.tween(x0, x1, pct);
                                            ++ffd_index;
                                            var y0 = ffd_keyframe0.vertices[ffd_index - ffd_keyframe0.offset] || 0;
                                            var y1 = ffd_keyframe1.vertices[ffd_index - ffd_keyframe1.offset] || 0;
                                            position.y += spine.tween(y0, y1, pct);
                                            ++ffd_index;
                                            spine.Space.transform(bone.world_space, position, position);
                                            blend_position_x += position.x * weight;
                                            blend_position_y += position.y * weight;
                                        }
                                        var vertex_position_offset = vertex_index * 2;
                                        vertex_blend_position[vertex_position_offset++] = blend_position_x;
                                        vertex_blend_position[vertex_position_offset++] = blend_position_y;
                                    }
                                }
                                else {
                                    var vertex_blend_position = skinned_mesh_attachment_info.vertex_blend_position;
                                    var position = new spine.Vector();
                                    for (var vertex_index = 0, index = 0; vertex_index < skinned_mesh_attachment_info.vertex_count; ++vertex_index) {
                                        var blender_count = skinned_mesh_attachment.vertices[index++];
                                        var blend_position_x = 0;
                                        var blend_position_y = 0;
                                        for (var blender_index = 0; blender_index < blender_count; ++blender_index) {
                                            var bone_index = skinned_mesh_attachment.vertices[index++];
                                            position.x = skinned_mesh_attachment.vertices[index++];
                                            position.y = skinned_mesh_attachment.vertices[index++];
                                            var weight = skinned_mesh_attachment.vertices[index++];
                                            var bone_key = spine_pose.bone_keys[bone_index];
                                            var bone = spine_pose.bones[bone_key];
                                            spine.Space.transform(bone.world_space, position, position);
                                            blend_position_x += position.x * weight;
                                            blend_position_y += position.y * weight;
                                        }
                                        var vertex_position_offset = vertex_index * 2;
                                        vertex_blend_position[vertex_position_offset++] = blend_position_x;
                                        vertex_blend_position[vertex_position_offset++] = blend_position_y;
                                    }
                                }
                                break;
                            }
                            default:
                                break;
                        }
                    });
                };
                RenderCtx2D.prototype.drawPose = function (spine_pose, atlas_data) {
                    var _this = this;
                    this.updatePose(spine_pose, atlas_data);
                    spine_pose.iterateAttachments(function (slot_key, slot, skin_slot, attachment_key, attachment) {
                        if (!attachment) {
                            return;
                        }
                        if (attachment.type === 'boundingbox') {
                            return;
                        }
                        var site = atlas_data && atlas_data.sites[attachment_key];
                        var page = site && site.page;
                        var image_key = (page && page.name) || attachment_key;
                        var image = _this.images[image_key];
                        if (!image || !image.complete) {
                            return;
                        }
                        _this.ctx.save();
                        switch (slot.blend) {
                            default:
                            case 'normal':
                                _this.ctx.globalCompositeOperation = 'source-over';
                                break;
                            case 'additive':
                                _this.ctx.globalCompositeOperation = 'lighter';
                                break;
                            case 'multiply':
                                _this.ctx.globalCompositeOperation = 'multiply';
                                break;
                            case 'screen':
                                _this.ctx.globalCompositeOperation = 'screen';
                                break;
                        }
                        var skin_info = _this.skin_info_map[spine_pose.skin_key];
                        var default_skin_info = _this.skin_info_map['default'];
                        var slot_info = skin_info.slot_info_map[slot_key] || default_skin_info.slot_info_map[slot_key];
                        switch (attachment.type) {
                            case 'region': {
                                var bone = spine_pose.bones[slot.bone_key];
                                var region_attachment = attachment;
                                var region_attachment_info = slot_info.attachment_info_map[attachment_key];
                                ctxApplySpace(_this.ctx, bone.world_space);
                                ctxApplySpace(_this.ctx, region_attachment.local_space);
                                ctxApplyAtlasSitePosition(_this.ctx, site);
                                _this.ctx.scale(region_attachment.width / 2, region_attachment.height / 2);
                                ctxDrawImageMesh(_this.ctx, _this.region_vertex_triangle, _this.region_vertex_position, _this.region_vertex_texcoord, image, site, page);
                                break;
                            }
                            case 'mesh': {
                                var bone = spine_pose.bones[slot.bone_key];
                                var mesh_attachment = attachment;
                                var mesh_attachment_info = slot_info.attachment_info_map[attachment_key];
                                ctxApplySpace(_this.ctx, bone.world_space);
                                ctxApplyAtlasSitePosition(_this.ctx, site);
                                ctxDrawImageMesh(_this.ctx, mesh_attachment_info.vertex_triangle, mesh_attachment_info.vertex_position, mesh_attachment_info.vertex_texcoord, image, site, page);
                                break;
                            }
                            case 'skinnedmesh': {
                                var skinned_mesh_attachment = attachment;
                                var skinned_mesh_attachment_info = slot_info.attachment_info_map[attachment_key];
                                ctxApplyAtlasSitePosition(_this.ctx, site);
                                ctxDrawImageMesh(_this.ctx, skinned_mesh_attachment_info.vertex_triangle, skinned_mesh_attachment_info.vertex_blend_position, skinned_mesh_attachment_info.vertex_texcoord, image, site, page);
                                break;
                            }
                            default:
                                break;
                        }
                        _this.ctx.restore();
                    });
                };
                RenderCtx2D.prototype.drawDebugPose = function (spine_pose, atlas_data) {
                    var render = this;
                    var ctx = render.ctx;
                    render.updatePose(spine_pose, atlas_data);
                    spine_pose.iterateAttachments(function (slot_key, slot, skin_slot, attachment_key, attachment) {
                        if (!attachment) {
                            return;
                        }
                        ctx.save();
                        var skin_info = render.skin_info_map[spine_pose.skin_key];
                        var default_skin_info = render.skin_info_map['default'];
                        var slot_info = skin_info.slot_info_map[slot_key] || default_skin_info.slot_info_map[slot_key];
                        switch (attachment.type) {
                            case 'region': {
                                var bone = spine_pose.bones[slot.bone_key];
                                var site = atlas_data && atlas_data.sites[attachment_key];
                                var region_attachment = attachment;
                                var region_attachment_info = slot_info.attachment_info_map[attachment_key];
                                ctxApplySpace(ctx, bone.world_space);
                                ctxApplySpace(ctx, region_attachment.local_space);
                                ctxApplyAtlasSitePosition(ctx, site);
                                ctx.beginPath();
                                ctx.rect(-region_attachment.width / 2, -region_attachment.height / 2, region_attachment.width, region_attachment.height);
                                ctx.fillStyle = 'rgba(127,127,127,0.25)';
                                ctx.fill();
                                ctx.strokeStyle = 'rgba(127,127,127,1.0)';
                                ctx.stroke();
                                break;
                            }
                            case 'boundingbox': {
                                var bone = spine_pose.bones[slot.bone_key];
                                var bounding_box_attachment = attachment;
                                var bounding_box_attachment_info = slot_info.attachment_info_map[attachment_key];
                                ctxApplySpace(ctx, bone.world_space);
                                ctx.beginPath();
                                var x_1 = 0;
                                bounding_box_attachment.vertices.forEach(function (value, index) {
                                    if (index & 1) {
                                        ctx.lineTo(x_1, value);
                                    }
                                    else {
                                        x_1 = value;
                                    }
                                });
                                ctx.closePath();
                                ctx.strokeStyle = 'yellow';
                                ctx.stroke();
                                break;
                            }
                            case 'mesh': {
                                var bone = spine_pose.bones[slot.bone_key];
                                var site = atlas_data && atlas_data.sites[attachment_key];
                                var mesh_attachment = attachment;
                                var mesh_attachment_info = slot_info.attachment_info_map[attachment_key];
                                ctxApplySpace(ctx, bone.world_space);
                                ctxApplyAtlasSitePosition(ctx, site);
                                ctxDrawMesh(ctx, mesh_attachment_info.vertex_triangle, mesh_attachment_info.vertex_position, 'rgba(127,127,127,1.0)', 'rgba(127,127,127,0.25)');
                                break;
                            }
                            case 'skinnedmesh': {
                                var site = atlas_data && atlas_data.sites[attachment_key];
                                var skinned_mesh_attachment = attachment;
                                var skinned_mesh_attachment_info = slot_info.attachment_info_map[attachment_key];
                                ctxApplyAtlasSitePosition(ctx, site);
                                ctxDrawMesh(ctx, skinned_mesh_attachment_info.vertex_triangle, skinned_mesh_attachment_info.vertex_blend_position, 'rgba(127,127,127,1.0)', 'rgba(127,127,127,0.25)');
                                break;
                            }
                            default:
                                break;
                        }
                        ctx.restore();
                    });
                    spine_pose.iterateBones(function (bone_key, bone) {
                        ctx.save();
                        ctxApplySpace(ctx, bone.world_space);
                        ctxDrawPoint(ctx);
                        ctx.restore();
                    });
                    ctxDrawIkConstraints(ctx, spine_pose.data, spine_pose.bones);
                };
                RenderCtx2D.prototype.drawDebugData = function (spine_pose, atlas_data) {
                    var render = this;
                    var ctx = render.ctx;
                    spine_pose.data.iterateAttachments(spine_pose.skin_key, function (slot_key, slot, skin_slot, attachment_key, attachment) {
                        if (!attachment) {
                            return;
                        }
                        ctx.save();
                        var skin_info = render.skin_info_map[spine_pose.skin_key];
                        var default_skin_info = render.skin_info_map['default'];
                        var slot_info = skin_info.slot_info_map[slot_key] || default_skin_info.slot_info_map[slot_key];
                        switch (attachment.type) {
                            case 'region': {
                                var bone = spine_pose.data.bones[slot.bone_key];
                                var site = atlas_data && atlas_data.sites[attachment_key];
                                var region_attachment = attachment;
                                var region_attachment_info = slot_info.attachment_info_map[attachment_key];
                                ctxApplySpace(ctx, bone.world_space);
                                ctxApplySpace(ctx, region_attachment.local_space);
                                ctxApplyAtlasSitePosition(ctx, site);
                                ctx.beginPath();
                                ctx.rect(-region_attachment.width / 2, -region_attachment.height / 2, region_attachment.width, region_attachment.height);
                                ctx.fillStyle = 'rgba(127,127,127,0.25)';
                                ctx.fill();
                                ctx.strokeStyle = 'rgba(127,127,127,1.0)';
                                ctx.stroke();
                                break;
                            }
                            case 'boundingbox': {
                                var bone = spine_pose.data.bones[slot.bone_key];
                                var bounding_box_attachment = attachment;
                                var bounding_box_attachment_info = slot_info.attachment_info_map[attachment_key];
                                ctxApplySpace(ctx, bone.world_space);
                                ctx.beginPath();
                                var x_2 = 0;
                                bounding_box_attachment.vertices.forEach(function (value, index) {
                                    if (index & 1) {
                                        ctx.lineTo(x_2, value);
                                    }
                                    else {
                                        x_2 = value;
                                    }
                                });
                                ctx.closePath();
                                ctx.strokeStyle = 'yellow';
                                ctx.stroke();
                                break;
                            }
                            case 'mesh': {
                                var bone = spine_pose.data.bones[slot.bone_key];
                                var site = atlas_data && atlas_data.sites[attachment_key];
                                var mesh_attachment = attachment;
                                var mesh_attachment_info = slot_info.attachment_info_map[attachment_key];
                                ctxApplySpace(ctx, bone.world_space);
                                ctxApplyAtlasSitePosition(ctx, site);
                                ctxDrawMesh(ctx, mesh_attachment_info.vertex_triangle, mesh_attachment_info.vertex_position, 'rgba(127,127,127,1.0)', 'rgba(127,127,127,0.25)');
                                break;
                            }
                            case 'skinnedmesh': {
                                var site = atlas_data && atlas_data.sites[attachment_key];
                                var skinned_mesh_attachment = attachment;
                                var skinned_mesh_attachment_info = slot_info.attachment_info_map[attachment_key];
                                ctxApplyAtlasSitePosition(ctx, site);
                                ctxDrawMesh(ctx, skinned_mesh_attachment_info.vertex_triangle, skinned_mesh_attachment_info.vertex_setup_position, 'rgba(127,127,127,1.0)', 'rgba(127,127,127,0.25)');
                                break;
                            }
                            default:
                                break;
                        }
                        ctx.restore();
                    });
                    spine_pose.data.iterateBones(function (bone_key, bone) {
                        ctx.save();
                        ctxApplySpace(ctx, bone.world_space);
                        ctxDrawPoint(ctx);
                        ctx.restore();
                    });
                    ctxDrawIkConstraints(ctx, spine_pose.data, spine_pose.data.bones);
                };
                return RenderCtx2D;
            }());
            exports_6("RenderCtx2D", RenderCtx2D);
        }
    }
});
System.register("dijon/display", ["dijon/application", "dijon/spine/spine", "dijon/spine/atlas", "dijon/spine/render-ctx2d"], function(exports_7, context_7) {
    "use strict";
    var __moduleName = context_7 && context_7.id;
    var application_2, spine, atlas, render_ctx2d_1;
    var Sprite, InvisibleButton, Group, Text, Component, NineSliceImage, Spine;
    return {
        setters:[
            function (application_2_1) {
                application_2 = application_2_1;
            },
            function (spine_3) {
                spine = spine_3;
            },
            function (atlas_1) {
                atlas = atlas_1;
            },
            function (render_ctx2d_1_1) {
                render_ctx2d_1 = render_ctx2d_1_1;
            }],
        execute: function() {
            Sprite = (function (_super) {
                __extends(Sprite, _super);
                function Sprite(x, y, key, frame, name, components) {
                    if (name === void 0) { name = "dSprite"; }
                    if (components === void 0) { components = null; }
                    _super.call(this, application_2.Application.getInstance().game, x, y, key, frame);
                    this.name = name;
                    this._hasComponents = false;
                    this._componentKeys = [];
                    this._components = {};
                    this.addComponents = function (components) {
                        if (typeof components.length === 'undefined')
                            throw new Error('Dijon.UIGroup components must be an array');
                        while (components.length > 0)
                            this.addComponent(components.shift());
                    };
                    if (components)
                        this.addComponents(components);
                }
                Sprite.prototype.update = function () {
                    if (this._hasComponents)
                        this.updateComponents();
                };
                Sprite.prototype.destroy = function () {
                    this.removeAllComponents();
                    _super.prototype.destroy.call(this);
                };
                Sprite.prototype.init = function () { };
                Sprite.prototype.buildInterface = function () { };
                Sprite.prototype._updateComponentKeys = function () {
                    this._componentKeys = Object.keys(this._components);
                    this._hasComponents = this._componentKeys.length > 0;
                };
                Sprite.prototype.addComponent = function (component) {
                    component.setOwner(this);
                    component.init();
                    component.buildInterface();
                    this._components[component.name] = component;
                    this._updateComponentKeys();
                    return component;
                };
                ;
                Sprite.prototype.updateComponents = function () {
                    var _this = this;
                    this._componentKeys.forEach(function (componentName) {
                        _this.updateComponent(componentName);
                    });
                };
                Sprite.prototype.updateComponent = function (componentName) {
                    this._components[componentName].update();
                };
                Sprite.prototype.removeAllComponents = function () {
                    while (this._componentKeys.length > 0) {
                        this.removeComponent(this._componentKeys.pop());
                    }
                };
                Sprite.prototype.removeComponent = function (componentName) {
                    if (typeof this._components[componentName] === 'undefined')
                        return;
                    this._components[componentName].destroy();
                    this._components[componentName] = null;
                    delete this._components[componentName];
                    this._updateComponentKeys();
                };
                Sprite.prototype.flatten = function (delay) {
                    var _this = this;
                    if (delay === void 0) { delay = 0; }
                    if (delay === 0) {
                        this.cacheAsBitmap = true;
                    }
                    else {
                        this.game.time.events.add(delay, function () { _this.cacheAsBitmap = true; }, this);
                    }
                };
                Sprite.prototype.unFlatten = function () {
                    this.cacheAsBitmap = null;
                };
                Object.defineProperty(Sprite.prototype, "resolution", {
                    get: function () {
                        return this.texture.baseTexture.resolution;
                    },
                    enumerable: true,
                    configurable: true
                });
                return Sprite;
            }(Phaser.Sprite));
            exports_7("Sprite", Sprite);
            InvisibleButton = (function (_super) {
                __extends(InvisibleButton, _super);
                function InvisibleButton(x, y, name, w, h) {
                    _super.call(this, x, y, null, null, name);
                    this.init();
                    this.buildInterface();
                    this.setSize(w, h);
                }
                InvisibleButton.prototype.init = function () {
                    this.inputEnabled = true;
                };
                InvisibleButton.prototype.buildInterface = function () {
                    this._addHitRect();
                };
                InvisibleButton.prototype._addHitRect = function () {
                    if (this._hitWidth > 0 && this._hitHeight > 0) {
                        this.hitArea = new Phaser.Rectangle(0, 0, this._hitWidth, this._hitHeight);
                    }
                };
                InvisibleButton.prototype.setSize = function (w, h) {
                    this._hitWidth = w || 0;
                    this._hitHeight = h || 0;
                    this._addHitRect();
                };
                return InvisibleButton;
            }(Sprite));
            exports_7("InvisibleButton", InvisibleButton);
            Group = (function (_super) {
                __extends(Group, _super);
                function Group(x, y, name, addToStage, components, enableBody, physicsBodyType) {
                    if (x === void 0) { x = 0; }
                    if (y === void 0) { y = 0; }
                    if (name === void 0) { name = "dGroup"; }
                    if (addToStage === void 0) { addToStage = false; }
                    if (components === void 0) { components = null; }
                    _super.call(this, application_2.Application.getInstance().game, null, name, addToStage, enableBody, physicsBodyType);
                    this.name = name;
                    this._hasComponents = false;
                    this._componentKeys = [];
                    this._components = {};
                    this._mediator = null;
                    this.addComponents = function (components) {
                        if (typeof components.length === 'undefined')
                            throw new Error('Dijon.UIGroup components must be an array');
                        while (components.length > 0)
                            this.addComponent(components.shift());
                    };
                    this.position.set(x, y);
                    if (!addToStage)
                        this.game.add.existing(this);
                    if (components)
                        this.addComponents(components);
                }
                Group.prototype.update = function () {
                    _super.prototype.update.call(this);
                    if (this._hasComponents)
                        this.updateComponents();
                };
                Group.prototype.destroy = function () {
                    this.removeAllComponents();
                    this.removeMediator();
                    _super.prototype.destroy.call(this);
                };
                Group.prototype.init = function () { };
                Group.prototype.buildInterface = function () { };
                Group.prototype._updateComponentKeys = function () {
                    this._componentKeys = Object.keys(this._components);
                    this._hasComponents = this._componentKeys.length > 0;
                };
                Group.prototype.addComponent = function (component) {
                    component.setOwner(this);
                    component.init();
                    component.buildInterface();
                    this._components[component.name] = component;
                    this._updateComponentKeys();
                    return component;
                };
                Group.prototype.updateComponents = function () {
                    var _this = this;
                    this._componentKeys.forEach(function (componentName) {
                        _this.updateComponent(componentName);
                    });
                };
                Group.prototype.updateComponent = function (componentName) {
                    this._components[componentName].update();
                };
                Group.prototype.removeAllComponents = function () {
                    while (this._componentKeys.length > 0) {
                        this.removeComponent(this._componentKeys.pop());
                    }
                };
                Group.prototype.removeComponent = function (componentName) {
                    if (typeof this._components[componentName] === 'undefined')
                        return;
                    this._components[componentName].destroy();
                    this._components[componentName] = null;
                    delete this._components[componentName];
                    this._updateComponentKeys();
                };
                Group.prototype.flatten = function (delay) {
                    var _this = this;
                    if (delay === void 0) { delay = 0; }
                    if (delay === 0) {
                        this.cacheAsBitmap = true;
                    }
                    else {
                        this.game.time.events.add(delay, function () { _this.cacheAsBitmap = true; }, this);
                    }
                };
                Group.prototype.unFlatten = function () {
                    this.cacheAsBitmap = null;
                };
                Group.prototype.removeMediator = function () {
                    if (!this._mediator) {
                        return;
                    }
                    this._mediator.destroy();
                    this._mediator = null;
                };
                Object.defineProperty(Group.prototype, "addInternal", {
                    get: function () {
                        this.game.add.targetGroup = this;
                        return this.game.add;
                    },
                    enumerable: true,
                    configurable: true
                });
                return Group;
            }(Phaser.Group));
            exports_7("Group", Group);
            Text = (function (_super) {
                __extends(Text, _super);
                function Text(x, y, text, fontName, fontSize, fontColor, fontAlign, wordWrap, width, lineSpacing, settings) {
                    if (text === void 0) { text = ""; }
                    if (fontSize === void 0) { fontSize = Text.DEFAULT_FONT_SIZE; }
                    if (fontColor === void 0) { fontColor = Text.DEFAULT_FONT_COLOR; }
                    if (fontAlign === void 0) { fontAlign = 'left'; }
                    if (wordWrap === void 0) { wordWrap = false; }
                    if (width === void 0) { width = 0; }
                    if (lineSpacing === void 0) { lineSpacing = 0; }
                    if (settings === void 0) { settings = null; }
                    _super.call(this, application_2.Application.getInstance().game, x, y, text, Text._addSettings({
                        font: fontSize + 'px ' + fontName,
                        fill: fontColor,
                        align: fontAlign,
                        wordWrap: wordWrap,
                        wordWrapWidth: width
                    }, settings));
                    this.lineSpacing = lineSpacing;
                    this.onAnimationComplete = new Phaser.Signal();
                    this._canUpdate = false;
                    this._textToAnimate = [];
                    this.stopAnimating = function () {
                        this._canUpdate = false;
                        this._textToAnimate = null;
                        this.game.time.events.remove(this._delayTimer);
                        this.game.time.events.remove(this._repeatTimer);
                    };
                    this.roundPixel = function () {
                        this.position.set(Math.round(this.x), Math.round(this.y));
                    };
                    this.text = text.replace(/'/g, "\'");
                    this._lowercaseText = this.text.toLowerCase();
                    this.setResolution();
                }
                Text.prototype.setText = function (text) {
                    _super.prototype.setText.call(this, text);
                    this._lowercaseText = this.text.toLowerCase();
                    this.setResolution();
                    return this;
                };
                Text.prototype.setResolution = function () {
                    if (!this.game || !this.game.device.cocoonJS) {
                        return;
                    }
                    else if (this.game.device.cocoonJS) {
                        this.resolution = this.game.resolution * this.game.resolution;
                    }
                };
                Text.prototype._startTextAnimation = function () {
                    this._canUpdate = true;
                    this._repeatTimer = this.game.time.events.repeat(this._letterTime * 100, this._textLength, this._updateTextAnimation, this);
                };
                Text.prototype._updateTextAnimation = function () {
                    if (!this._canUpdate || !this._textToAnimate) {
                        return false;
                    }
                    var index = this._textLength - this._textToAnimate.length;
                    this.addColor(this.style.fill, index);
                    this.addColor('rgba(0,0,0,0)', index + 1);
                    this._textToAnimate.shift();
                    if (this._textToAnimate.length === 0) {
                        this.onAnimationComplete.dispatch();
                    }
                };
                Text.prototype.setColor = function (color) {
                    return this.highlightPhrase(this.text, color, false);
                };
                Text.prototype.resetColor = function () {
                    return this.highlightPhrase(this.text, this.style.fill, false);
                };
                Text.prototype.highlightPhrase = function (phrase, color, caseSensitive) {
                    if (caseSensitive === void 0) { caseSensitive = false; }
                    var text = caseSensitive ? this.text : this._lowercaseText;
                    phrase = caseSensitive ? phrase : phrase.toLowerCase();
                    var len = phrase.length;
                    var startIndex = text.indexOf(phrase);
                    var endIndex = startIndex + len;
                    while (startIndex <= endIndex) {
                        this.addColor(color, startIndex);
                        startIndex++;
                    }
                    this.addColor(this.style.fill, endIndex);
                };
                Text.prototype.animate = function (letterTime, delay) {
                    if (letterTime === void 0) { letterTime = 0.1; }
                    if (delay === void 0) { delay = 0; }
                    this.game.time.events.remove(this._delayTimer);
                    this.game.time.events.remove(this._repeatTimer);
                    this._letterTime = letterTime;
                    this._textLength = this.text.length;
                    this._textToAnimate = this.text.split('');
                    var startIndex = 0;
                    var endIndex = this._textLength;
                    while (startIndex <= endIndex) {
                        this.addColor('rgba(0,0,0,0)', startIndex);
                        startIndex++;
                    }
                    this._delayTimer = this.game.time.events.add(delay * Phaser.Timer.SECOND, this._startTextAnimation, this);
                };
                Text._addSettings = function (obj, settings) {
                    if (!settings)
                        return obj;
                    for (var prop in settings) {
                        if (settings.hasOwnProperty(prop)) {
                            obj[prop] = settings[prop];
                        }
                    }
                    return obj;
                };
                Object.defineProperty(Text.prototype, "realHeight", {
                    get: function () {
                        return this.scale.y * this.texture.frame.height / this.game.resolution;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Text.prototype, "realWidth", {
                    get: function () {
                        return this.scale.x * this.texture.frame.width / this.game.resolution;
                    },
                    enumerable: true,
                    configurable: true
                });
                Text.DEFAULT_FONT_SIZE = 12;
                Text.DEFAULT_FONT_COLOR = "#000000";
                Text.DEFAULT_FONT = "Helvetica Neue, Arial";
                Text.GLOBAL_PADDING_X = 0;
                Text.GLOBAL_PADDING_Y = 0;
                return Text;
            }(Phaser.Text));
            exports_7("Text", Text);
            Component = (function () {
                function Component() {
                    this.game = application_2.Application.getInstance().game;
                    this.name = 'Component';
                }
                Component.prototype.setOwner = function (owner) {
                    this.owner = owner;
                };
                Component.prototype.init = function () { };
                Component.prototype.buildInterface = function () { };
                Component.prototype.update = function () { };
                Component.prototype.destroy = function () { };
                return Component;
            }());
            exports_7("Component", Component);
            NineSliceImage = (function (_super) {
                __extends(NineSliceImage, _super);
                function NineSliceImage(x, y, width, height, key, texturePath, fillMiddle, topHeight, rightWidth, bottomHeight, leftWidth) {
                    if (fillMiddle === void 0) { fillMiddle = true; }
                    _super.call(this, x, y);
                    this.key = key;
                    this.texturePath = texturePath;
                    this.fillMiddle = fillMiddle;
                    this.topHeight = topHeight;
                    this.rightWidth = rightWidth;
                    this.bottomHeight = bottomHeight;
                    this.leftWidth = leftWidth;
                    this._interactiveBacking = null;
                    this._inputEnabled = false;
                    this._currentBounds = null;
                    this.__width = Math.round(width);
                    this.__height = Math.round(height);
                    this._build();
                    this.game.time.events.add(10, this._flatten, this);
                }
                NineSliceImage.prototype._build = function () {
                    this._inputLayer = this.add(this.game.add.group());
                    this._displayLayer = this.add(this.game.add.group());
                    this.tl = this._displayLayer.add(this.game.add.image(0, 0, this.key, this.texturePath + '/tl'));
                    this.tr = this._displayLayer.add(this.game.add.image(this.__width, 0, this.key, this.texturePath + '/tr'));
                    this.t = this._displayLayer.add(this.game.add.tileSprite(this.tl.getBounds().width, 0, this.__width - this.tl.getBounds().width - this.tr.getBounds().width, this.topHeight || this.tl.getBounds().height, this.key, this.texturePath + '/t'));
                    this.l = this._displayLayer.add(this.game.add.tileSprite(0, this.tl.getBounds().height, this.leftWidth || this.tl.getBounds().width, 100, this.key, this.texturePath + '/l'));
                    this.bl = this._displayLayer.add(this.game.add.image(0, this.__height, this.key, this.texturePath + '/bl'));
                    this.l.height = this.__height - this.tl.getBounds().height - this.bl.getBounds().height;
                    this.b = this._displayLayer.add(this.game.add.tileSprite(this.bl.getBounds().width, this.__height, 100, this.bottomHeight || this.bl.getBounds().height, this.key, this.texturePath + '/b'));
                    this.br = this._displayLayer.add(this.game.add.image(this.__width, this.__height, this.key, this.texturePath + '/br'));
                    this.b.width = this.__width - this.bl.getBounds().width - this.br.getBounds().width;
                    this.r = this._displayLayer.add(this.game.add.tileSprite(this.__width, this.tr.getBounds().height, this.rightWidth || this.tr.getBounds().width, this.__height - this.tl.getBounds().height - this.br.getBounds().height, this.key, this.texturePath + '/r'));
                    this.tr.setPivot('tr');
                    this.r.setPivot('tr');
                    this.br.setPivot('br');
                    this.b.setPivot('bl');
                    this.bl.setPivot('bl');
                    if (this.fillMiddle) {
                        this.tile = this._displayLayer.add(this.game.add.tileSprite(this.tl.getBounds().width - 1, this.tl.getBounds().height - 1, this.__width - this.tl.getBounds().width - this.tr.getBounds().width + 2, this.__height - this.tl.getBounds().height - this.br.getBounds().height + 4, this.key, this.texturePath + '/tile'));
                        this.sendToBack(this.tile);
                    }
                };
                NineSliceImage.prototype._addInteractiveBacking = function () {
                    var gfx = this.game.add.graphics();
                    gfx.beginFill(0xFF0000, 0);
                    gfx.drawRect(this.x, this.y, this.__width, this.__height);
                    gfx.endFill();
                    this._interactiveBacking = this._inputLayer.add(this.game.add.image(0, 0, gfx.generateTexture()));
                    this._interactiveBacking.inputEnabled = true;
                    this.game.world.remove(gfx);
                };
                NineSliceImage.prototype._setSize = function () {
                    this._unflatten();
                    this.t.width = this.b.width = this.__width - this.tl.getBounds().width - this.tr.getBounds().width;
                    this.r.x = this.tr.x = this.br.x = this.__width;
                    this.l.height = this.r.height = this.__height - this.tr.getBounds().height - this.bl.getBounds().height;
                    this.bl.y = this.b.y = this.br.y = this.__height;
                    if (this.fillMiddle) {
                        this.tile.width = this.__width - this.tr.getBounds().width - this.tl.getBounds().width + 4;
                        this.tile.height = this.__height - this.tl.getBounds().height - this.bl.getBounds().height + 4;
                    }
                    this._interactiveBacking.width = this.__width;
                    this._interactiveBacking.height = this.__height;
                    this.game.time.events.add(10, this._flatten, this);
                };
                NineSliceImage.prototype._addInput = function () {
                    if (!this._interactiveBacking) {
                        this._addInteractiveBacking();
                    }
                };
                NineSliceImage.prototype._removeInput = function () {
                    if (!this._interactiveBacking) {
                        return;
                    }
                    this._interactiveBacking.inputEnabled = false;
                };
                NineSliceImage.prototype._unflatten = function () {
                    this._displayLayer.cacheAsBitmap = null;
                };
                NineSliceImage.prototype._flatten = function () {
                    this._displayLayer.cacheAsBitmap = true;
                };
                Object.defineProperty(NineSliceImage.prototype, "inputEnabled", {
                    set: function (value) {
                        this._inputEnabled = value;
                        if (this._inputEnabled) {
                            this._addInput();
                        }
                        else {
                            this._removeInput();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NineSliceImage.prototype, "events", {
                    get: function () {
                        if (!this._interactiveBacking || !this._interactiveBacking.inputEnabled) {
                            return null;
                        }
                        return this._interactiveBacking.events;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NineSliceImage.prototype, "input", {
                    get: function () {
                        return this._interactiveBacking.input;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NineSliceImage.prototype, "hSize", {
                    get: function () {
                        return this.__width;
                    },
                    set: function (value) {
                        this.__width = value;
                        this._setSize();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NineSliceImage.prototype, "vSize", {
                    get: function () {
                        return this.__height;
                    },
                    set: function (value) {
                        this.__height = value;
                        this._setSize();
                    },
                    enumerable: true,
                    configurable: true
                });
                NineSliceImage.prototype.setSize = function (width, height) {
                    this.__width = width;
                    this.__height = height;
                    this._setSize();
                };
                return NineSliceImage;
            }(Group));
            exports_7("NineSliceImage", NineSliceImage);
            Spine = (function (_super) {
                __extends(Spine, _super);
                function Spine(assetName, x, y, width, height, skin, anim, hOffset, vOffset) {
                    if (assetName === void 0) { assetName = ''; }
                    if (x === void 0) { x = 0; }
                    if (y === void 0) { y = 0; }
                    if (width === void 0) { width = 0; }
                    if (height === void 0) { height = 0; }
                    if (skin === void 0) { skin = 'default'; }
                    if (anim === void 0) { anim = ''; }
                    if (hOffset === void 0) { hOffset = 0; }
                    if (vOffset === void 0) { vOffset = 0; }
                    _super.call(this, x, y, null, null, 'spine_' + assetName);
                    this.assetName = assetName;
                    this.skin = skin;
                    this.anim = anim;
                    this.hOffset = hOffset;
                    this.vOffset = vOffset;
                    this.debug = false;
                    this.onAnimationComplete = new Phaser.Signal();
                    this.img = null;
                    this.frameAnimations = {};
                    this.frameAnimationKeys = [];
                    this._bounds = new PIXI.Rectangle();
                    this._canUpdate = false;
                    this._paused = false;
                    this._speed = 1;
                    this._fps = 0;
                    var json_key = assetName + '.json';
                    var atlas_key = assetName + '.atlas';
                    var image_key = assetName + '.png';
                    if (width === 0) {
                        width = this.game.width;
                    }
                    if (height === 0) {
                        height = this.game.height;
                    }
                    this.sWidth = width;
                    this.sHeight = height;
                    this.spine_data = new spine.Data().load(this.game.cache.getJSON(json_key));
                    this.spineAnimations = this.spine_data.anim_keys;
                    this.atlas_data = new atlas.Data().importAtlasText(this.game.cache.getText(atlas_key));
                    this.images = {};
                    this.images[image_key] = this.game.cache.getImage(image_key);
                    this.spine_pose = new spine.Pose(this.spine_data);
                    this.spine_pose.setSkin(skin);
                    this.animation = anim;
                    this.spine_pose.onComplete.add(this._onAnimationComplete, this);
                    this.bmd = this.game.add.bitmapData(width, height);
                    this.render_ctx2d = new render_ctx2d_1.RenderCtx2D(this.bmd.ctx);
                    this.render_ctx2d.loadData(this.spine_data, this.atlas_data, this.images);
                    this.loadTexture(this.bmd);
                    this.speed = 1;
                    this._canUpdate = true;
                }
                Spine.prototype.destroy = function () {
                    if (this.game.renderType === Phaser.WEBGL) {
                        this.render_webgl.dropData(this.spine_data, this.atlas_data);
                        delete this.render_webgl;
                    }
                    else if (this.game.renderType === Phaser.CANVAS) {
                        this.render_ctx2d.dropData(this.spine_data, this.atlas_data);
                        delete this.render_ctx2d;
                    }
                    else {
                        console.log("TODO");
                    }
                    delete this.spine_data;
                    delete this.spine_pose;
                    delete this.images;
                    _super.prototype.destroy.call(this);
                };
                Spine.prototype.update = function () {
                    if (!this._canUpdate) {
                        return;
                    }
                    if (this._paused) {
                        return;
                    }
                    this.render();
                    this.spine_pose.update(this._fps);
                };
                Spine.prototype.render = function () {
                    this.spine_pose.strike();
                    this.frameAnimationKeys.forEach(this._updateFrameAnimationByName, this);
                    this.bmd.ctx.save();
                    this.bmd.ctx.clearRect(0, 0, this.bmd.width, this.bmd.height);
                    this.bmd.ctx.translate(this.hOffset, this.vOffset + this.bmd.height);
                    this.bmd.ctx.scale(1.0, -1.0);
                    this.bmd.ctx.globalAlpha = this.worldAlpha;
                    this.render_ctx2d.drawPose(this.spine_pose, this.atlas_data);
                    this.bmd.ctx.restore();
                    this.bmd.dirty = true;
                };
                Spine.prototype.debugDraw = function () {
                    if (this.debug) {
                        if (this.game.renderType === Phaser.CANVAS) {
                            this.render_ctx2d.drawDebugPose(this.spine_pose, this.atlas_data);
                        }
                    }
                };
                Spine.prototype.nextAnimation = function () {
                    var currentAnimationName = this.animation;
                    var animationIndex = this.spineAnimations.indexOf(currentAnimationName);
                    animationIndex++;
                    if (animationIndex === this.spineAnimations.length) {
                        animationIndex = 0;
                    }
                    this.animation = this.spineAnimations[animationIndex];
                };
                Spine.prototype._onAnimationComplete = function () {
                    this.onAnimationComplete.dispatch(this.spine_pose.curAnim().name);
                };
                Spine.prototype._updateFrameAnimationByName = function (animName) {
                    this._updateFrameAnimation(this.frameAnimations[animName]);
                };
                Spine.prototype._updateFrameAnimation = function (anim) {
                    var sprite = anim.sprite;
                    var bone = this.spine_pose.bones[anim.boneName];
                    var x = bone.local_space.position.x + anim.props.x, y = bone.local_space.position.y + anim.props.y, angle = bone.local_space.rotation.deg + anim.props.angle, scale = bone.local_space.scale;
                    if (bone.parent_key !== undefined) {
                        while (bone && bone !== undefined && bone.parent_key !== undefined) {
                            bone = this.spine_pose.bones[bone.parent_key];
                            if (bone === undefined) {
                                break;
                            }
                            x += bone.local_space.position.x;
                            y += bone.local_space.position.y;
                            angle += bone.local_space.rotation.deg;
                            scale.x *= bone.local_space.scale.x;
                            scale.y *= bone.local_space.scale.y;
                        }
                    }
                    sprite.x = x;
                    sprite.y = y;
                    sprite.angle = angle;
                    sprite.scale.x = scale.x;
                    sprite.scale.y = scale.y;
                };
                Object.defineProperty(Spine.prototype, "skeleton", {
                    get: function () {
                        return this.spine_data.skeleton;
                    },
                    enumerable: true,
                    configurable: true
                });
                Spine.prototype.addFrameAnimation = function (name, sprite, boneName, props) {
                    this.addChild(sprite);
                    if (props === undefined) {
                        props = {};
                    }
                    if (props.x === undefined) {
                        props.x = 0;
                    }
                    if (props.y === undefined) {
                        props.y = 0;
                    }
                    if (props.angle === undefined) {
                        props.angle = 0;
                    }
                    this.frameAnimations[name] = { sprite: sprite, boneName: boneName, props: props };
                    this.frameAnimationKeys = Object.keys(this.frameAnimations);
                };
                Spine.prototype.getFrameAnimation = function (name) {
                    if (this.frameAnimations[name] === undefined) {
                        return null;
                    }
                    return this.frameAnimations[name].sprite;
                };
                Object.defineProperty(Spine.prototype, "animation", {
                    get: function () {
                        if (this.spine_pose.curAnim() === undefined) {
                            return null;
                        }
                        return this.spine_pose.curAnim().name;
                    },
                    set: function (value) {
                        if (this.animation) {
                            this.spine_pose.setTime(0);
                        }
                        if (this.spine_data.anims[value] === undefined) {
                            console.log('there is no animation:', value);
                            return;
                        }
                        this.spine_pose.setAnim(value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Spine.prototype, "paused", {
                    set: function (value) {
                        this._paused = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Spine.prototype, "speed", {
                    get: function () {
                        return this._speed;
                    },
                    set: function (value) {
                        this._speed = value;
                        this._fps = 1000 / 60 * this._speed;
                    },
                    enumerable: true,
                    configurable: true
                });
                return Spine;
            }(Sprite));
            exports_7("Spine", Spine);
        }
    }
});
System.register("dijon/utils", ["dijon/application", "dijon/display"], function(exports_8, context_8) {
    "use strict";
    var __moduleName = context_8 && context_8.id;
    var application_3, display_1;
    var Util, Logger, Device, Textures, Placeholders, Notifications;
    return {
        setters:[
            function (application_3_1) {
                application_3 = application_3_1;
            },
            function (display_1_1) {
                display_1 = display_1_1;
            }],
        execute: function() {
            Util = (function () {
                function Util() {
                }
                Util.isNumber = function (value) {
                    return (+value === +value);
                };
                return Util;
            }());
            exports_8("Util", Util);
            Logger = (function () {
                function Logger() {
                }
                Logger.log = function (instance) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    if (!Logger.enabled) {
                        return;
                    }
                    if (instance && instance.constructor) {
                        args.unshift(instance.constructor.toString().match(/\w+/g)[1] + ' ::');
                    }
                    return console.log.apply(console, args);
                };
                Logger.enabled = true;
                return Logger;
            }());
            exports_8("Logger", Logger);
            Device = (function () {
                function Device() {
                }
                Object.defineProperty(Device, "mobile", {
                    get: function () {
                        return Device.mobileOS !== Device.UNKNOWN;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Device, "cocoon", {
                    get: function () {
                        return (typeof navigator['isCocoonJS'] !== "undefined");
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Device, "mobileOS", {
                    get: function () {
                        var userAgent = window.navigator.userAgent || window.navigator.vendor || window['opera'];
                        if (userAgent.match(/iPad/i) || userAgent.match(/iPhone/i) || userAgent.match(/iPod/i)) {
                            return Device.IOS;
                        }
                        else if (userAgent.match(/Android/i)) {
                            return Device.ANDROID;
                        }
                        else {
                            return Device.UNKNOWN;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Device, "browser", {
                    get: function () {
                        var ua = navigator.userAgent.toLowerCase();
                        return {
                            firefox: ua.indexOf('firefox') > -1,
                            ie: ua.indexOf('ie') > -1,
                            safari: ua.indexOf('safari') > -1,
                            chrome: ua.indexOf('chrome') > -1,
                        };
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Device, "pixelRatio", {
                    get: function () {
                        return typeof window.devicePixelRatio !== undefined ? window.devicePixelRatio : 1;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Device, "customPixelRatio", {
                    get: function () {
                        return Device.pixelRatio >= 1.5 ? 2 : 1;
                    },
                    enumerable: true,
                    configurable: true
                });
                Device.IOS = 'iOS';
                Device.ANDROID = 'android';
                Device.UNKNOWN = 'unknown';
                return Device;
            }());
            exports_8("Device", Device);
            Textures = (function () {
                function Textures() {
                }
                Object.defineProperty(Textures, "game", {
                    get: function () {
                        return application_3.Application.getInstance().game;
                    },
                    enumerable: true,
                    configurable: true
                });
                Textures.rect = function (width, height, color, alpha, fill, lineColor, lineThickness, lineAlpha, outline) {
                    if (width === void 0) { width = 100; }
                    if (height === void 0) { height = 100; }
                    if (color === void 0) { color = 0xffffff; }
                    if (alpha === void 0) { alpha = 1; }
                    if (fill === void 0) { fill = true; }
                    if (lineColor === void 0) { lineColor = 0xffffff; }
                    if (lineThickness === void 0) { lineThickness = 1; }
                    if (lineAlpha === void 0) { lineAlpha = 1; }
                    if (outline === void 0) { outline = false; }
                    var gfx = Textures.game.add.graphics(0, 0);
                    if (fill) {
                        gfx.beginFill(color, alpha);
                    }
                    if (outline) {
                        gfx.lineWidth = lineThickness;
                        gfx.lineStyle(lineThickness, lineColor, lineAlpha);
                    }
                    gfx.drawRect(0, 0, width, height);
                    var texture = gfx.generateTexture();
                    Textures.game.world.remove(gfx);
                    return texture;
                };
                Textures.roundedRect = function (width, height, radius, color, alpha, fill, lineColor, lineThickness, lineAlpha, outline) {
                    if (width === void 0) { width = 100; }
                    if (height === void 0) { height = 100; }
                    if (radius === void 0) { radius = 10; }
                    if (color === void 0) { color = 0xffffff; }
                    if (alpha === void 0) { alpha = 1; }
                    if (fill === void 0) { fill = true; }
                    if (lineColor === void 0) { lineColor = 0xffffff; }
                    if (lineThickness === void 0) { lineThickness = 1; }
                    if (lineAlpha === void 0) { lineAlpha = 1; }
                    if (outline === void 0) { outline = false; }
                    var gfx = Textures.game.add.graphics(0, 0);
                    if (fill) {
                        gfx.beginFill(color, alpha);
                    }
                    if (outline) {
                        gfx.lineWidth = lineThickness;
                        gfx.lineStyle(lineThickness, lineColor, lineAlpha);
                    }
                    gfx.drawRoundedRect(0, 0, width, height, radius);
                    var texture = gfx.generateTexture();
                    Textures.game.world.remove(gfx);
                    return texture;
                };
                Textures.square = function (size, color, alpha, fill, lineColor, lineThickness, lineAlpha, outline) {
                    if (size === void 0) { size = 100; }
                    if (color === void 0) { color = 0xffffff; }
                    if (alpha === void 0) { alpha = 1; }
                    if (fill === void 0) { fill = true; }
                    if (lineColor === void 0) { lineColor = 0xffffff; }
                    if (lineThickness === void 0) { lineThickness = 1; }
                    if (lineAlpha === void 0) { lineAlpha = 1; }
                    if (outline === void 0) { outline = false; }
                    return Textures.rect(size, size, color, alpha, fill, lineColor, lineThickness, lineAlpha, outline);
                };
                Textures.circle = function (diameter, color, alpha, fill, lineColor, lineThickness, lineAlpha, outline) {
                    if (diameter === void 0) { diameter = 100; }
                    if (color === void 0) { color = 0xffffff; }
                    if (alpha === void 0) { alpha = 1; }
                    if (fill === void 0) { fill = true; }
                    if (lineColor === void 0) { lineColor = 0xffffff; }
                    if (lineThickness === void 0) { lineThickness = 1; }
                    if (lineAlpha === void 0) { lineAlpha = 1; }
                    if (outline === void 0) { outline = false; }
                    var gfx = Textures.game.add.graphics(0, 0);
                    if (fill) {
                        gfx.beginFill(color, alpha);
                    }
                    if (outline) {
                        gfx.lineWidth = lineThickness;
                        gfx.lineStyle(lineThickness, lineColor, lineAlpha);
                    }
                    gfx.drawCircle(0, 0, diameter);
                    var texture = gfx.generateTexture();
                    Textures.game.world.remove(gfx);
                    return texture;
                };
                Textures.ellipse = function (width, height, color, alpha, fill, lineColor, lineThickness, lineAlpha, outline) {
                    if (width === void 0) { width = 50; }
                    if (height === void 0) { height = 100; }
                    if (color === void 0) { color = 0xffffff; }
                    if (alpha === void 0) { alpha = 1; }
                    if (fill === void 0) { fill = true; }
                    if (lineColor === void 0) { lineColor = 0xffffff; }
                    if (lineThickness === void 0) { lineThickness = 1; }
                    if (lineAlpha === void 0) { lineAlpha = 1; }
                    if (outline === void 0) { outline = false; }
                    var gfx = Textures.game.add.graphics(0, 0);
                    if (fill) {
                        gfx.beginFill(color, alpha);
                    }
                    if (outline) {
                        gfx.lineWidth = lineThickness;
                        gfx.lineStyle(lineThickness, lineColor, lineAlpha);
                    }
                    gfx.drawEllipse(0, 0, width * 0.5, height * 0.5);
                    var texture = gfx.generateTexture();
                    Textures.game.world.remove(gfx);
                    return texture;
                };
                return Textures;
            }());
            exports_8("Textures", Textures);
            Placeholders = (function () {
                function Placeholders() {
                }
                Object.defineProperty(Placeholders, "game", {
                    get: function () {
                        return application_3.Application.getInstance().game;
                    },
                    enumerable: true,
                    configurable: true
                });
                Placeholders.image = function (x, y, texture, name) {
                    if (x === void 0) { x = 0; }
                    if (y === void 0) { y = 0; }
                    if (name === void 0) { name = ""; }
                    var imageInstance = new Phaser.Image(Placeholders.game, x, y, texture);
                    imageInstance.name = name;
                    return imageInstance;
                };
                Placeholders.button = function (x, y, width, height, autoSize, text, callback, callbackContext, defaultColor, overColor, downColor) {
                    if (x === void 0) { x = 0; }
                    if (y === void 0) { y = 0; }
                    if (width === void 0) { width = 100; }
                    if (height === void 0) { height = 50; }
                    if (autoSize === void 0) { autoSize = false; }
                    if (text === void 0) { text = 'button'; }
                    if (callback === void 0) { callback = null; }
                    if (callbackContext === void 0) { callbackContext = null; }
                    if (defaultColor === void 0) { defaultColor = 0xffffff; }
                    if (overColor === void 0) { overColor = 0xff0000; }
                    if (downColor === void 0) { downColor = 0x00ff00; }
                    var sprite = new Phaser.Sprite(Placeholders.game, x, y);
                    var textInstance = new display_1.Text(width * 0.5, height * 0.55, " " + text + " ", 'Arial', autoSize ? 25 : height * 0.6, '#000000');
                    textInstance.centerPivot();
                    textInstance.name = "Label";
                    if (autoSize) {
                        width = textInstance.width + 10;
                        height = textInstance.height + 10;
                        textInstance.position.set(width * 0.5, height * 0.55);
                    }
                    var upImage = Placeholders.image(0, 0, Textures.roundedRect(width, height, 10, defaultColor), "Up");
                    var overImage = Placeholders.image(0, 0, Textures.roundedRect(width, height, 10, overColor), "Over");
                    var downImage = Placeholders.image(0, 0, Textures.roundedRect(width, height, 10, downColor), "Down");
                    overImage.visible = false;
                    downImage.visible = false;
                    sprite.addChild(upImage);
                    sprite.addChild(overImage);
                    sprite.addChild(downImage);
                    sprite.addChild(textInstance);
                    sprite.inputEnabled = true;
                    sprite.input.useHandCursor = true;
                    sprite.events.onInputUp.add(function () {
                        downImage.visible = false;
                        overImage.visible = false;
                        upImage.visible = true;
                        if (callback) {
                            callback.call(callbackContext);
                        }
                    });
                    sprite.events.onInputDown.add(function () {
                        downImage.visible = true;
                        overImage.visible = false;
                        upImage.visible = false;
                    });
                    sprite.events.onInputOver.add(function () {
                        downImage.visible = false;
                        overImage.visible = true;
                        upImage.visible = false;
                    });
                    sprite.events.onInputOut.add(function () {
                        downImage.visible = false;
                        overImage.visible = false;
                        upImage.visible = true;
                    });
                    sprite.getBounds = function () {
                        return new PIXI.Rectangle(0, 0, upImage.width, upImage.height);
                    };
                    return sprite;
                };
                return Placeholders;
            }());
            exports_8("Placeholders", Placeholders);
            Notifications = (function () {
                function Notifications() {
                }
                Notifications.ASSET_MANAGER_DATA_SET = 'dijonAssetManagerDataSet';
                Notifications.ASSET_MANAGER_ASSETS_CLEARED = 'dijonAssetManagerAssetsCleared';
                Notifications.MOUSE_LEAVE_GLOBAL = 'mouseOutGlobal';
                Notifications.MOUSE_ENTER_GLOBAL = 'mouseEnterGlobal';
                return Notifications;
            }());
            exports_8("Notifications", Notifications);
        }
    }
});
System.register("dijon/core", ["dijon/application", "dijon/utils", "dijon/display"], function(exports_9, context_9) {
    "use strict";
    var __moduleName = context_9 && context_9.id;
    var application_4, utils_1, display_2;
    var AnalyticsManager, AnalyticsException, AssetManager, AudioManager, Game, GameObjectFactory, SequenceManager, State, StorageManager, TransitionManager;
    return {
        setters:[
            function (application_4_1) {
                application_4 = application_4_1;
            },
            function (utils_1_1) {
                utils_1 = utils_1_1;
            },
            function (display_2_1) {
                display_2 = display_2_1;
            }],
        execute: function() {
            AnalyticsManager = (function () {
                function AnalyticsManager(enabled, category) {
                    if (enabled === void 0) { enabled = true; }
                    if (category === void 0) { category = null; }
                    this.enabled = enabled;
                    this.category = category;
                }
                AnalyticsManager.prototype.trackEvent = function (action, label, value) {
                    if (action === void 0) { action = null; }
                    if (label === void 0) { label = null; }
                    if (value === void 0) { value = null; }
                    if (!this.active || !this.enabled) {
                        return;
                    }
                    if (!action) {
                        throw new AnalyticsException('No action defined');
                    }
                    if (value) {
                        this.ga('send', 'event', this.category, action, label, value);
                    }
                    else if (label) {
                        this.ga('send', 'event', this.category, action, label);
                    }
                    else {
                        this.ga('send', 'event', this.category, action);
                    }
                };
                AnalyticsManager.prototype.trackOmnitureEvent = function (gameName, activity, isGameEvent) {
                    if (!this.enabled) {
                        return;
                    }
                    if (typeof window['trackFlashEvent'] === 'undefined')
                        return false;
                    window['trackFlashEvent'](gameName, activity, isGameEvent);
                };
                Object.defineProperty(AnalyticsManager.prototype, "active", {
                    get: function () {
                        return (window['ga']) ? true : false;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AnalyticsManager.prototype, "ga", {
                    get: function () {
                        return window['ga'];
                    },
                    enumerable: true,
                    configurable: true
                });
                return AnalyticsManager;
            }());
            exports_9("AnalyticsManager", AnalyticsManager);
            AnalyticsException = (function () {
                function AnalyticsException(message) {
                    this.message = message;
                    this.name = 'AnalyticsException';
                }
                return AnalyticsException;
            }());
            exports_9("AnalyticsException", AnalyticsException);
            AssetManager = (function () {
                function AssetManager() {
                    this._data = {};
                    this._baseURL = '';
                    this._pathObj = {};
                    this._assetPath = null;
                    this._dataPath = null;
                    this._spriteSheetPath = null;
                    this._imgPath = null;
                    this._spinePath = null;
                    this._fontPath = null;
                    this._bitmapFontPath = null;
                    this._physicsPath = null;
                    this._audioSpritePath = null;
                    this._soundPath = null;
                    this._soundDecodingModifier = 2;
                    this._res = 1;
                    this._resolution = null;
                    this._loadData = {};
                    this._autoLoadData = {};
                    this._completedLoads = {};
                    this._requiredData = {};
                    this._currentAssetList = null;
                    this._hasFiles = false;
                    this._soundsToDecode = [];
                    this._isLoadingQueue = false;
                    this._fileCompleteProgress = 0;
                    this._maxPercent = 100;
                    this._numSounds = 0;
                    this._soundsDecoded = 0;
                    this._cacheBustVersion = '';
                    this.onLoadStart = new Phaser.Signal();
                    this.onFileStart = new Phaser.Signal();
                    this.onFileComplete = new Phaser.Signal();
                    this.onLoadComplete = new Phaser.Signal();
                    this.onLoadCompleteAndAudioDecoded = new Phaser.Signal();
                    this.onBackgroundLoadStart = new Phaser.Signal();
                    this.onBackgroundFileStart = new Phaser.Signal();
                    this.onBackgroundFileComplete = new Phaser.Signal();
                    this.onBackgroundLoadComplete = new Phaser.Signal();
                    this.onBackgroundLoadCompleteAndAudioDecoded = new Phaser.Signal();
                    this._init();
                }
                AssetManager.prototype._init = function () {
                    this.app = application_4.Application.getInstance();
                    this.game = this.app.game;
                    this.baseURL = '';
                    this.paths = null;
                    this.resolution = this.game.resolution;
                };
                AssetManager.prototype._parseAssetList = function (key, list) {
                    var _this = this;
                    this._autoLoadData[key] = list.autoload;
                    this._requiredData[key] = list.required;
                    this._loadData[key] = [];
                    list.assets.forEach(function (asset) {
                        _this._loadData[key].push(asset);
                    });
                };
                AssetManager.prototype._loadAssets = function (id) {
                    var assets = this._loadData[id], i;
                    for (i = 0; i < assets.length; i++) {
                        this._loadAsset(assets[i]);
                    }
                };
                AssetManager.prototype._backgroundLoadStart = function () {
                    this.onBackgroundLoadStart.dispatch();
                };
                AssetManager.prototype._backgroundFileComplete = function (progress, id, fileIndex, totalFiles) {
                    if (this.game.cache.checkKey(Phaser.Cache.IMAGE, id)) {
                        this._setBaseTextureResolution(this.game.cache.getPixiBaseTexture(id));
                    }
                    this._fileCompleteProgress = progress;
                    this.onBackgroundFileComplete.dispatch(progress, id, fileIndex, totalFiles);
                };
                AssetManager.prototype._backgroundLoadComplete = function () {
                    this.game.load.onFileComplete.remove(this._backgroundFileComplete, this);
                    this.onBackgroundLoadComplete.dispatch();
                    this._checkSoundDecoding(this.onBackgroundLoadCompleteAndAudioDecoded);
                };
                AssetManager.prototype._gameLoadStart = function () {
                    this.onLoadStart.dispatch();
                };
                AssetManager.prototype._gameFileStart = function () {
                    this.onFileStart.dispatch();
                };
                AssetManager.prototype._gameFileComplete = function (progress, id, fileIndex, totalFiles) {
                    if (this.game.cache.checkKey(Phaser.Cache.IMAGE, id)) {
                        this._setBaseTextureResolution(this.game.cache.getPixiBaseTexture(id));
                    }
                    this._fileCompleteProgress = progress;
                    this.onFileComplete.dispatch(this.getLoadProgress(), id, fileIndex, totalFiles);
                };
                AssetManager.prototype._setBaseTextureResolution = function (texture) {
                    if (texture && texture.source.src.indexOf('@' + this.resolution + 'x') >= 0) {
                        texture.resolution = this.resolution;
                    }
                };
                ;
                AssetManager.prototype._gameLoadComplete = function () {
                    this._completedLoads[this._currentAssetList] = true;
                    this.onLoadComplete.dispatch();
                    this.game.load.onFileStart.remove(this._gameFileStart, this);
                    this.game.load.onFileComplete.remove(this._gameFileComplete, this);
                    this._checkSoundDecoding(this.onLoadCompleteAndAudioDecoded);
                };
                AssetManager.prototype._checkSoundDecoding = function (eventToDispatch) {
                    var sound, i, isAudioSprite;
                    if (this._soundsToDecode && this._soundsToDecode.length > 0) {
                        for (i = 0; i < this._soundsToDecode.length; i++) {
                            isAudioSprite = this._soundsToDecode[i].isAudioSprite;
                            sound = this.game.add.sound(this._soundsToDecode[i].url);
                            sound.__isAudioSprite = isAudioSprite;
                            sound.eventToDispatch = eventToDispatch;
                            sound.onDecoded.addOnce(this._onSoundDecoded, this);
                        }
                    }
                    else {
                        eventToDispatch.dispatch();
                    }
                };
                AssetManager.prototype._onSoundDecoded = function (sound) {
                    var soundIndex = this._soundsToDecode.indexOf(sound.key);
                    this._soundsToDecode.splice(soundIndex, 1);
                    if (typeof this.game.audio !== 'undefined' && typeof this.game.audio.addAudio !== 'undefined') {
                        if (sound.__isAudioSprite)
                            this.game.add.audioSprite(sound.key);
                        this.game.audio.addAudio(sound.key, sound.__isAudioSprite);
                    }
                    this._soundsDecoded++;
                    this._maxPercent = (100 - (this._numSounds * this.soundDecodingModifier) + (this._soundsDecoded * this.soundDecodingModifier));
                    this._gameFileComplete(100);
                    if (this._soundsToDecode.length === 0) {
                        sound.eventToDispatch.dispatch();
                    }
                };
                AssetManager.prototype._getAssetKey = function (fileName) {
                    if (fileName.indexOf('.') < 0)
                        return fileName;
                    var ext = fileName.split('.');
                    ext.pop();
                    return ext.join('');
                };
                AssetManager.prototype._getExtension = function (fileName) {
                    return fileName.split('.').pop();
                };
                AssetManager.prototype._getResolution = function (res) {
                    var result = '';
                    if (typeof res === 'string') {
                        res = parseFloat(res);
                    }
                    if (res === undefined) {
                        res = this.resolution;
                    }
                    if (res > 1.5) {
                        result = AssetManager.RESOLUTION_2X;
                    }
                    return result;
                };
                AssetManager.prototype._loadAsset = function (asset) {
                    var type = asset.type, url = asset.url || asset.key;
                    switch (type) {
                        case AssetManager.ASSET_LIST:
                            this._loadAssets(asset.id);
                            break;
                        case AssetManager.SOUND:
                            this.loadSound(url, asset.extensions);
                            break;
                        case AssetManager.AUDIO_SPRITE:
                            this.loadAudioSprite(url, asset.extensions);
                            break;
                        case AssetManager.IMAGE:
                            this.loadImage(url, this._getResolution(asset.resolution));
                            break;
                        case AssetManager.ATLAS:
                            this.loadAtlas(url, this._getResolution(asset.resolution));
                            break;
                        case AssetManager.TEXT:
                            this.loadText(url);
                            break;
                        case AssetManager.JSON:
                            this.loadJSON(url);
                            break;
                        case AssetManager.TILEMAP:
                            this.loadTilemap(url);
                            break;
                        case AssetManager.TILEDMAP:
                            this.loadTiledmap(url, asset.assets);
                            break;
                        case AssetManager.PHYSICS:
                            this.loadPhysics(url);
                            break;
                        case AssetManager.SPINE:
                            this.loadSpine(url, this._getResolution(asset.resolution));
                            break;
                    }
                };
                AssetManager.prototype._parseData = function () {
                    var key;
                    for (key in this._data) {
                        this._parseAssetList(key, this._data[key]);
                    }
                };
                AssetManager.prototype._getCacheBustedUrl = function (url) {
                    if (this._cacheBustVersion === undefined || this._cacheBustVersion === '') {
                        return url;
                    }
                    return url + '?v=' + this._cacheBustVersion;
                };
                AssetManager.prototype.loadText = function (url) {
                    var key = this._getAssetKey(url);
                    return this.game.load.text(key, this._getCacheBustedUrl(this._dataPath + '/' + url));
                };
                AssetManager.prototype.loadJSON = function (key) {
                    key = this._getAssetKey(key);
                    return this.game.load.json(key, this._getCacheBustedUrl(this._dataPath + '/' + key + '.json'));
                };
                AssetManager.prototype.loadTilemap = function (key) {
                    key = this._getAssetKey(key);
                    return this.game.load.tilemap(key, this._getCacheBustedUrl(this._dataPath + '/tilemap/' + key + '.json'), null, Phaser.Tilemap.TILED_JSON);
                };
                AssetManager.prototype.loadTiledmap = function (key, assets) {
                    var _this = this;
                    if (Phaser.Plugin['Tiled'] === undefined) {
                        console.log('tiledmap requires the phaser-tiled plugin from https://github.com/englercj/phaser-tiled');
                        return null;
                    }
                    var cacheKey = Phaser.Plugin['Tiled'].utils.cacheKey;
                    this.game.load['tiledmap'](cacheKey(key, 'tiledmap'), this._getCacheBustedUrl(this._dataPath + '/tilemap/' + key + '.json'), null, Phaser.Tilemap.TILED_JSON);
                    assets.forEach(function (asset) {
                        switch (asset.type) {
                            case AssetManager.TILEDMAP_TILESET:
                            case AssetManager.TILEDMAP_LAYER:
                                _this.loadTiledmapImage(key, asset.type, asset);
                                break;
                        }
                    });
                };
                AssetManager.prototype.loadTiledmapImage = function (key, tilesetImageType, asset) {
                    var cacheKey = Phaser.Plugin['Tiled'].utils.cacheKey;
                    var resolution = '';
                    var newKey = this._getAssetKey(asset.url);
                    var cKey = cacheKey(key, 'tileset', newKey);
                    if (typeof asset.resolution !== 'string') {
                        resolution = this._getResolution(asset.resolution);
                    }
                    var url = this._getAssetKey(newKey + resolution + '.' + this._getExtension(asset.url));
                    console.log(asset.url, cKey);
                    this.game.load.image(cKey, this._getCacheBustedUrl(this._spriteSheetPath + '/' + url + '.png'));
                };
                AssetManager.prototype.loadPhysics = function (key) {
                    key = this._getAssetKey(key);
                    return this.game.load.physics(key, this._getCacheBustedUrl(this._physicsPath + '/' + key + '.json'));
                };
                AssetManager.prototype.loadAtlas = function (url, resolution) {
                    if (typeof resolution !== 'string') {
                        resolution = this._getResolution(resolution);
                    }
                    if (this.game.cache.checkImageKey(url)) {
                        return url;
                    }
                    return this.game.load.atlasJSONHash(url, this._getCacheBustedUrl(this._spriteSheetPath + '/' + url + resolution + '.png'), this._getCacheBustedUrl(this._spriteSheetPath + '/' + url + resolution + '.json'));
                };
                AssetManager.prototype.loadImage = function (url, resolution) {
                    if (typeof resolution !== 'string') {
                        resolution = this._getResolution(resolution);
                    }
                    var key = this._getAssetKey(url);
                    if (this.game.cache.checkImageKey(key)) {
                        return key;
                    }
                    url = key + resolution + '.' + this._getExtension(url);
                    return this.game.load.image(key, this._getCacheBustedUrl(this._imgPath + '/' + url));
                };
                AssetManager.prototype.loadSpine = function (url, resolution) {
                    if (typeof resolution !== 'string') {
                        resolution = this._getResolution(resolution);
                    }
                    var key = this._getAssetKey(url);
                    if (this.game.cache.checkImageKey(key)) {
                        return key;
                    }
                    url = key + resolution + '.png';
                    var jsonUrl = key + '.json';
                    var atlasUrl = key + '.atlas';
                    this.game.load.json(key + '.json', this._getCacheBustedUrl(this._spinePath + '/' + jsonUrl));
                    this.game.load.text(key + '.atlas', this._getCacheBustedUrl(this._spinePath + '/' + atlasUrl));
                    this.game.load.image(key + '.png', this._getCacheBustedUrl(this._spinePath + '/' + url));
                };
                AssetManager.prototype.loadBitmapFont = function (url, resolution) {
                    if (typeof resolution !== 'string') {
                        resolution = this._getResolution(resolution);
                    }
                    this.game.load.bitmapFont(url, this._getCacheBustedUrl(this._bitmapFontPath + '/' + url + resolution + '.png'), this._getCacheBustedUrl(this._bitmapFontPath + '/' + url + resolution + '.json'));
                };
                AssetManager.prototype.loadAudio = function (url, exts, isAudioSprite) {
                    var type, path;
                    if (this.game.cache.checkSoundKey(url) && this.game.cache.getSound(url).isDecoded) {
                        return;
                    }
                    if (typeof type === 'undefined') {
                        type = 'sound';
                    }
                    if (exts.indexOf(',') >= 0) {
                        exts = exts.split(',');
                    }
                    if (this.game.device.iOS && exts.indexOf('m4a') === -1) {
                        exts.unshift('m4a');
                    }
                    if (typeof exts === 'object') {
                        path = [];
                        for (var i = 0; i < exts.length; i++) {
                            path.push(this._getCacheBustedUrl((isAudioSprite ? this._audioSpritePath : this._soundPath) + '/' + url + '.' + exts[i]));
                        }
                    }
                    else {
                        path = this._getCacheBustedUrl((isAudioSprite ? this._audioSpritePath : this._soundPath) + '/' + type + '/' + url + '.' + exts);
                    }
                    if (isAudioSprite) {
                        this.game.load.audiosprite(url, path, this._audioSpritePath + '/' + url + '.json');
                    }
                    else {
                        this.game.load.audio(url, path);
                    }
                    this._soundsToDecode.push({
                        url: url,
                        isAudioSprite: isAudioSprite
                    });
                };
                AssetManager.prototype.loadSound = function (url, exts) {
                    return this.loadAudio(url, exts, false);
                };
                AssetManager.prototype.loadAudioSprite = function (url, exts) {
                    return this.loadAudio(url, exts, true);
                };
                AssetManager.prototype.loadAssets = function (id, background) {
                    if (background === void 0) { background = false; }
                    this._currentAssetList = id;
                    this.game.load.onFileComplete.remove(this._backgroundFileComplete, this);
                    this.game.load.onFileComplete.remove(this._gameFileComplete, this);
                    this._hasFiles = false;
                    this._soundsToDecode = [];
                    if (typeof this._data === 'undefined') {
                        return;
                    }
                    if (typeof this._data[id] === 'undefined' || this._data[id].length < 1) {
                        return console.log('no preload data registered for ', id);
                    }
                    this._loadAssets(id);
                    this._hasFiles = this.game.load.totalQueuedFiles() > 0;
                    if (background) {
                        this.game.load.onLoadStart.addOnce(this._backgroundLoadStart, this);
                        this.game.load.onFileComplete.add(this._backgroundFileComplete, this);
                        this.game.load.onLoadComplete.addOnce(this._backgroundLoadComplete, this);
                    }
                    else {
                        this.game.load.onLoadStart.addOnce(this._gameLoadStart, this);
                        this.game.load.onFileStart.add(this._gameFileStart, this);
                        this.game.load.onFileComplete.add(this._gameFileComplete, this);
                        this.game.load.onLoadComplete.addOnce(this._gameLoadComplete, this);
                    }
                    if (!this._hasFiles) {
                        this._gameLoadStart();
                        this._gameFileComplete(100);
                        this._gameLoadComplete();
                        return;
                    }
                    this._numSounds = this._soundsToDecode.length;
                    this._soundsDecoded = 0;
                    this._maxPercent = 100 - (this._numSounds * this.soundDecodingModifier);
                    if (background) {
                        this.game.load.start();
                    }
                };
                AssetManager.prototype.loadQueue = function () {
                    if (this._isLoadingQueue) {
                        return;
                    }
                    if (typeof this._data === 'undefined') {
                        return console.log('no preload queue to load');
                    }
                    var assets, state, i;
                    for (state in this._data) {
                        if (this._autoLoadData[state]) {
                            assets = this._data[state];
                            for (i = 0; i < assets.length; i++) {
                                this._loadAsset(assets[i]);
                            }
                        }
                    }
                    this.game.load.start();
                    this._isLoadingQueue = true;
                    this.game.load.onLoadStart.addOnce(this._backgroundLoadStart, this);
                    this.game.load.onFileComplete.add(this._backgroundFileComplete, this);
                    this.game.load.onLoadComplete.addOnce(this._backgroundLoadComplete, this);
                };
                AssetManager.prototype.getLoadProgress = function () {
                    var adjustedProgress = this._fileCompleteProgress * this._maxPercent / 100;
                    return adjustedProgress;
                };
                AssetManager.prototype.allSoundsDecoded = function () {
                    return this._soundsToDecode.length === 0;
                };
                AssetManager.prototype.setData = function (data) {
                    this._data = data;
                    this._loadData = {};
                    this._parseData();
                    this.sendNotification(utils_1.Notifications.ASSET_MANAGER_DATA_SET, this._data);
                };
                AssetManager.prototype.clearAssets = function (id, clearAudio, clearAtlasses, clearImages, clearText, clearJSON) {
                    if (clearAudio === void 0) { clearAudio = true; }
                    if (clearAtlasses === void 0) { clearAtlasses = true; }
                    if (clearImages === void 0) { clearImages = true; }
                    if (clearText === void 0) { clearText = true; }
                    if (clearJSON === void 0) { clearJSON = true; }
                    var assets = this._data[id];
                    console.log('clearing: ', id);
                    if (!assets || typeof assets === 'undefined' || assets.length < 1) {
                        return console.log('no assets', assets);
                    }
                    for (var i = 0; i < assets.length; i++) {
                        this.clearAsset(assets[i], clearAudio, clearAtlasses, clearImages, clearText, clearJSON);
                    }
                    this._completedLoads[id] = false;
                    this.sendNotification(utils_1.Notifications.ASSET_MANAGER_ASSETS_CLEARED, id);
                };
                AssetManager.prototype.clearAsset = function (asset, clearAudio, clearAtlasses, clearImages, clearText, clearJSON) {
                    if (clearAudio === void 0) { clearAudio = true; }
                    if (clearAtlasses === void 0) { clearAtlasses = true; }
                    if (clearImages === void 0) { clearImages = true; }
                    if (clearText === void 0) { clearText = true; }
                    if (clearJSON === void 0) { clearJSON = true; }
                    var type = asset.type, url = asset.url, required = asset.required;
                    if (required) {
                        console.log('the ' + type + ' asset: ' + url + ' is required and will not be cleared');
                        return;
                    }
                    switch (type) {
                        case AssetManager.AUDIO:
                            if (clearAudio) {
                                this.game.sound.removeByKey(url);
                                this.game.cache.removeSound(url);
                            }
                            break;
                        case AssetManager.IMAGE:
                            if (clearImages) {
                                this.game.cache.removeImage(url);
                                PIXI.BaseTextureCache[url].destroy();
                            }
                            break;
                        case AssetManager.ATLAS:
                            if (clearAtlasses) {
                                this.game.cache.removeImage(url);
                                PIXI.BaseTextureCache[url].destroy();
                                this.game.cache.removeXML(url);
                            }
                            break;
                        case AssetManager.TEXT:
                            if (clearText) {
                                this.game.cache.removeText(url);
                            }
                            break;
                        case AssetManager.JSON:
                            if (clearJSON) {
                                this.game.cache.removeJSON(url);
                            }
                            break;
                        case AssetManager.PHYSICS:
                            if (clearJSON) {
                                this.game.cache.removePhysics(url);
                            }
                            break;
                    }
                };
                AssetManager.prototype.hasLoadedAssets = function (id) {
                    return this._completedLoads[id] === true;
                };
                AssetManager.prototype.sendNotification = function (notificationName, notificationBody) {
                    return this.app.sendNotification(notificationName, notificationBody);
                };
                Object.defineProperty(AssetManager.prototype, "baseURL", {
                    set: function (baseURL) {
                        if (baseURL && baseURL !== undefined && baseURL.charAt(baseURL.length - 1) !== '/')
                            baseURL += '/';
                        this._baseURL = baseURL;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AssetManager.prototype, "paths", {
                    set: function (pathObj) {
                        this._pathObj = pathObj || {};
                        this._assetPath = this._baseURL + (this._pathObj.assetPath || 'assets');
                        this._dataPath = this._baseURL + (this._pathObj.dataPath || 'assets/data');
                        this._spriteSheetPath = this._baseURL + (this._pathObj.spritesheetPath || 'assets/img/spritesheets');
                        this._imgPath = this._baseURL + (this._pathObj.imgPath || 'assets/img');
                        this._spinePath = this._baseURL + (this._pathObj.spinePath || 'assets/spine');
                        this._fontPath = this._baseURL + (this._pathObj.fontPath || 'assets/fonts');
                        this._bitmapFontPath = this._baseURL + (this._pathObj.bitmapFontPath || 'assets/fonts/bitmap');
                        this._audioSpritePath = this._baseURL + (this._pathObj.audioSpritePath || 'assets/audio/sprite');
                        this._soundPath = this._baseURL + (this._pathObj.soundPath || 'assets/audio/sound');
                        this._physicsPath = this._baseURL + (this._pathObj.physicsPath || 'assets/data/physics');
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AssetManager.prototype, "resolution", {
                    get: function () {
                        return this._res;
                    },
                    set: function (res) {
                        if (res === undefined) {
                            res = this.game.resolution;
                        }
                        this._res = res;
                        this._resolution = '';
                        if (this._res > 1.5) {
                            this._resolution = AssetManager.RESOLUTION_2X;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AssetManager.prototype, "soundDecodingModifier", {
                    get: function () {
                        return this._soundDecodingModifier;
                    },
                    set: function (num) {
                        if (num === undefined) {
                            num = 2;
                        }
                        this._soundDecodingModifier = num;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AssetManager.prototype, "cacheBustVersion", {
                    set: function (version) {
                        this._cacheBustVersion = '' + version;
                    },
                    enumerable: true,
                    configurable: true
                });
                AssetManager.AUDIO = 'audio';
                AssetManager.SOUND = 'sound';
                AssetManager.AUDIO_SPRITE = 'audioSprite';
                AssetManager.IMAGE = 'image';
                AssetManager.ATLAS = 'atlas';
                AssetManager.TEXT = 'text';
                AssetManager.JSON = 'json';
                AssetManager.TILEMAP = 'tilemap';
                AssetManager.TILEDMAP = 'tiledmap';
                AssetManager.TILEDMAP_TILESET = 'tileset';
                AssetManager.TILEDMAP_LAYER = 'layer';
                AssetManager.PHYSICS = 'physics';
                AssetManager.SPINE = 'spine';
                AssetManager.ASSET_LIST = 'assetList';
                AssetManager.RESOLUTION_2X = "@2x";
                AssetManager.RESOLUTION_3X = "@3x";
                return AssetManager;
            }());
            exports_9("AssetManager", AssetManager);
            AudioManager = (function () {
                function AudioManager() {
                    this._defaultVolume = 1;
                    this._sprites = {};
                    this._sounds = {};
                    this._markerLookup = {};
                    this.game = application_4.Application.getInstance().game;
                }
                AudioManager.prototype._addAudio = function (key, isAudioSprite) {
                    if (isAudioSprite === void 0) { isAudioSprite = false; }
                    if (isAudioSprite === true) {
                        return this._parseAudioSprite(key, this.game.add.audioSprite(key));
                    }
                    else {
                        return this._allowMultiple(this.game.add.sound(key));
                    }
                };
                AudioManager.prototype._parseAudioSprite = function (key, audioSprite) {
                    for (var soundKey in audioSprite.sounds) {
                        this._allowMultiple(audioSprite.sounds[soundKey]);
                        this._markerLookup[soundKey] = key;
                    }
                    return audioSprite;
                };
                AudioManager.prototype._allowMultiple = function (sound) {
                    sound.allowMultiple = true;
                    return sound;
                };
                AudioManager.prototype._getKeyFromMarkerName = function (marker) {
                    if (typeof this._markerLookup[marker] !== 'undefined') {
                        return this._markerLookup[marker];
                    }
                    for (var key in this._sprites) {
                        if (typeof this._sprites[key].sounds[marker] !== 'undefined') {
                            this._markerLookup[marker] = key;
                            return key;
                        }
                    }
                    return false;
                };
                AudioManager.prototype._playSpriteMarker = function (key, marker, volume, loop, forceRestart) {
                    if (loop === void 0) { loop = false; }
                    if (forceRestart === void 0) { forceRestart = true; }
                    if (typeof volume !== 'undefined') {
                        if (typeof volume === 'string') {
                            if (volume.indexOf('+') >= 0 || volume.indexOf('-') >= 0) {
                                volume = this._defaultVolume + parseFloat(volume);
                            }
                            else {
                                volume = parseFloat(volume);
                            }
                        }
                    }
                    else {
                        volume = this._defaultVolume;
                    }
                    loop = loop || false;
                    forceRestart = forceRestart === false ? false : true;
                    return this._sprites[key].play(marker, volume);
                };
                AudioManager.prototype._stopSpriteMarker = function (key, marker) {
                    if (typeof this._sprites === 'undefined' || typeof this._sprites[key] === 'undefined') {
                        return false;
                    }
                    return this._sprites[key].stop(marker);
                };
                AudioManager.prototype._stopSound = function (sound) {
                    return sound.stop();
                };
                AudioManager.prototype.addAudio = function (key, isAudioSprite) {
                    if (isAudioSprite === void 0) { isAudioSprite = false; }
                    if (isAudioSprite === true) {
                        return this.addAudioSprite(key);
                    }
                    return this.addSound(key);
                };
                AudioManager.prototype.addSound = function (key) {
                    if (typeof this._sounds[key] !== 'undefined') {
                        return this._sounds[key];
                    }
                    this._sounds[key] = this.game.add.audio(key);
                    this._sounds[key].allowMultiple = true;
                    return this._sounds[key];
                };
                AudioManager.prototype.addAudioSprite = function (key) {
                    if (typeof this._sprites[key] !== 'undefined') {
                        return this._sprites[key];
                    }
                    this._sprites[key] = this._addAudio(key, true);
                    return this._sprites[key];
                };
                AudioManager.prototype.playAudio = function (marker, volume, loop, forceRestart) {
                    if (loop === void 0) { loop = false; }
                    if (forceRestart === void 0) { forceRestart = true; }
                    if (this._getKeyFromMarkerName(marker)) {
                        return this.playSpriteMarker(marker, volume, loop, forceRestart);
                    }
                    return this.playSound(marker, volume, loop, forceRestart);
                };
                AudioManager.prototype.playDelayedAudio = function (delay, marker, volume, loop, forceRestart) {
                    if (loop === void 0) { loop = false; }
                    if (forceRestart === void 0) { forceRestart = true; }
                    if (this._getKeyFromMarkerName(marker)) {
                        return this.playDelayedSpriteMarker(delay, marker, volume, loop, forceRestart);
                    }
                    return this.playDelayedSound(delay, marker, volume, loop, forceRestart);
                };
                AudioManager.prototype.playSound = function (key, volume, loop, forceRestart) {
                    if (loop === void 0) { loop = false; }
                    if (forceRestart === void 0) { forceRestart = true; }
                    if (typeof this._sounds[key] === 'undefined') {
                        return null;
                    }
                    volume = typeof volume === 'undefined' ? this._defaultVolume : volume;
                    return this._sounds[key].play("", 0, volume, loop, forceRestart);
                };
                AudioManager.prototype.playSpriteMarker = function (marker, volume, loop, forceRestart) {
                    if (loop === void 0) { loop = false; }
                    if (forceRestart === void 0) { forceRestart = true; }
                    var key = this._getKeyFromMarkerName(marker);
                    if (!key) {
                        console.log('marker not found', marker);
                        return null;
                    }
                    return this._playSpriteMarker(key, marker, volume, loop, forceRestart);
                };
                AudioManager.prototype.playDelayedSound = function (delay, key, volume, loop, forceRestart) {
                    if (loop === void 0) { loop = false; }
                    if (forceRestart === void 0) { forceRestart = true; }
                    this.game.time.events.add(delay, this.playSound, this, key, volume, loop, forceRestart);
                    return null;
                };
                AudioManager.prototype.playDelayedSpriteMarker = function (delay, marker, volume, loop, forceRestart) {
                    if (loop === void 0) { loop = false; }
                    if (forceRestart === void 0) { forceRestart = true; }
                    this.game.time.events.add(delay, this.playSpriteMarker, this, marker, volume, loop, forceRestart);
                    return null;
                };
                AudioManager.prototype.stopAudio = function (marker) {
                    if (this._getKeyFromMarkerName(marker)) {
                        return this.stopSpriteMarker(marker);
                    }
                    return this.stopSound(marker);
                };
                AudioManager.prototype.stopSound = function (key) {
                    if (typeof this._sounds === 'undefined' || typeof this._sounds[key] === 'undefined') {
                        return;
                    }
                    return this._sounds[key].stop();
                };
                AudioManager.prototype.stopSpriteMarker = function (marker) {
                    var key = this._getKeyFromMarkerName(marker);
                    if (!key) {
                        console.log('marker not found', marker);
                        return;
                    }
                    this._stopSpriteMarker(key, marker);
                };
                AudioManager.prototype.removeSound = function (key) {
                    if (typeof this._sounds === 'undefined' || typeof this._sounds[key] === 'undefined') {
                        return false;
                    }
                    if (this._sounds[key]) {
                        this.stopSound(key);
                        this._sounds[key].destroy();
                        delete this._sounds[key];
                    }
                };
                AudioManager.prototype.removeSprite = function (key) {
                    if (typeof this._sprites === 'undefined' || typeof this._sprites[key] === 'undefined') {
                        return;
                    }
                    this.stopSpriteMarker(key);
                    this._sprites[key] = null;
                    delete this._sprites[key];
                };
                AudioManager.prototype.fade = function (sound, volume, time, stop) {
                    if (stop === void 0) { stop = false; }
                    if (!sound)
                        return;
                    if (sound.fadeTween && sound.fadeTween)
                        this.game.tweens.remove(sound.fadeTween);
                    sound.fadeTween = this.game.add.tween(sound).to({
                        volume: volume
                    }, time || 300, Phaser.Easing.Linear.None);
                    if (stop === true)
                        sound.fadeTween.onComplete.addOnce(function () { this._stopSound(sound); }, this);
                    return sound.fadeTween.start();
                };
                Object.defineProperty(AudioManager.prototype, "defaultVolume", {
                    get: function () {
                        return this._defaultVolume;
                    },
                    set: function (vol) {
                        this._defaultVolume = vol;
                    },
                    enumerable: true,
                    configurable: true
                });
                return AudioManager;
            }());
            exports_9("AudioManager", AudioManager);
            Game = (function (_super) {
                __extends(Game, _super);
                function Game(config) {
                    _super.call(this, config);
                    this.onWorldInputDisabled = new Phaser.Signal();
                    this.onWorldInputEnabled = new Phaser.Signal();
                }
                Game.prototype.boot = function () {
                    _super.prototype.boot.call(this);
                    this.app = application_4.Application.getInstance();
                    this.asset = new AssetManager();
                    this.sequence = new SequenceManager();
                    this.transition = new TransitionManager();
                    this.storage = new StorageManager();
                    this.audio = new AudioManager();
                    this.analytics = new AnalyticsManager(this.config.analytics);
                    this.add = null;
                    this.add = new GameObjectFactory(this);
                    this.addLayers();
                    this.addMouseCallbacks();
                    this.setFactoryDefaultLayer(this.gameLayer);
                };
                Game.prototype.addPlugins = function () {
                    var _this = this;
                    if (this.config.plugins && this.config.plugins.length > 0) {
                        this.config.plugins.forEach(function (pluginName) {
                            if (typeof Phaser.Plugin[pluginName] === 'function') {
                                _this.add.plugin(Phaser.Plugin[pluginName]);
                            }
                        });
                    }
                };
                Game.prototype.setFactoryDefaultLayer = function (newLayer) {
                    this.add.setDefaultLayer(newLayer || this.world);
                };
                Game.prototype.addLayers = function () {
                    this.backgroundLayer = this.add.dGroup(0, 0, '_background_layer', true);
                    this.stage.setChildIndex(this.backgroundLayer, 0);
                    this.gameLayer = this.add.dGroup(0, 0, '_game_layer');
                    this.uiLayer = this.add.dGroup(0, 0, '_ui_layer');
                    this.uiLayer.fixedToCamera = true;
                    this.stageLayer = this.add.dGroup(0, 0, '_stage_layer', true);
                };
                Game.prototype.addMouseCallbacks = function () {
                    if (this.device.desktop) {
                        this.input.mouse.mouseOverCallback = this.mouseOver;
                        this.input.mouse.mouseOutCallback = this.mouseOut;
                    }
                };
                Game.prototype.mouseOut = function () {
                    application_4.Application.getInstance().sendNotification(utils_1.Notifications.MOUSE_LEAVE_GLOBAL);
                };
                Game.prototype.mouseOver = function () {
                    application_4.Application.getInstance().sendNotification(utils_1.Notifications.MOUSE_ENTER_GLOBAL);
                };
                Game.prototype.disableElementInput = function (el) {
                    if (el.input && el.inputEnabled === true) {
                        el.wasEnabled = true;
                        el.inputEnabled = false;
                    }
                    if (el.children.length > 0) {
                        for (var i = 0; i < el.children.length; i++) {
                            this.disableElementInput(el.children[i]);
                        }
                    }
                };
                Game.prototype.enableElementInput = function (el) {
                    if (el.input && el.inputEnabled === false && el.wasEnabled) {
                        el.wasEnabled = false;
                        el.inputEnabled = true;
                    }
                    if (el.children.length > 0) {
                        for (var i = 0; i < el.children.length; i++) {
                            this.enableElementInput(el.children[i]);
                        }
                    }
                };
                Game.prototype.disableInput = function (group) {
                    return group.forEach(function (el) {
                        if (el instanceof Phaser.Group) {
                            return this.disableInput(el);
                        }
                        else {
                            return this.disableElementInput(el);
                        }
                    }, this);
                };
                Game.prototype.enableInput = function (group) {
                    return group.forEach(function (el) {
                        if (el instanceof Phaser.Group) {
                            return this.enableInput(el);
                        }
                        else {
                            return this.enableElementInput(el);
                        }
                    }, this);
                };
                Game.prototype.disableGameInput = function () {
                    this.disableInput(this.gameLayer);
                    this.onWorldInputDisabled.dispatch();
                };
                Game.prototype.enableGameInput = function () {
                    this.enableInput(this.gameLayer);
                    this.onWorldInputEnabled.dispatch();
                };
                Game.prototype.changeState = function (toState) {
                    this.gameLayer.removeAll(true, true);
                    return this.state.start(toState, false, false);
                };
                Object.defineProperty(Game.prototype, "addToGame", {
                    get: function () {
                        this.add.targetGroup = this.gameLayer;
                        return this.add;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Game.prototype, "addToBackground", {
                    get: function () {
                        this.add.targetGroup = this.backgroundLayer;
                        return this.add;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Game.prototype, "addToUI", {
                    get: function () {
                        this.add.targetGroup = this.uiLayer;
                        return this.add;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Game.prototype, "addToStage", {
                    get: function () {
                        this.add.targetGroup = this.stageLayer;
                        return this.add;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Game.prototype, "addToWorld", {
                    get: function () {
                        this.add.targetGroup = this.world;
                        return this.add;
                    },
                    enumerable: true,
                    configurable: true
                });
                return Game;
            }(Phaser.Game));
            exports_9("Game", Game);
            GameObjectFactory = (function (_super) {
                __extends(GameObjectFactory, _super);
                function GameObjectFactory() {
                    _super.apply(this, arguments);
                    this._targetGroup = null;
                    this._defaultLayer = this.world;
                }
                GameObjectFactory.prototype.existing = function (object) {
                    var group = this.targetGroup;
                    this.targetGroup = null;
                    return group.add(object);
                };
                GameObjectFactory.prototype.image = function (x, y, key, frame, group) {
                    if (x === void 0) { x = 0; }
                    if (y === void 0) { y = 0; }
                    if (group === undefined) {
                        group = this.targetGroup;
                    }
                    this.targetGroup = null;
                    return group.add(new Phaser.Image(this.game, x, y, key, frame));
                };
                GameObjectFactory.prototype.sprite = function (x, y, key, frame, group) {
                    if (x === void 0) { x = 0; }
                    if (y === void 0) { y = 0; }
                    if (group === undefined) {
                        group = this.targetGroup;
                    }
                    this.targetGroup = null;
                    return group.create(x, y, key, frame);
                };
                GameObjectFactory.prototype.creature = function (x, y, key, mesh, group) {
                    if (x === void 0) { x = 0; }
                    if (y === void 0) { y = 0; }
                    if (group === undefined) {
                        group = this.targetGroup;
                    }
                    this.targetGroup = null;
                    var obj = new Phaser['Creature'](this.game, x, y, key, mesh);
                    group.add(obj);
                    return obj;
                };
                GameObjectFactory.prototype.group = function (parent, name, addToStage, enableBody, physicsBodyType) {
                    if (name === void 0) { name = 'group'; }
                    if (addToStage === void 0) { addToStage = false; }
                    if (enableBody === void 0) { enableBody = false; }
                    if (physicsBodyType === void 0) { physicsBodyType = 0; }
                    if (parent === undefined && addToStage !== true) {
                        parent = this.targetGroup;
                    }
                    this.targetGroup = null;
                    return new Phaser.Group(this.game, parent, name, addToStage, enableBody, physicsBodyType);
                };
                GameObjectFactory.prototype.physicsGroup = function (physicsBodyType, parent, name, addToStage) {
                    if (physicsBodyType === void 0) { physicsBodyType = 0; }
                    if (name === void 0) { name = 'group'; }
                    if (addToStage === void 0) { addToStage = false; }
                    if (parent === undefined) {
                        parent = this.targetGroup;
                    }
                    this.targetGroup = null;
                    return new Phaser.Group(this.game, parent, name, addToStage, true, physicsBodyType);
                };
                GameObjectFactory.prototype.spriteBatch = function (parent, name, addToStage) {
                    if (name === void 0) { name = "spriteBatch"; }
                    if (addToStage === void 0) { addToStage = false; }
                    if (parent === undefined) {
                        parent = this.targetGroup;
                    }
                    this.targetGroup = null;
                    return new Phaser.SpriteBatch(this.game, parent, name, addToStage);
                };
                GameObjectFactory.prototype.tileSprite = function (x, y, width, height, key, frame, group) {
                    if (x === void 0) { x = 0; }
                    if (y === void 0) { y = 0; }
                    if (width === void 0) { width = 0; }
                    if (height === void 0) { height = 0; }
                    if (group === undefined) {
                        group = this.targetGroup;
                    }
                    this.targetGroup = null;
                    return group.add(new Phaser.TileSprite(this.game, x, y, width, height, key, frame));
                };
                GameObjectFactory.prototype.rope = function (x, y, key, frame, points, group) {
                    if (x === void 0) { x = 0; }
                    if (y === void 0) { y = 0; }
                    if (group === undefined) {
                        group = this.targetGroup;
                    }
                    this.targetGroup = null;
                    return group.add(new Phaser.Rope(this.game, x, y, key, frame, points));
                };
                GameObjectFactory.prototype.text = function (x, y, text, style, group) {
                    if (x === void 0) { x = 0; }
                    if (y === void 0) { y = 0; }
                    if (text === void 0) { text = ''; }
                    if (group === undefined) {
                        group = this.targetGroup;
                    }
                    this.targetGroup = null;
                    return group.add(new Phaser.Text(this.game, x, y, text, style));
                };
                GameObjectFactory.prototype.button = function (x, y, key, callback, callbackContext, overFrame, outFrame, downFrame, upFrame, group) {
                    if (x === void 0) { x = 0; }
                    if (y === void 0) { y = 0; }
                    if (group === undefined) {
                        group = this.targetGroup;
                    }
                    this.targetGroup = null;
                    return group.add(new Phaser.Button(this.game, x, y, key, callback, callbackContext, overFrame, outFrame, downFrame, upFrame));
                };
                GameObjectFactory.prototype.graphics = function (x, y, group) {
                    if (x === void 0) { x = 0; }
                    if (y === void 0) { y = 0; }
                    if (group === undefined) {
                        group = this.world;
                    }
                    return group.add(new Phaser.Graphics(this.game, x, y));
                };
                GameObjectFactory.prototype.bitmapText = function (x, y, font, text, size, group) {
                    if (text === void 0) { text = ""; }
                    if (size === void 0) { size = 32; }
                    if (group === undefined) {
                        group = this.targetGroup;
                    }
                    this.targetGroup = null;
                    return group.add(new Phaser.BitmapText(this.game, x, y, font, text, size));
                };
                GameObjectFactory.prototype.dSprite = function (x, y, key, frame, name, components, group) {
                    if (group === undefined) {
                        group = this.targetGroup;
                    }
                    this.targetGroup = null;
                    return group.add(new display_2.Sprite(x, y, key, frame, name, components));
                };
                GameObjectFactory.prototype.dGroup = function (x, y, name, addToStage, components, enableBody, physicsBodyType, group) {
                    if (group === undefined && addToStage !== true) {
                        group = this.targetGroup;
                        this.targetGroup = null;
                        return group.add(new display_2.Group(x, y, name, addToStage, components, enableBody, physicsBodyType));
                    }
                    return new display_2.Group(x, y, name, addToStage, components, enableBody, physicsBodyType);
                };
                GameObjectFactory.prototype.dText = function (x, y, text, fontName, fontSize, fontColor, fontAlign, wordWrap, width, lineSpacing, settings, group) {
                    if (group === undefined) {
                        group = this.targetGroup;
                    }
                    this.targetGroup = null;
                    return group.add(new display_2.Text(x, y, text, fontName, fontSize, fontColor, fontAlign, wordWrap, width, lineSpacing, settings));
                };
                GameObjectFactory.prototype.spine = function (assetName, x, y, width, height, skin, anim, hOffset, vOffset, group) {
                    if (assetName === void 0) { assetName = ''; }
                    if (x === void 0) { x = 0; }
                    if (y === void 0) { y = 0; }
                    if (width === void 0) { width = 0; }
                    if (height === void 0) { height = 0; }
                    if (skin === void 0) { skin = 'default'; }
                    if (anim === void 0) { anim = ''; }
                    if (hOffset === void 0) { hOffset = 0; }
                    if (vOffset === void 0) { vOffset = 0; }
                    if (group === undefined) {
                        group = this.targetGroup;
                    }
                    this.targetGroup = null;
                    return group.add(new display_2.Spine(assetName, x, y, width, height, skin, anim, hOffset, vOffset));
                };
                GameObjectFactory.prototype.setDefaultLayer = function (value) {
                    console.log("CAUTION: Changing the default layer will change the target group for .add");
                    this._defaultLayer = value;
                };
                Object.defineProperty(GameObjectFactory.prototype, "defaultLayer", {
                    get: function () {
                        return this._defaultLayer;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GameObjectFactory.prototype, "targetGroup", {
                    get: function () {
                        return this._targetGroup || this._defaultLayer;
                    },
                    set: function (value) {
                        this._targetGroup = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                return GameObjectFactory;
            }(Phaser.GameObjectFactory));
            exports_9("GameObjectFactory", GameObjectFactory);
            SequenceManager = (function () {
                function SequenceManager() {
                    this._defaultInterval = 20;
                    this.game = application_4.Application.getInstance().game;
                }
                SequenceManager.prototype._executeMethod = function (sequence, context, callback, callbackContext) {
                    var func = sequence.shift();
                    if (typeof func !== 'undefined' && typeof context !== 'undefined' && context) {
                        func.call(context);
                    }
                    if (sequence.length === 0 && callback && callbackContext) {
                        callback.call(callbackContext);
                    }
                };
                SequenceManager.prototype.run = function (sequence, context, interval, completeCallback, completeCallbackContext) {
                    if (typeof context === 'undefined') {
                        throw new Error('context must be provided for the sequence methods');
                    }
                    if (typeof interval === 'undefined') {
                        interval = this._defaultInterval;
                    }
                    if (sequence.length === 0 && typeof completeCallback !== 'undefined' && typeof completeCallbackContext !== 'undefined') {
                        completeCallback.call(completeCallbackContext);
                        return;
                    }
                    if (interval === 0) {
                        while (sequence.length > 0)
                            this._executeMethod(sequence, context, typeof completeCallback === 'undefined' ? null : completeCallback, typeof completeCallbackContext === 'undefined' ? null : completeCallbackContext);
                        return;
                    }
                    this.game.time.events.repeat(interval, sequence.length, this._executeMethod, this, sequence, context, typeof completeCallback === 'undefined' ? null : completeCallback, typeof completeCallbackContext === 'undefined' ? null : completeCallbackContext);
                };
                return SequenceManager;
            }());
            exports_9("SequenceManager", SequenceManager);
            State = (function (_super) {
                __extends(State, _super);
                function State() {
                    _super.call(this);
                    this._audio = [];
                    this._mediator = null;
                }
                State.prototype.init = function () {
                };
                State.prototype.preload = function () {
                    if (this.preloadID)
                        this.game.asset.loadAssets(this.preloadID);
                };
                State.prototype.create = function () {
                    if (!this.game.asset.allSoundsDecoded()) {
                        this.game.asset.onLoadCompleteAndAudioDecoded.addOnce(this.create, this);
                        return;
                    }
                    this.buildInterface();
                    this.afterBuildInterface();
                    this.startBuild();
                };
                State.prototype.shutdown = function (removeMediator, removeAudio) {
                    if (removeMediator === void 0) { removeMediator = true; }
                    if (removeAudio === void 0) { removeAudio = true; }
                    if (removeMediator) {
                        this.removeMediator();
                    }
                    if (removeAudio) {
                        this.removeAudio();
                    }
                    _super.prototype.shutdown.call(this);
                };
                State.prototype.listBuildSequence = function () {
                    return [];
                };
                State.prototype.buildInterface = function () { };
                State.prototype.afterBuildInterface = function () { };
                State.prototype.startBuild = function () {
                    this.game.sequence.run(this.listBuildSequence(), this, this.buildInterval, this.preAfterBuild, this);
                };
                State.prototype.preAfterBuild = function () {
                    if (typeof this.game.transition === 'undefined' || !this.game.transition.canTransitionOut()) {
                        this.afterBuild();
                    }
                    else {
                        if (this.game.transition.canTransitionOut()) {
                            this.game.transition.onTransitionOutComplete.addOnce(this.afterBuild, this);
                            this.game.transition.transitionOut();
                        }
                    }
                };
                State.prototype.afterBuild = function () { };
                State.prototype.addAudio = function (track) {
                    if (!this._audio) {
                        this._audio = [];
                    }
                    this._audio.push(track);
                    return track;
                };
                State.prototype.removeAudio = function () {
                    var sound;
                    if (!this._audio) {
                        return;
                    }
                    while (this._audio.length > 0) {
                        sound = this._audio.pop();
                        if (typeof sound !== 'undefined' && sound != null && typeof sound.stop !== 'undefined') {
                            if (typeof sound.onStop !== 'undefined') {
                                sound.onStop.removeAll();
                            }
                            sound.stop();
                        }
                    }
                };
                State.prototype.removeMediator = function () {
                    if (!this._mediator)
                        return;
                    this._mediator.destroy();
                    this._mediator = null;
                };
                Object.defineProperty(State.prototype, "preloadID", {
                    get: function () {
                        return null;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(State.prototype, "buildInterval", {
                    get: function () {
                        return 10;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(State.prototype, "add", {
                    get: function () {
                        return this.game.addToGame;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(State.prototype, "app", {
                    get: function () {
                        return application_4.Application.getInstance();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(State.prototype, "game", {
                    get: function () {
                        return this.app.game;
                    },
                    enumerable: true,
                    configurable: true
                });
                return State;
            }(Phaser.State));
            exports_9("State", State);
            StorageManager = (function () {
                function StorageManager() {
                    this.game = application_4.Application.getInstance().game;
                    this._init();
                }
                StorageManager.prototype._init = function () {
                    this._localStorageAvailable = this._getIsLocalStorageAvailable();
                    console.log('local storage available', this._localStorageAvailable);
                };
                StorageManager.prototype._getIsLocalStorageAvailable = function () {
                    try {
                        return 'localStorage' in window && window['localStorage'] !== null;
                    }
                    catch (e) {
                        return false;
                    }
                };
                StorageManager.prototype._getString = function (data) {
                    if (typeof data === 'string') {
                        return data;
                    }
                    var jsonData;
                    try {
                        jsonData = JSON.stringify(data);
                    }
                    catch (e) {
                        console.log('Could not convert' + data + ' to json');
                        return null;
                    }
                    return jsonData;
                };
                StorageManager.prototype.getFromLocalStorage = function (key, isJSON) {
                    if (isJSON === void 0) { isJSON = true; }
                    var data = localStorage.getItem(key);
                    if (typeof data === 'undefined') {
                        console.log('no data saved with the key', key);
                        return null;
                    }
                    if (isJSON !== false) {
                        data = JSON.parse(data);
                    }
                    return data;
                };
                StorageManager.prototype.saveToLocalStorage = function (key, value) {
                    if (!this._localStorageAvailable) {
                        console.log('no local storage');
                        return false;
                    }
                    try {
                        localStorage.setItem(key, this._getString(value));
                    }
                    catch (e) {
                        console.log('your data could not be saved');
                    }
                };
                StorageManager.prototype.clearFromLocalStorage = function (key) {
                    if (!this._localStorageAvailable) {
                        console.log('no local storage');
                        return false;
                    }
                    try {
                        localStorage.removeItem(key);
                    }
                    catch (e) { }
                };
                return StorageManager;
            }());
            exports_9("StorageManager", StorageManager);
            TransitionManager = (function () {
                function TransitionManager() {
                    this.onTransitionOutComplete = new Phaser.Signal();
                    this.onTransitionInComplete = new Phaser.Signal();
                    this._transition = null;
                    this._transitions = {};
                    this._exceptions = {};
                    this._fromState = null;
                    this._toState = null;
                    this.game = application_4.Application.getInstance().game;
                }
                TransitionManager.prototype._add = function (id, outHandler, preloadHandler, inHandler) {
                    this._transitions[id] = {
                        outHandler: outHandler,
                        preloadHandler: preloadHandler,
                        inHandler: inHandler
                    };
                };
                TransitionManager.prototype._getTransition = function (inState, outState) {
                    var transition = this._transitions[inState + '/' + outState];
                    if (typeof transition === 'undefined')
                        transition = this._transitions['all'];
                    return typeof transition === 'undefined' ? null : transition;
                };
                TransitionManager.prototype._transitionInComplete = function () {
                    this._transition = this._getTransition(this._fromState, this._toState);
                    if (!this._transition)
                        return false;
                    if (typeof this._transition.preloadHandler.loadStart === 'function')
                        this.game.asset.onLoadStart.addOnce(this._transition.preloadHandler.loadStart, this._transition.preloadHandler);
                    if (typeof this._transition.preloadHandler.loadProgress === 'function') {
                        this.game.asset.onFileComplete.add(this._transition.preloadHandler.loadProgress, this._transition.preloadHandler);
                    }
                    this.game.asset.onLoadCompleteAndAudioDecoded.addOnce(this._preloadComplete, this);
                    this.onTransitionInComplete.dispatch();
                    this.game.changeState(this._toState);
                };
                TransitionManager.prototype._transitionOutComplete = function () {
                    this._transition = null;
                    this.onTransitionOutComplete.dispatch();
                };
                TransitionManager.prototype._preloadComplete = function () {
                    this._transition = this._getTransition(this._fromState, this._toState);
                    if (!this._transition)
                        return false;
                    this.game.asset.onFileComplete.remove(this._transition.preloadHandler.loadProgress, this._transition.preloadHandler);
                    if (typeof this._transition.preloadHandler.loadComplete === 'function')
                        this._transition.preloadHandler.loadComplete();
                };
                TransitionManager.prototype._clearTransition = function () {
                    this._transition.outHandler.transitionInComplete.remove(this._transitionOutComplete, this);
                    this._transition.inHandler.transitionOutComplete.remove(this._transitionInComplete, this);
                    this.game.asset.onLoadCompleteAndAudioDecoded.remove(this._preloadComplete, this);
                    this.game.asset.onLoadStart.remove(this._transition.preloadHandler.loadStart, this._transition.preloadHandler);
                    this.game.asset.onFileComplete.remove(this._transition.preloadHandler.loadProgress, this._transition.preloadHandler);
                    this._transition = null;
                };
                TransitionManager.prototype.add = function (fromState, toState, outHandler, preloadHandler, inHandler) {
                    var args;
                    if (arguments.length < 5) {
                        if (fromState === 'all') {
                            args = [].slice.call(arguments, 1);
                            if (arguments.length === 2)
                                return this._add('all', args[0], args[0], args[0]);
                            else
                                return this._add('all', args[0], args[1], args[2]);
                        }
                        else {
                            args = [].slice.call(arguments, 2);
                            return this._add(fromState + '/' + toState, args[0], args[0], args[0]);
                        }
                    }
                    return this._add(fromState + '/' + toState, outHandler, preloadHandler, inHandler);
                };
                TransitionManager.prototype.addAll = function (handler) {
                    return this._add('all', handler, handler, handler);
                };
                TransitionManager.prototype.addException = function (state) {
                    this._exceptions[state] = true;
                };
                TransitionManager.prototype.remove = function (fromState, toState) {
                    if (arguments.length === 1) {
                        this._transitions[fromState] = null;
                        delete this._transitions[fromState];
                    }
                    else {
                        this._transitions[fromState + '/' + toState] = null;
                        delete this._transitions[fromState + '/' + toState];
                    }
                };
                TransitionManager.prototype.to = function (state) {
                    if (this._transition)
                        this._clearTransition();
                    if (this._exceptions[state])
                        return;
                    this._fromState = this.game.state.current;
                    this._toState = state;
                    this._transition = this._getTransition(this._fromState, this._toState);
                    if (!this._transition) {
                        console.log('no transition found for:', this.game.state.current + ' to ' + state);
                        this.game.changeState(this._toState);
                    }
                    this.transitionIn();
                };
                TransitionManager.prototype.transitionIn = function () {
                    if (!this._transition)
                        return;
                    if (typeof this._transition.outHandler.transitionIn === 'function') {
                        this._transition.outHandler.transitionInComplete.addOnce(this._transitionInComplete, this);
                        this._transition.outHandler.transitionIn();
                    }
                };
                TransitionManager.prototype.canTransitionOut = function () {
                    return !this._exceptions[this.game.state.current] && this._transition && this._transition.inHandler && typeof this._transition.inHandler.transitionOut === 'function';
                };
                TransitionManager.prototype.transitionOut = function () {
                    this._transition.inHandler.transitionOutComplete.addOnce(this._transitionOutComplete, this);
                    this._transition.inHandler.transitionOut();
                };
                return TransitionManager;
            }());
            exports_9("TransitionManager", TransitionManager);
        }
    }
});
System.register("dijon/application", ["dijon/core", "dijon/mvc"], function(exports_10, context_10) {
    "use strict";
    var __moduleName = context_10 && context_10.id;
    var core_1, mvc_1;
    var Application;
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (mvc_1_1) {
                mvc_1 = mvc_1_1;
            }],
        execute: function() {
            Application = (function () {
                function Application() {
                    var _this = this;
                    this._mediator = null;
                    this._models = {};
                    this._mediators = {};
                    this._observerMap = {};
                    if (Application.instance)
                        throw Error(Application.SINGLETON_MSG);
                    Application.instance = this;
                    window.addEventListener("hashchange", function () {
                        Application._getHashQuery();
                        _this.windowHashChange();
                    }, false);
                    this.createGame();
                    this.startGame();
                }
                Application.prototype.windowHashChange = function () {
                };
                Application.prototype.createGame = function () {
                    this.game = new core_1.Game({
                        width: 800,
                        height: 600,
                        parent: 'game-container',
                        renderer: Phaser.AUTO,
                        transparent: false
                    });
                };
                Application.prototype.startGame = function () {
                };
                Application.prototype.addPlugins = function () {
                    this.game.addPlugins();
                };
                Application.prototype.registerModel = function (model) {
                    if (this._models[model.name]) {
                        throw (new Error('Application:: a model with the name "' + model.name + '" already exists.'));
                    }
                    this._models[model.name] = model;
                    model.onRegister();
                    return model;
                };
                Application.prototype.retrieveModel = function (modelName) {
                    return this._models[modelName] || null;
                };
                Application.prototype.removeModel = function (modelToRemove) {
                    var name = modelToRemove.name;
                    var model = this._models[name];
                    if (!model)
                        return;
                    model.onRemoved();
                    delete this._models[name];
                };
                Application.prototype.registerMediator = function (mediator) {
                    if (this._mediators[mediator.name]) {
                        throw (new Error('Application:: a mediator with the name "' + mediator.name + '" already exists.'));
                    }
                    this._mediators[mediator.name] = mediator;
                    this.registerObserver(mediator);
                    mediator.onRegister();
                };
                Application.prototype.retrieveMediator = function (mediatorName) {
                    return this._mediators[mediatorName] || null;
                };
                Application.prototype.removeMediator = function (mediatorToRemove) {
                    var _this = this;
                    var name = mediatorToRemove.name;
                    var mediator = this._mediators[name];
                    if (!mediator)
                        return;
                    mediator.listNotificationInterests().forEach(function (interest) {
                        _this.removeObserver(interest, mediator);
                    });
                    mediator.onRemoved();
                    delete this._mediators[name];
                };
                Application.prototype.registerObserver = function (observer) {
                    var _this = this;
                    observer.listNotificationInterests().forEach(function (notificationName) {
                        if (_this._observerMap[notificationName] === undefined) {
                            _this._observerMap[notificationName] = [];
                        }
                        _this._observerMap[notificationName].push(observer);
                    });
                };
                Application.prototype.removeObserver = function (notificationName, observerToRemove) {
                    var observers = null, observer = null, i = 0;
                    observers = this._observerMap[notificationName];
                    i = observers.length;
                    while (i--) {
                        observer = observers[i];
                        if (observer === observerToRemove) {
                            observers.splice(i, 1);
                            break;
                        }
                    }
                    if (observers.length == 0) {
                        delete this._observerMap[notificationName];
                    }
                };
                Application.prototype.sendNotification = function (notificationName, notficationBody) {
                    var notification = new mvc_1.Notification(notificationName, notficationBody);
                    this._notifyObservers(notification);
                    notification.destroy();
                    notification = null;
                };
                Application.prototype._notifyObservers = function (notification) {
                    var observer = null, observers = null;
                    var notificationName = notification.getName();
                    var observersRef = this._observerMap[notificationName];
                    if (observersRef) {
                        observers = observersRef.slice(0);
                        observers.forEach(function (observer) {
                            observer.handleNotification(notification);
                        });
                    }
                };
                Application._getHashQuery = function () {
                    Application._hashQuery = {};
                    if (!window.location.hash || window.location.hash === undefined) {
                        window.location.hash = '';
                    }
                    var hash = window.location.hash.substr(1, window.location.hash.length);
                    var aHash = hash.split('&');
                    aHash.forEach(function (hashPair) {
                        var aHash = hashPair.split('=');
                        Application._hashQuery[aHash[0]] = /^\d+$/.test(aHash[1]) ? parseInt(aHash[1]) : aHash[1];
                    });
                };
                Application.getInstance = function () {
                    if (!Application.instance)
                        Application.instance = new Application();
                    return Application.instance;
                };
                Application.queryVar = function (variableId) {
                    if (Application._hashQuery === undefined) {
                        Application._getHashQuery();
                    }
                    return Application._hashQuery[variableId] || null;
                };
                Application.instance = null;
                Application.SINGLETON_MSG = 'Application singleton already constructed!';
                return Application;
            }());
            exports_10("Application", Application);
        }
    }
});

//# sourceMappingURL=data:application/json;base64,
